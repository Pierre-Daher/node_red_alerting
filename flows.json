[
    {
        "id": "fb3126e4afa64725",
        "type": "tab",
        "label": "Communication",
        "disabled": false,
        "info": ""
    },
    {
        "id": "ac3bce4c3ba25cf8",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "36fdbc5d5d796808",
        "type": "tab",
        "label": "Dashboard personnalis√©",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f1f7ec6f.11a9",
        "type": "tab",
        "label": "Communication_Presse_75T",
        "disabled": false,
        "info": ""
    },
    {
        "id": "52543b0b0214e59c",
        "type": "tab",
        "label": "Dashboard_75T",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c655ed5d447ddd09",
        "type": "tab",
        "label": "communication Belotti",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "86a266d2e918ccb0",
        "type": "tab",
        "label": "Dashboard_Belotti",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "3c6eb3759a5ae8f0",
        "type": "tab",
        "label": "Communication _Presse_55T",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "d4d1d4d8c221f3e8",
        "type": "tab",
        "label": "Dashboard_55T",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0c2a792bad088f5c",
        "type": "tab",
        "label": "Communication_Presse_120T",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "1b375dd4e8b1a2a2",
        "type": "tab",
        "label": "Dashboard_120T",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f7d535f0f01c4dee",
        "type": "tab",
        "label": "Communication CMS2",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "f6bd567ff549a508",
        "type": "tab",
        "label": "Dashboard CMS2",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "6af72356b98b0d5b",
        "type": "tab",
        "label": "Communication CMS3",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b6db67ba3cbb9050",
        "type": "tab",
        "label": "Dashboard CMS3",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "23dd4c85940a32b9",
        "type": "tab",
        "label": "Communication_Tarbes",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "818224cece2a3687",
        "type": "tab",
        "label": "Dashboard_Tarbes",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2b1c420aecfa5af2",
        "type": "tab",
        "label": "Energie_modbus",
        "disabled": true,
        "info": ""
    },
    {
        "id": "ee46fd2b48f2402d",
        "type": "tab",
        "label": "Flow Azure",
        "disabled": true,
        "info": ""
    },
    {
        "id": "a7af23954e926de9",
        "type": "tab",
        "label": "Flux 1",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "f21a30839d1a3fa7",
        "type": "tab",
        "label": "envoi de mail perso ",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1b23ff04fc77b476",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "8f925867aacf519c",
        "type": "tab",
        "label": "envoi de mail fonctionnel (daher)",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9bab2ee7b28510b6",
        "type": "tab",
        "label": "envoi de mail v2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "240c69393d2a799d",
        "type": "tab",
        "label": "envoi de mail v3",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ba79586f20c05182",
        "type": "tab",
        "label": "envoi de mail v4",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "073aac48e9473b76",
        "type": "tab",
        "label": "traduction code Vbs",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "299b2b1d851ddc92",
        "type": "tab",
        "label": "Calcul div eucl",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "d67dc8f5b5d3187a",
        "type": "tab",
        "label": "Flux 5",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "29b840f92d557a1e",
        "type": "tab",
        "label": "test lecture excel",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "2463754f4eca34b4",
        "type": "tab",
        "label": "Flux 4",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "705cdfa249fde165",
        "type": "tab",
        "label": "Flow 3",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d7b0a84d.8c0648",
        "type": "http proxy",
        "name": "ProxyDaher",
        "url": "http://proxy-prd.dahergroup.com:8080",
        "noproxy": []
    },
    {
        "id": "aadce5f52f783943",
        "type": "ui_tab",
        "name": "Dashboard Presse 75T",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "f1ee606d2603d04e",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "82e1da2898850c3d",
        "type": "ui_tab",
        "name": "Dashboard Banc de Test",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "1b34a412bfc51b15",
        "type": "ui_group",
        "name": "Dashboard Banc de Test",
        "tab": "82e1da2898850c3d",
        "order": 1,
        "disp": true,
        "width": "30",
        "collapse": false,
        "className": ""
    },
    {
        "id": "4f571a16771506d1",
        "type": "ui_group",
        "name": "Presse_75T_group_unic",
        "tab": "aadce5f52f783943",
        "order": 4,
        "disp": true,
        "width": "30",
        "collapse": false,
        "className": ""
    },
    {
        "id": "18c7cdf0adc59c56",
        "type": "ui_group",
        "name": "Default",
        "tab": "",
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "df020651bf21bed7",
        "type": "ui_group",
        "name": "Default",
        "tab": "",
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "539696122fff9623",
        "type": "ui_group",
        "name": "Dashboard_55T_temp_lunette_1",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "91279e9a959d0287",
        "type": "ui_group",
        "name": "Default",
        "tab": "",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "b5a8b261e33c26bb",
        "type": "ui_group",
        "name": "Dashboard_55T_Energie_Four_P1",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "9c04ef3dcda28bb2",
        "type": "ui_group",
        "name": "Default",
        "tab": "",
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "4f0c4ed8f7187238",
        "type": "ui_group",
        "name": "Default",
        "tab": "",
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "0fb6f39b74b3bc41",
        "type": "ui_group",
        "name": "Default",
        "tab": "",
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "b389d6a6bd309b3f",
        "type": "ui_group",
        "name": "Default",
        "tab": "",
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "723fc3c2fa28ac4b",
        "type": "ui_group",
        "name": "Default",
        "tab": "",
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "6d999ab0c5399e50",
        "type": "ui_group",
        "name": "Dashboard_55T_Energie_Four_P2",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "5791543ef542971b",
        "type": "ui_group",
        "name": "Default",
        "tab": "",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "1337b03b5f8cf60d",
        "type": "ui_group",
        "name": "Default",
        "tab": "",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "b7e7846375fd5f02",
        "type": "ui_spacer",
        "z": "d4d1d4d8c221f3e8",
        "name": "spacer",
        "group": "f42ebe9d16a3cc9f",
        "order": 4,
        "width": 1,
        "height": 1
    },
    {
        "id": "433b61598723dce0",
        "type": "ui_tab",
        "name": "Dashboard Belotti",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "c5bf63fb1b49fed7",
        "type": "ui_group",
        "name": "Dashboard Belotti",
        "tab": "433b61598723dce0",
        "order": 1,
        "disp": true,
        "width": "30",
        "collapse": false,
        "className": ""
    },
    {
        "id": "f8cd594da000deaa",
        "type": "ui_group",
        "name": "Default",
        "tab": "",
        "disp": true,
        "width": "30",
        "collapse": false,
        "className": ""
    },
    {
        "id": "d49e76329cbc24bb",
        "type": "ui_group",
        "name": "Default",
        "tab": "",
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "520408d738a95c98",
        "type": "ui_group",
        "name": "Default",
        "tab": "",
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "17fad34ab3dfc642",
        "type": "ui_group",
        "name": "Dahboard_55T",
        "tab": "",
        "disp": true,
        "width": "30",
        "collapse": false,
        "className": ""
    },
    {
        "id": "0e2b8d462a56f09d",
        "type": "ui_group",
        "name": "Default",
        "tab": "",
        "disp": true,
        "width": "30",
        "collapse": false,
        "className": ""
    },
    {
        "id": "31089c8eb3af5979",
        "type": "ui_group",
        "name": "Default",
        "tab": "",
        "disp": true,
        "width": "30",
        "collapse": false,
        "className": ""
    },
    {
        "id": "5bcd428f06a348be",
        "type": "ui_group",
        "name": "Default",
        "tab": "",
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "b26d83f5d996b5bd",
        "type": "ui_group",
        "name": "Default",
        "tab": "",
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "4d4b095dc3f2290f",
        "type": "ui_group",
        "name": "Default",
        "tab": "",
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "ce64c4d38a7f31ea",
        "type": "ui_tab",
        "name": "Dashboard_Presse_55T",
        "icon": "dashboard",
        "order": 5,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "f9220d91d5895a6a",
        "type": "ui_group",
        "name": "Presse_55T_group_unic",
        "tab": "ce64c4d38a7f31ea",
        "order": 1,
        "disp": true,
        "width": 30,
        "collapse": false,
        "className": ""
    },
    {
        "id": "85066bcf547e593a",
        "type": "ui_tab",
        "name": "Dashboard_Presse_120T",
        "icon": "dashboard",
        "order": 6,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "7b473d4078040ec5",
        "type": "ui_group",
        "name": "Presse_120T_group_unic",
        "tab": "85066bcf547e593a",
        "order": 1,
        "disp": true,
        "width": "30",
        "collapse": false,
        "className": ""
    },
    {
        "id": "70993bd190bbc439",
        "type": "ui_tab",
        "name": "Dashboard CMS2",
        "icon": "dashboard",
        "order": 6,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "2d112688535f1e19",
        "type": "ui_group",
        "name": "CMS2_group_unic",
        "tab": "70993bd190bbc439",
        "order": 1,
        "disp": true,
        "width": 30,
        "collapse": false,
        "className": ""
    },
    {
        "id": "2ec5fe5d0168b479",
        "type": "ui_tab",
        "name": "Dashboard CMS3",
        "icon": "dashboard",
        "order": 7,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "853dd983c22ff01a",
        "type": "ui_group",
        "name": "CMS3_group_unic",
        "tab": "2ec5fe5d0168b479",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "1c662c1e7e39e510",
        "type": "ui_tab",
        "name": "Test_horloge",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "13d7613f036a6d38",
        "type": "ui_group",
        "name": "Default",
        "tab": "1c662c1e7e39e510",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "ef3eaa6cb3d4cfaa",
        "type": "ui_group",
        "name": "horloge",
        "tab": "1c662c1e7e39e510",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "dc254a88288692f8",
        "type": "ui_tab",
        "name": "Dashboard_Tarbes",
        "icon": "dashboard",
        "order": 9,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "2feac4f41a4a9f5d",
        "type": "ui_group",
        "name": "Tarbes_peinture_group_unic",
        "tab": "dc254a88288692f8",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "4039d7da.be9428",
        "type": "OPCUA-IIoT-Connector",
        "discoveryUrl": "",
        "endpoint": "opc.tcp://10.129.44.75:59300/Prosyst/UnifiedDataCollector",
        "keepSessionAlive": true,
        "loginEnabled": false,
        "securityPolicy": "None",
        "securityMode": "NONE",
        "name": "UDC_New_Banc_de_TEST",
        "showErrors": false,
        "individualCerts": false,
        "publicCertificateFile": "",
        "privateKeyFile": "",
        "defaultSecureTokenLifetime": "",
        "endpointMustExist": false,
        "autoSelectRightEndpoint": false,
        "strategyMaxRetry": "",
        "strategyInitialDelay": "",
        "strategyMaxDelay": "",
        "strategyRandomisationFactor": "",
        "requestedSessionTimeout": "10000",
        "connectionStartDelay": "",
        "reconnectDelay": "",
        "maxBadSessionRequests": "2"
    },
    {
        "id": "da5aa165.a9f37",
        "type": "OPCUA-IIoT-Connector",
        "discoveryUrl": "",
        "endpoint": "opc.tcp://I-NTE-A501-GTW:59300/Prosyst/UnifiedDataCollector",
        "keepSessionAlive": false,
        "loginEnabled": false,
        "securityPolicy": "None",
        "securityMode": "NONE",
        "name": "UDC_New_Presse_75T",
        "showErrors": true,
        "individualCerts": false,
        "publicCertificateFile": "",
        "privateKeyFile": "",
        "defaultSecureTokenLifetime": "",
        "endpointMustExist": false,
        "autoSelectRightEndpoint": false,
        "strategyMaxRetry": "",
        "strategyInitialDelay": "",
        "strategyMaxDelay": "",
        "strategyRandomisationFactor": "",
        "requestedSessionTimeout": "10000",
        "connectionStartDelay": "",
        "reconnectDelay": "",
        "maxBadSessionRequests": "2"
    },
    {
        "id": "ae3ddfa32adf981e",
        "type": "OPCUA-IIoT-Connector",
        "discoveryUrl": "",
        "endpoint": "opc.tcp://I-NTE-I503-GTW:59300/Prosyst/UnifiedDataCollector",
        "keepSessionAlive": true,
        "loginEnabled": false,
        "securityPolicy": "None",
        "securityMode": "NONE",
        "name": "gateway_21",
        "showErrors": false,
        "individualCerts": false,
        "publicCertificateFile": "",
        "privateKeyFile": "",
        "defaultSecureTokenLifetime": "",
        "endpointMustExist": false,
        "autoSelectRightEndpoint": false,
        "strategyMaxRetry": "",
        "strategyInitialDelay": "",
        "strategyMaxDelay": "",
        "strategyRandomisationFactor": "",
        "requestedSessionTimeout": "",
        "connectionStartDelay": "",
        "reconnectDelay": "",
        "maxBadSessionRequests": "10"
    },
    {
        "id": "bff510919caefd12",
        "type": "OPCUA-IIoT-Connector",
        "discoveryUrl": "",
        "endpoint": "opc.tcp://localhost:55388/",
        "keepSessionAlive": true,
        "loginEnabled": false,
        "securityPolicy": "None",
        "securityMode": "NONE",
        "name": "LOCAL SERVER",
        "showErrors": false,
        "individualCerts": false,
        "publicCertificateFile": "",
        "privateKeyFile": "",
        "defaultSecureTokenLifetime": "",
        "endpointMustExist": false,
        "autoSelectRightEndpoint": false,
        "strategyMaxRetry": "",
        "strategyInitialDelay": "",
        "strategyMaxDelay": "",
        "strategyRandomisationFactor": "",
        "requestedSessionTimeout": "",
        "connectionStartDelay": "",
        "reconnectDelay": "",
        "maxBadSessionRequests": "10"
    },
    {
        "id": "458017ab284dc12c",
        "type": "OPCUA-IIoT-Connector",
        "discoveryUrl": "",
        "endpoint": "opc.tcp://I-NTE-A502-GTW:59300/Prosyst/UnifiedDataCollector",
        "keepSessionAlive": true,
        "loginEnabled": false,
        "securityPolicy": "None",
        "securityMode": "NONE",
        "name": "Presse 55T",
        "showErrors": false,
        "individualCerts": false,
        "publicCertificateFile": "",
        "privateKeyFile": "",
        "defaultSecureTokenLifetime": "",
        "endpointMustExist": false,
        "autoSelectRightEndpoint": false,
        "strategyMaxRetry": "",
        "strategyInitialDelay": "",
        "strategyMaxDelay": "",
        "strategyRandomisationFactor": "",
        "requestedSessionTimeout": "",
        "connectionStartDelay": "",
        "reconnectDelay": "",
        "maxBadSessionRequests": "10"
    },
    {
        "id": "9c48326a43e5b76b",
        "type": "OPCUA-IIoT-Connector",
        "discoveryUrl": "",
        "endpoint": "opc.tcp://I-NTE-A503-GTW:59300/Prosyst/UnifiedDataCollector",
        "keepSessionAlive": true,
        "loginEnabled": false,
        "securityPolicy": "None",
        "securityMode": "NONE",
        "name": "GTW 120T",
        "showErrors": false,
        "individualCerts": false,
        "publicCertificateFile": "",
        "privateKeyFile": "",
        "defaultSecureTokenLifetime": "",
        "endpointMustExist": false,
        "autoSelectRightEndpoint": false,
        "strategyMaxRetry": "",
        "strategyInitialDelay": "",
        "strategyMaxDelay": "",
        "strategyRandomisationFactor": "",
        "requestedSessionTimeout": "",
        "connectionStartDelay": "",
        "reconnectDelay": "",
        "maxBadSessionRequests": "10"
    },
    {
        "id": "95539fa483e1d96b",
        "type": "OPCUA-IIoT-Connector",
        "discoveryUrl": "Udc_gtw_Tarbes",
        "endpoint": "opc.tcp://DHR1TXGBW3I:59300/Prosyst/UnifiedDataCollector",
        "keepSessionAlive": true,
        "loginEnabled": false,
        "securityPolicy": "None",
        "securityMode": "NONE",
        "name": "LOCAL SERVER",
        "showErrors": false,
        "individualCerts": false,
        "publicCertificateFile": "",
        "privateKeyFile": "",
        "defaultSecureTokenLifetime": "",
        "endpointMustExist": false,
        "autoSelectRightEndpoint": false,
        "strategyMaxRetry": "",
        "strategyInitialDelay": "",
        "strategyMaxDelay": "",
        "strategyRandomisationFactor": "",
        "requestedSessionTimeout": "",
        "connectionStartDelay": "",
        "reconnectDelay": "",
        "maxBadSessionRequests": "10"
    },
    {
        "id": "c447103cf73ced89",
        "type": "OPCUA-IIoT-Connector",
        "discoveryUrl": "Udc_Tarbes",
        "endpoint": "opc.tcp://DHR1TXGBW3I:59300/Prosyst/UnifiedDataCollector",
        "keepSessionAlive": true,
        "loginEnabled": false,
        "securityPolicy": "None",
        "securityMode": "NONE",
        "name": "LOCAL SERVER",
        "showErrors": false,
        "individualCerts": false,
        "publicCertificateFile": "",
        "privateKeyFile": "",
        "defaultSecureTokenLifetime": "",
        "endpointMustExist": false,
        "autoSelectRightEndpoint": false,
        "strategyMaxRetry": "",
        "strategyInitialDelay": "",
        "strategyMaxDelay": "",
        "strategyRandomisationFactor": "",
        "requestedSessionTimeout": "",
        "connectionStartDelay": "",
        "reconnectDelay": "",
        "maxBadSessionRequests": "10"
    },
    {
        "id": "9598724e5fc0cf0b",
        "type": "OPCUA-IIoT-Connector",
        "discoveryUrl": "",
        "endpoint": "opc.tcp://DHR1TXGBW3I:59300/Prosyst/UnifiedDataCollector",
        "keepSessionAlive": true,
        "loginEnabled": false,
        "securityPolicy": "None",
        "securityMode": "NONE",
        "name": "Udc_Tarbes",
        "showErrors": false,
        "individualCerts": false,
        "publicCertificateFile": "",
        "privateKeyFile": "",
        "defaultSecureTokenLifetime": "",
        "endpointMustExist": false,
        "autoSelectRightEndpoint": false,
        "strategyMaxRetry": "",
        "strategyInitialDelay": "",
        "strategyMaxDelay": "",
        "strategyRandomisationFactor": "",
        "requestedSessionTimeout": "",
        "connectionStartDelay": "",
        "reconnectDelay": "",
        "maxBadSessionRequests": "10"
    },
    {
        "id": "7d73b3be.113afc",
        "type": "modbus-client",
        "name": "Compteurs",
        "clienttype": "serial",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": false,
        "tcpHost": "127.0.0.1",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "COM2",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "19200",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "even",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "",
        "unit_id": 255,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 100,
        "parallelUnitIdsAllowed": false
    },
    {
        "id": "7907e636daeff436",
        "type": "email-transport",
        "name": "",
        "host": "",
        "port": "25",
        "secure": false,
        "authType": "login",
        "proxy": ""
    },
    {
        "id": "0a07a1a68f731c8e",
        "type": "email-transport",
        "name": "",
        "host": "mail1.dahergroup.com",
        "port": "25",
        "secure": true,
        "authType": "login",
        "proxy": ""
    },
    {
        "id": "b5b18316f597e1e1",
        "type": "OPCUA-IIoT-Connector",
        "discoveryUrl": "",
        "endpoint": "opc.tcp://10.129.44.75:59300/Prosyst/UnifiedDataCollector",
        "keepSessionAlive": true,
        "loginEnabled": false,
        "securityPolicy": "None",
        "securityMode": "NONE",
        "name": "LOCAL SERVER",
        "showErrors": false,
        "individualCerts": false,
        "publicCertificateFile": "",
        "privateKeyFile": "",
        "defaultSecureTokenLifetime": "",
        "endpointMustExist": false,
        "autoSelectRightEndpoint": false,
        "strategyMaxRetry": "",
        "strategyInitialDelay": "",
        "strategyMaxDelay": "",
        "strategyRandomisationFactor": "",
        "requestedSessionTimeout": "",
        "connectionStartDelay": "",
        "reconnectDelay": "",
        "maxBadSessionRequests": "10"
    },
    {
        "id": "99ec4a19aa09982e",
        "type": "file in",
        "z": "fb3126e4afa64725",
        "name": "Read Configuration",
        "filename": "C:\\Users\\2108529\\.node-red\\ConfXML\\node_red_configuration_Lent_Banc_de_TEST.xml",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "allProps": false,
        "x": 250,
        "y": 420,
        "wires": [
            [
                "80c7da6b109e768d"
            ]
        ]
    },
    {
        "id": "80c7da6b109e768d",
        "type": "xml",
        "z": "fb3126e4afa64725",
        "name": "",
        "property": "payload",
        "attr": "",
        "chr": "",
        "x": 430,
        "y": 420,
        "wires": [
            [
                "625b0635291306ea",
                "a9389ed013a5954f"
            ]
        ]
    },
    {
        "id": "625b0635291306ea",
        "type": "change",
        "z": "fb3126e4afa64725",
        "name": "Get Variable List",
        "rules": [
            {
                "t": "set",
                "p": "varNameList",
                "pt": "msg",
                "to": "payload.Variables.**.Name",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "varNodeIdList",
                "pt": "msg",
                "to": "payload.Variables.**.NodeId",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "varUnitList",
                "pt": "msg",
                "to": "payload.Variables.**.Unit",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "varFormatList",
                "pt": "msg",
                "to": "payload.Variables.**.Format",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 420,
        "wires": [
            [
                "3e85d5b7a1c067e0"
            ]
        ]
    },
    {
        "id": "5dcd8093031313b9",
        "type": "comment",
        "z": "fb3126e4afa64725",
        "name": "Load Configuration and subscribe",
        "info": "",
        "x": 190,
        "y": 280,
        "wires": []
    },
    {
        "id": "5731ca16a3f967a6",
        "type": "comment",
        "z": "fb3126e4afa64725",
        "name": "Timeout Management",
        "info": "",
        "x": 150,
        "y": 560,
        "wires": []
    },
    {
        "id": "cb136d45e80f4898",
        "type": "status",
        "z": "fb3126e4afa64725",
        "name": "Get Client Status",
        "scope": [
            "cb676891c931b0e8"
        ],
        "x": 140,
        "y": 140,
        "wires": [
            [
                "b1da16de66de99c6"
            ]
        ]
    },
    {
        "id": "b1da16de66de99c6",
        "type": "switch",
        "z": "fb3126e4afa64725",
        "name": "Client Status",
        "property": "status.text",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "connecting",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "active",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "started",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "listening",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "terminated",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 390,
        "y": 120,
        "wires": [
            [
                "fd546a457a5ac17b"
            ],
            [
                "5d994c938f11e96d"
            ],
            [],
            [
                "4d85ee706e7d49bf"
            ],
            [
                "151dc428c3c88706"
            ]
        ]
    },
    {
        "id": "76453474778c9a31",
        "type": "trigger",
        "z": "fb3126e4afa64725",
        "name": "Timeout ConnectionLost",
        "op1": "",
        "op2": "{\"endpoint\":\"opc.tcp://localhost:59300/Prosyst/UnifiedDataCollector\",\"keepSessionAlive\":false,\"showErrors\":true,\"defaultSecureTokenLifetime\":360000,\"endpointMustExist\":false,\"autoSelectRightEndpoint\":false,\"strategyMaxRetry\":10000}",
        "op1type": "nul",
        "op2type": "json",
        "duration": "5",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 530,
        "y": 700,
        "wires": [
            [
                "91432bfb8513d8b6"
            ]
        ]
    },
    {
        "id": "151dc428c3c88706",
        "type": "change",
        "z": "fb3126e4afa64725",
        "name": "ConnectionLost",
        "rules": [
            {
                "t": "set",
                "p": "ConnectionLost",
                "pt": "global",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 640,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "22ee69f7d98f3e21",
        "type": "comment",
        "z": "fb3126e4afa64725",
        "name": "Subscription Management",
        "info": "",
        "x": 150,
        "y": 60,
        "wires": []
    },
    {
        "id": "4d85ee706e7d49bf",
        "type": "change",
        "z": "fb3126e4afa64725",
        "name": "ConnectionOk",
        "rules": [
            {
                "t": "set",
                "p": "ConnectionLost",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "b3a8ba2468f34fae",
        "type": "link in",
        "z": "fb3126e4afa64725",
        "name": "Subscribe",
        "links": [
            "5d994c938f11e96d"
        ],
        "x": 95,
        "y": 420,
        "wires": [
            [
                "99ec4a19aa09982e"
            ]
        ]
    },
    {
        "id": "5d994c938f11e96d",
        "type": "link out",
        "z": "fb3126e4afa64725",
        "name": "StartSubscribe",
        "links": [
            "b3a8ba2468f34fae"
        ],
        "x": 555,
        "y": 100,
        "wires": []
    },
    {
        "id": "a332ee1af8132260",
        "type": "debug",
        "z": "fb3126e4afa64725",
        "name": "DebugLent",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 600,
        "wires": []
    },
    {
        "id": "6be0aea931026563",
        "type": "join",
        "z": "fb3126e4afa64725",
        "name": "group",
        "mode": "custom",
        "build": "array",
        "property": "payload.data",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": true,
        "accumulate": false,
        "timeout": "10",
        "count": "120",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 848,
        "y": 540,
        "wires": [
            [
                "f3e6db2dfd4411e1"
            ]
        ]
    },
    {
        "id": "0a6fc73710dad61e",
        "type": "function",
        "z": "fb3126e4afa64725",
        "name": "Erreur Comm Lente",
        "func": "var status = msg.payload.statusCode.name;\n\n\nif ( status == \"Good\")\n{\n    node.status({fill:\"green\",shape:\"dot\",text:\"Ok\"})\n    return [msg,null];\n}\nelse\n{\n    node.status({fill:\"red\",shape:\"ring\",text:status}) \n    return [null,msg]\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 560,
        "wires": [
            [
                "4a10b7b600180b8a"
            ],
            []
        ]
    },
    {
        "id": "f3e6db2dfd4411e1",
        "type": "change",
        "z": "fb3126e4afa64725",
        "name": "Desc",
        "rules": [
            {
                "t": "set",
                "p": "payload.type",
                "pt": "msg",
                "to": "listen",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1000,
        "y": 540,
        "wires": [
            [
                "8770fb2f89d43076",
                "a332ee1af8132260"
            ]
        ]
    },
    {
        "id": "e2e01d2a67cc9d69",
        "type": "inject",
        "z": "fb3126e4afa64725",
        "name": "Initialization",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 620,
        "wires": [
            [
                "59954d137d9e76c6"
            ]
        ]
    },
    {
        "id": "59954d137d9e76c6",
        "type": "change",
        "z": "fb3126e4afa64725",
        "name": "ConnectionOk",
        "rules": [
            {
                "t": "set",
                "p": "ConnectionLost",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "f49271208f2d133d",
        "type": "delay",
        "z": "fb3126e4afa64725",
        "name": "Reconnect Timeout",
        "pauseType": "delay",
        "timeout": "60",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 470,
        "y": 840,
        "wires": [
            [
                "76453474778c9a31"
            ]
        ]
    },
    {
        "id": "fd546a457a5ac17b",
        "type": "link out",
        "z": "fb3126e4afa64725",
        "name": "outConnecting",
        "links": [],
        "x": 555,
        "y": 60,
        "wires": []
    },
    {
        "id": "87a16cc798eac93f",
        "type": "debug",
        "z": "fb3126e4afa64725",
        "name": "erreur Comm",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 690,
        "y": 640,
        "wires": []
    },
    {
        "id": "a9389ed013a5954f",
        "type": "change",
        "z": "fb3126e4afa64725",
        "name": "Get Variable List",
        "rules": [
            {
                "t": "set",
                "p": "varNameList",
                "pt": "global",
                "to": "payload.Variables.**.Name",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "varNodeIdList",
                "pt": "global",
                "to": "payload.Variables.**.NodeId",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "varUnitList",
                "pt": "global",
                "to": "payload.Variables.**.Unit",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "varFormatList",
                "pt": "global",
                "to": "payload.Variables.**.Format",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "e3b99a7013c7e8a4",
        "type": "debug",
        "z": "fb3126e4afa64725",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 260,
        "wires": []
    },
    {
        "id": "f7a0292ea4ad94de",
        "type": "switch",
        "z": "fb3126e4afa64725",
        "name": "Client Status",
        "property": "status.text",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "not running",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 270,
        "y": 840,
        "wires": [
            [
                "f49271208f2d133d"
            ]
        ]
    },
    {
        "id": "d4251970596391f7",
        "type": "status",
        "z": "fb3126e4afa64725",
        "name": "Get Client Status",
        "scope": [
            "3e75ca8ce7cd4fea"
        ],
        "x": 100,
        "y": 840,
        "wires": [
            [
                "f7a0292ea4ad94de"
            ]
        ]
    },
    {
        "id": "9ee61c94c7ec770f",
        "type": "link out",
        "z": "fb3126e4afa64725",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "03384fd98d46cae0"
        ],
        "x": 975,
        "y": 600,
        "wires": []
    },
    {
        "id": "6e59a9d4030101e4",
        "type": "OPCUA-IIoT-Inject",
        "z": "fb3126e4afa64725",
        "injectType": "inject",
        "payloadType": "json",
        "topic": "",
        "repeat": "1",
        "crontab": "",
        "once": false,
        "startDelay": "5",
        "name": "",
        "payload": "{ \"interval\": 500, \"queueSize\": 10 }",
        "addressSpaceItems": [
            {
                "name": "CurrentTime",
                "nodeId": "ns=0;i=2258",
                "datatypeName": ""
            }
        ],
        "x": 110,
        "y": 700,
        "wires": [
            [
                "3e75ca8ce7cd4fea"
            ]
        ]
    },
    {
        "id": "3e75ca8ce7cd4fea",
        "type": "OPCUA-IIoT-Read",
        "z": "fb3126e4afa64725",
        "attributeId": 0,
        "maxAge": 1,
        "depth": 1,
        "connector": "4039d7da.be9428",
        "name": "read banc de test ",
        "justValue": true,
        "showStatusActivities": false,
        "showErrors": false,
        "parseStrings": false,
        "historyDays": 1,
        "serverMaxItemsToRead": "",
        "x": 290,
        "y": 700,
        "wires": [
            [
                "76453474778c9a31"
            ]
        ]
    },
    {
        "id": "91432bfb8513d8b6",
        "type": "OPCUA-IIoT-Flex-Connector",
        "z": "fb3126e4afa64725",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "connector": "4039d7da.be9428",
        "x": 860,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "4a10b7b600180b8a",
        "type": "function",
        "z": "fb3126e4afa64725",
        "name": "Get data 2",
        "func": "var Proto = \"ns=16;s=Presse_API_Lent_\"\nvar Longueur = Proto.length\n           \n\n// Initialisation de la sortie\n// R√©cup√©ration du message\nvar Data = msg; \n\n//node.warn(\"msg get datta\" + JSON.stringify(msg, null, 2));\n\n\n\n\n// R√©cup√©ration de la valeur\nvar Value = Data.payload.value.value;\n\n// r√©cup√©ration du type\nvar DataType = Data.payload.value.dataType;\n\n// r√©cup√©ration de l'horodatage\nvar DateTimeStr = new Date(Data.payload.sourceTimestamp);\nvar DateTime = DateTimeStr.getTime();\n\n\n\n// r√©cup√©ration du nom\nvar Name = Data.addressSpaceItems[0].nodeId.toString().substring(Longueur);\nvar Numero = parseInt(Data.addressSpaceItems[0].nodeId.toString().substring(Longueur,Longueur+3));\n\n// R√©cup√©ration de l'unit√©\nvar Unit = global.get(\"varUnitList\")[Numero-1];\n\n// R√©cup√©ration du format\nvar Format = global.get(\"varFormatList\")[Numero-1];\nif (Format!=\"\"){\n    // @ts-ignore\n    ValueFormat = parseFloat(Value).toFixed(parseInt(Format))\n    // @ts-ignore\n    Value = ValueFormat.toString()\n}\n\n\n// Cr√©ation de la variable de sortie\nvar myvar_output = {Name,DateTime,Value,Unit};\n\n// Suppression des donn√©es existantes\nmsg = {}\nmsg.payload ={}\n\nmsg.payload.data = myvar_output;\n\nreturn msg;\n/* r√©cup√©ration du nom\nvar Name = Data.addressSpaceItems[0].nodeId.toString().substring(Proto.length);\n\n\n// Cr√©ation de la variable de sortie\nvar myvar_output = {Name,DateTime,Value};\n\n// Suppression des donn√©es existantes\nmsg = {}\nmsg.payload ={}\n\nmsg.payload.data = myvar_output;\n//node.warn(JSON.stringify(msg, null, 2));\n\nreturn msg;*/\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 560,
        "wires": [
            [
                "6be0aea931026563",
                "9ee61c94c7ec770f"
            ]
        ]
    },
    {
        "id": "5b77b14b1ed74b5c",
        "type": "function",
        "z": "fb3126e4afa64725",
        "name": "GetData",
        "func": "var Proto = \"ns=16;s=Presse_API_Lent_\";\nvar Longueur = Proto.length;\n\n// R√©cup√©ration du message\nvar Data = msg;\n\n// V√©rification de la structure de addressSpaceItems\nif (Data.addressSpaceItems && Data.addressSpaceItems.length > 0) {\n    node.warn(\"addressSpaceItems contient \" + Data.addressSpaceItems.length + \" √©l√©ments.\");\n\n    // V√©rification de l'existence de nodeId pour le premier √©l√©ment\n    if (Data.addressSpaceItems[0].nodeId) {\n        var nodeIdStr = Data.addressSpaceItems[0].nodeId.toString();\n        node.warn(\"nodeId complet : \" + nodeIdStr);\n\n        // Extraction du nom et du num√©ro\n        var Name = nodeIdStr.substring(Longueur);\n        var Numero = parseInt(nodeIdStr.substring(Longueur, Longueur + 3));\n\n        node.warn(\"Nom extrait : \" + Name);\n        node.warn(\"Num√©ro extrait : \" + Numero);\n\n    } else {\n        node.warn(\"Erreur : Le premier √©l√©ment de addressSpaceItems n'a pas de nodeId.\");\n    }\n\n} else {\n    node.warn(\"Erreur : addressSpaceItems est vide ou inexistant.\");\n}\n\n// R√©cup√©ration de la valeur\nvar Value = Data.payload.value.value;\n\n// V√©rification de la validit√© de la valeur r√©cup√©r√©e\nif (Value === undefined || Value === null) {\n    node.warn(\"Erreur : La valeur r√©cup√©r√©e est undefined ou null.\");\n} else {\n    node.warn(\"Valeur r√©cup√©r√©e : \" + Value);\n}\n\n// R√©cup√©ration du format\nvar FormatList = global.get(\"varFormatList\") || [];\nvar Format = FormatList[Numero - 1];\n\n// Debug\nnode.warn(\"Format brut : \" + Format);\nvar FormatNumber = parseInt(Format);\nnode.warn(\"Converti en int : \" + FormatNumber);\n\n// Formatage uniquement si le format est un nombre valide\nif (!isNaN(FormatNumber)) {\n    Value = parseFloat(Value).toFixed(FormatNumber).toString();\n} else {\n    node.warn(\"Format non valide ou non num√©rique.\");\n}\n\n// R√©cup√©ration de l'unit√©\nvar Unit = global.get(\"varUnitList\")[Numero - 1] || \"\";\n\n// R√©cup√©ration de l'horodatage\nvar DateTimeStr = new Date(Data.payload.sourceTimestamp);\nvar DateTime = DateTimeStr.getTime();\n\n// Cr√©ation de la variable de sortie\nvar myvar_output = { Name, DateTime, Value, Unit };\n\n// Envoi final\nmsg = {};\nmsg.payload = { data: myvar_output };\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "3e85d5b7a1c067e0",
        "type": "function",
        "z": "fb3126e4afa64725",
        "name": "Subscribe",
        "func": "// Get global flag\nvar bConnectLost = global.get('ConnectionLost') || false;\n\n// Default settings\nvar injectMssge = {};\ninjectMssge.topic = \"\";\ninjectMssge.nodetype = \"inject\";\ninjectMssge.injectType = \"listen\";\ninjectMssge.addressSpaceItems = [];\n\nvar optionsParam = {\n    \"requestedPublishingInterval\": 1000,\n    \"requestedLifetimeCount\": 10,\n    \"requestedMaxKeepAliveCount\": 5,\n    \"maxNotificationsPerPublish\": 10,\n    \"publishingEnabled\": true,\n    \"priority\": 10,\n    \"clientName\": \"nr-iot\"\n};\n\ninjectMssge.payload = { \"interval\": 6000, \"queueSize\": 10, \"options\": optionsParam };\n\nnode.warn(\"subscribe msg : \" + JSON.stringify(msg.varNodeIdList, null, 2));\n\n// R√©cup√©ration du dictionnaire global ou cr√©ation si inexistant\nvar nodeIdToName = global.get('NodeIdToName') || {};\n\n// V√©rification de la validit√© de varNodeIdList et varNameList\nif (!msg.varNodeIdList || !msg.varNameList) {\n    node.warn(\"Les listes varNodeIdList ou varNameList sont vides ou non d√©finies\");\n    return null; // On arr√™te ici si les listes sont invalides\n}\n\n// Cas avec une seule variable\nif (!Array.isArray(msg.varNameList) && !Array.isArray(msg.varNodeIdList)) {\n    var nodeId = msg.varNodeIdList;\n    var name = msg.varNameList;\n\n    if (nodeId !== \"invalid\") {\n        injectMssge.addressSpaceItems.push({ \"name\": name, \"nodeId\": nodeId });\n        nodeIdToName[nodeId] = name; // Ajout dans le dictionnaire\n    } else {\n        node.warn(\"NodeId invalide trouv√© pour l'√©l√©ment : \" + JSON.stringify({ name, nodeId }));\n    }\n} else {\n    // Plusieurs variables\n    for (var i = 0; i < msg.varNameList.length; i++) {\n        var nodeId = msg.varNodeIdList[i];\n        var name = msg.varNameList[i];\n\n        // V√©rification si le NodeId est valide\n        if (nodeId !== \"invalid\") {\n            injectMssge.addressSpaceItems.push({ \"name\": name, \"nodeId\": nodeId });\n            nodeIdToName[nodeId] = name; // Ajout dans le dictionnaire\n        } else {\n            node.warn(\"NodeId invalide trouv√© pour l'√©l√©ment : \" + JSON.stringify({ name, nodeId }));\n        }\n    }\n}\n\n// Sauvegarde globale\nglobal.set('NodeIdToName', nodeIdToName);\n\n// Lancement de la subscription\nif (bConnectLost === false) {\n    console.log(\"---- FIRST SUBSCRIBE ------\");\n    setTimeout(SendSubscribeMessage, 5000); // ‚Üê d√©lai ajout√©\n} else {\n    console.log(\"---- CONNECT LOST - RESUBSCRIBE  ------\");\n    setTimeout(SendSubscribeMessage, 5000);\n}\n\n\nfunction SendSubscribeMessage() {\n    node.warn(\"msg avant envoi dans subscribe : \" + JSON.stringify(injectMssge, null, 2));\n\n    // V√©rification si les addressSpaceItems contiennent des nodeId valides\n    if (!injectMssge.addressSpaceItems || injectMssge.addressSpaceItems.length === 0) {\n        node.warn(\"Aucun nodeId valide trouv√© dans addressSpaceItems\");\n        return null; // On arr√™te ici si aucun nodeId valide\n    }\n\n    // Ajouter des messages de d√©bogage pour v√©rifier les nodeId\n    injectMssge.addressSpaceItems.forEach(item => {\n        if (!item.nodeId || item.nodeId === \"invalid\") {\n            node.warn(\"NodeId invalid trouv√© pour l'√©l√©ment : \" + JSON.stringify(item));\n        } else {\n            node.warn(\"NodeId valide trouv√© : \" + item.nodeId);\n        }\n    });\n    node.warn(\"subscribe injectMssge : \" + JSON.stringify(injectMssge, null, 2));\n\n    node.send(injectMssge);  // Envoi du message apr√®s validation\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 420,
        "wires": [
            [
                "cb676891c931b0e8"
            ]
        ]
    },
    {
        "id": "a63faa197ab131b3",
        "type": "inject",
        "z": "fb3126e4afa64725",
        "name": "d√©marrage acquisition",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{ \"start\": true }",
        "payloadType": "json",
        "x": 1300,
        "y": 880,
        "wires": [
            [
                "b67e3f08c41218ba"
            ]
        ]
    },
    {
        "id": "b67e3f08c41218ba",
        "type": "trigger",
        "z": "fb3126e4afa64725",
        "name": "dur√©e acquisition ",
        "op1": "{ \"start\": true }",
        "op2": "{ \"start\": false }",
        "op1type": "json",
        "op2type": "json",
        "duration": "6000",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1690,
        "y": 900,
        "wires": [
            [
                "1753f3058fe45ac5"
            ]
        ]
    },
    {
        "id": "1753f3058fe45ac5",
        "type": "function",
        "z": "fb3126e4afa64725",
        "name": "function 10",
        "func": "// Si le message start est √† true, on active l‚Äôacquisition\nif (msg.start === true) {\n    global.set(\"acquisitionActive\", true);\n    node.status({ fill: \"green\", shape: \"dot\", text: \"Acquisition en cours...\" });\n}\n// Si le message start est √† false, on arr√™te l‚Äôacquisition\nelse if (msg.start === false) {\n    global.set(\"acquisitionActive\", false);\n    node.status({ fill: \"red\", shape: \"ring\", text: \"Acquisition arr√™t√©e\" });\n}\n\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1910,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "67d85c0f657c2f4d",
        "type": "comment",
        "z": "fb3126e4afa64725",
        "name": "TODO : Acquisition duration ",
        "info": "",
        "x": 1720,
        "y": 820,
        "wires": []
    },
    {
        "id": "9417fe796b854741",
        "type": "comment",
        "z": "fb3126e4afa64725",
        "name": "Machine Data Capture in CSV",
        "info": "Refining the final file by including variable names\n\nNote: The acquisition\nmust be stopped manually;\notherwise,\nit will run in an infinite loop",
        "x": 1500,
        "y": 220,
        "wires": []
    },
    {
        "id": "cd8857afaa227281",
        "type": "debug",
        "z": "fb3126e4afa64725",
        "name": "debug com lent",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 660,
        "wires": []
    },
    {
        "id": "90897509371126e1",
        "type": "function",
        "z": "fb3126e4afa64725",
        "name": "Spy",
        "func": "//node.warn(\"msg spy \" + JSON.stringify(msg, null, 2));\n\n// V√©rifie la structure du message\nif (!msg.payload || !msg.payload.value || msg.payload.value.value === undefined) {\n    node.warn(\"Message invalide ou incomplet\");\n    return null;\n}\n\n// R√©cup√®re le nodeId depuis addressSpaceItems\nlet nodeId = \"unknownNode\";\nif (msg.addressSpaceItems && msg.addressSpaceItems.length > 0) {\n    nodeId = msg.addressSpaceItems[0].nodeId;\n}\n\n// R√©cup√®re le nom mapp√© (depuis global context)\nconst nodeMap = global.get(\"NodeIdToName\") || {};\nconst name = nodeMap[nodeId] || nodeId;\n\n// Extraction des infos\nconst value = msg.payload.value.value;\nconst timestamp = new Date(msg.payload.sourceTimestamp || Date.now()).toISOString();\nconst dataType = msg.payload.value.dataType || \"unknown\";\n\n// Construction du nouveau payload\nmsg.payload = {\n    name: name,\n    nodeId: nodeId,\n    value: value,\n    dataType: dataType,\n    timestamp: timestamp\n};\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 420,
        "wires": [
            [
                "8edeae12b04362a4"
            ]
        ]
    },
    {
        "id": "e3b5b066c2f83828",
        "type": "csv",
        "z": "fb3126e4afa64725",
        "name": "",
        "spec": "rfc",
        "sep": ";",
        "hdrin": "",
        "hdrout": "none",
        "multi": "one",
        "ret": "\\r\\n",
        "temp": "name,value,dataType,timestamp",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 1590,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "8edeae12b04362a4",
        "type": "file",
        "z": "fb3126e4afa64725",
        "name": "Capture_donnees",
        "filename": "C:\\Users\\2108529\\.node-red\\Capture3_data\\Donnees_bdt2.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1410,
        "y": 420,
        "wires": [
            [
                "e3b5b066c2f83828"
            ]
        ]
    },
    {
        "id": "8770fb2f89d43076",
        "type": "link out",
        "z": "fb3126e4afa64725",
        "name": "link out 7",
        "mode": "link",
        "links": [],
        "x": 1165,
        "y": 520,
        "wires": []
    },
    {
        "id": "792a4fb42ee7f9ba",
        "type": "inject",
        "z": "fb3126e4afa64725",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{   \"addressSpaceItems\": [     {       \"name\": \"001_Calcul_puissance_ph1_n_voute\",       \"nodeId\": \"ns=16;s=Presse_API_Lent_001_Calcul_puissance_ph1_n_voute\"     }   ] }",
        "payloadType": "json",
        "x": 770,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "d19d47b401030872",
        "type": "inject",
        "z": "fb3126e4afa64725",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "ns=16;s=Presse_API_Lent_001_Calcul_puissance_ph1_n_voute",
        "payloadType": "str",
        "x": 810,
        "y": 180,
        "wires": [
            [
                "0854434d45596738"
            ]
        ]
    },
    {
        "id": "0854434d45596738",
        "type": "function",
        "z": "fb3126e4afa64725",
        "name": "function 11",
        "func": "let nodeId = msg.payload || msg.topic;  // Supporte les deux cas\nlet meta = flow.get(nodeId);\n\nif (meta) {\n    node.warn(\"Donn√©es trouv√©es : \" + JSON.stringify(meta));\n    msg.meta = meta;\n} else {\n    node.warn(\"Aucune donn√©e trouv√©e pour : \" + nodeId);\n    msg.meta = null;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 140,
        "wires": [
            [
                "a21bdd55894106e6"
            ]
        ]
    },
    {
        "id": "a21bdd55894106e6",
        "type": "debug",
        "z": "fb3126e4afa64725",
        "name": "debug 18",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 140,
        "wires": []
    },
    {
        "id": "cddb596886c86d52",
        "type": "debug",
        "z": "fb3126e4afa64725",
        "name": "debug spy",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1550,
        "y": 300,
        "wires": []
    },
    {
        "id": "68ccecf843da8485",
        "type": "debug",
        "z": "fb3126e4afa64725",
        "name": "debug listener",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 320,
        "wires": []
    },
    {
        "id": "cb676891c931b0e8",
        "type": "OPCUA-IIoT-Listener",
        "z": "fb3126e4afa64725",
        "connector": "4039d7da.be9428",
        "action": "subscribe",
        "queueSize": 10,
        "name": "",
        "topic": "",
        "justValue": true,
        "useGroupItems": false,
        "showStatusActivities": true,
        "showErrors": true,
        "x": 1020,
        "y": 420,
        "wires": [
            [
                "90897509371126e1",
                "0a6fc73710dad61e",
                "68ccecf843da8485"
            ]
        ]
    },
    {
        "id": "d153d911192f2016",
        "type": "function",
        "z": "fb3126e4afa64725",
        "name": "old subscribe",
        "func": "//Get global flag\nvar bConnectLost = global.get('ConnectionLost') || false;\n\n//Default settings\nvar injectMssge = {};\ninjectMssge.topic=\"\";\ninjectMssge.nodetype=\"inject\";\ninjectMssge.injectType=\"listen\";\ninjectMssge.addressSpaceItems=[];\n//injectMssge.payload=1000;\nvar optionsParam = {\n            \"requestedPublishingInterval\": 1000,\n            //\"requestedLifetimeCount\": 99999,\n            \"requestedLifetimeCount\": 10,\n            \"requestedMaxKeepAliveCount\": 5,\n            \"maxNotificationsPerPublish\": 10,\n            \"publishingEnabled\": true,\n            \"priority\": 10,\n            \"clientName\":\"nr-iot\",\n      };\n\ninjectMssge.payload={ \"interval\": 6000, \"queueSize\": 10, \"options\":optionsParam };\n\n//Specific case if the configuration contains only one variable\nif(Array.isArray(msg.varNameList) === false)\n {\n    injectMssge.addressSpaceItems.push({\"name\": msg.varNameList, \"nodeId\":  msg.varNodeIdList}); \n }\n else\n {\n    //Add variables\n    for(var iIndVar=0;iIndVar<msg.varNameList.length; iIndVar++)\n    {\n      injectMssge.addressSpaceItems.push( {\"name\": msg.varNameList[iIndVar], \"nodeId\":  msg.varNodeIdList[iIndVar]});\n    }\n }\n\n if(bConnectLost === false)\n {\n   console.log(\"---- FIRST SUBSCRIBE ------\")\n   SendSubscribeMessage();\n }\n else\n {\n    //In case of connection lost, send another subscription\n    console.log(\"---- CONNECT LOST - RESUBSCRIBE  ------\")\n    SendSubscribeMessage();\n    setTimeout(SendSubscribeMessage, 5000);\n  }\n  \n  //Send inject message\n  function SendSubscribeMessage()\n  {\n    node.send(injectMssge);\n  }\n  \n  ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "d47f404dd3de203d",
        "type": "change",
        "z": "36fdbc5d5d796808",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.data",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "03384fd98d46cae0",
        "type": "link in",
        "z": "36fdbc5d5d796808",
        "name": "link in 1",
        "links": [
            "9ee61c94c7ec770f"
        ],
        "x": 185,
        "y": 140,
        "wires": [
            [
                "3bc1e2c0fd6d8d34",
                "201a99e9ca500c87",
                "8ed4fdedf0691e86",
                "d58e74affc08e1ec",
                "d73e2437df7dd68c",
                "058b2258b2f4f484",
                "19eab78be4a5f84f",
                "7abc8bd354388782",
                "8d40af215700f9d5",
                "749f1e22a8d274b7",
                "542a1e5f29567005",
                "cf42e20fd82849cb",
                "d47f404dd3de203d"
            ]
        ]
    },
    {
        "id": "3bc1e2c0fd6d8d34",
        "type": "function",
        "z": "36fdbc5d5d796808",
        "name": "001_Calcul_puissance_ph1_n_voute",
        "func": "   \nif (msg.payload.data.Name == \"001_Calcul_puissance_ph1_n_voute\") {\n    msg.payload = (msg.payload.data.Value)/1000\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 180,
        "wires": [
            [
                "5b947bdf312b779c",
                "7aa8e9f5db538ddd"
            ]
        ]
    },
    {
        "id": "5b947bdf312b779c",
        "type": "ui_chart",
        "z": "36fdbc5d5d796808",
        "name": "Puissance Four Voute phase 1",
        "group": "1b34a412bfc51b15",
        "order": 1,
        "width": "20",
        "height": "10",
        "label": "Puissance Four Voute phase 1 (kW)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "20",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 870,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "7aa8e9f5db538ddd",
        "type": "ui_gauge",
        "z": "36fdbc5d5d796808",
        "name": "Puissance Four Voute phase 1",
        "group": "1b34a412bfc51b15",
        "order": 3,
        "width": "10",
        "height": "10",
        "gtype": "gage",
        "title": "Puissance Four Voute phase 1 (kW)",
        "label": "kW",
        "format": "{{value}}",
        "min": 0,
        "max": "20",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "60",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 870,
        "y": 260,
        "wires": []
    },
    {
        "id": "201a99e9ca500c87",
        "type": "function",
        "z": "36fdbc5d5d796808",
        "name": "002_Calcul_puissance_ph2_n_voute",
        "func": "   \nif (msg.payload.data.Name == \"002_Calcul_puissance_ph2_n_voute\") {\n    msg.payload = (msg.payload.data.Value)/1000\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 320,
        "wires": [
            [
                "2e5522984cd0372a",
                "af0cb3712d10050b"
            ]
        ]
    },
    {
        "id": "2e5522984cd0372a",
        "type": "ui_chart",
        "z": "36fdbc5d5d796808",
        "name": "Puissance Four Phase 2 Voute",
        "group": "1b34a412bfc51b15",
        "order": 1,
        "width": "20",
        "height": "10",
        "label": "Puissance Four Phase 2 Voute (kW)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "20",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 870,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "af0cb3712d10050b",
        "type": "ui_gauge",
        "z": "36fdbc5d5d796808",
        "name": "Puissance Four Phase 2 Voute",
        "group": "1b34a412bfc51b15",
        "order": 3,
        "width": "10",
        "height": "10",
        "gtype": "gage",
        "title": "Puissance Four Phase 2 Voute (kW)",
        "label": "kW",
        "format": "{{value}}",
        "min": 0,
        "max": "20",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "60",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 870,
        "y": 400,
        "wires": []
    },
    {
        "id": "8ed4fdedf0691e86",
        "type": "function",
        "z": "36fdbc5d5d796808",
        "name": "003_Calcul_puissance_ph3_n_voute",
        "func": "   \nif (msg.payload.data.Name == \"003_Calcul_puissance_ph3_n_voute\") {\n    msg.payload = (msg.payload.data.Value)/1000\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 460,
        "wires": [
            [
                "2d55cd9035461643",
                "a33750430e62b6dd"
            ]
        ]
    },
    {
        "id": "2d55cd9035461643",
        "type": "ui_chart",
        "z": "36fdbc5d5d796808",
        "name": "Puissance Four Phase 3 Voute",
        "group": "1b34a412bfc51b15",
        "order": 1,
        "width": "20",
        "height": "10",
        "label": "Puissance Four Phase 3 Voute (kW)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "20",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 870,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "a33750430e62b6dd",
        "type": "ui_gauge",
        "z": "36fdbc5d5d796808",
        "name": "Puissance Four Phase 3 Voute",
        "group": "1b34a412bfc51b15",
        "order": 3,
        "width": "10",
        "height": "10",
        "gtype": "gage",
        "title": "Puissance Four Phase 3 Voute (kW)",
        "label": "kW",
        "format": "{{value}}",
        "min": 0,
        "max": "20",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "60",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 870,
        "y": 540,
        "wires": []
    },
    {
        "id": "d58e74affc08e1ec",
        "type": "function",
        "z": "36fdbc5d5d796808",
        "name": "004_Calcul_puissance_ph1_n_sole",
        "func": "   \nif (msg.payload.data.Name == \"004_Calcul_puissance_ph1_n_sole\") {\n    msg.payload = (msg.payload.data.Value)/1000\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 600,
        "wires": [
            [
                "3cce0d66caf2094e",
                "3a37ac31364c500f"
            ]
        ]
    },
    {
        "id": "3cce0d66caf2094e",
        "type": "ui_chart",
        "z": "36fdbc5d5d796808",
        "name": "Puissance Four Phase 1 Sole",
        "group": "1b34a412bfc51b15",
        "order": 1,
        "width": "20",
        "height": "10",
        "label": "Puissance Four Phase 1 Sole (kW)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "20",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 870,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "3a37ac31364c500f",
        "type": "ui_gauge",
        "z": "36fdbc5d5d796808",
        "name": "Puissance Four Phase 1 Sole",
        "group": "1b34a412bfc51b15",
        "order": 3,
        "width": "10",
        "height": "10",
        "gtype": "gage",
        "title": "Puissance Four Phase 1 Sole (kW)",
        "label": "kW",
        "format": "{{value}}",
        "min": 0,
        "max": "20",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "60",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 870,
        "y": 680,
        "wires": []
    },
    {
        "id": "d73e2437df7dd68c",
        "type": "function",
        "z": "36fdbc5d5d796808",
        "name": "005_Calcul_puissance_ph2_n_sole",
        "func": "   \nif (msg.payload.data.Name == \"005_Calcul_puissance_ph2_n_sole\") {\n    msg.payload = (msg.payload.data.Value)/1000\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 740,
        "wires": [
            [
                "e362ff8cd3bf916a",
                "4ad426cd51c34d2f"
            ]
        ]
    },
    {
        "id": "e362ff8cd3bf916a",
        "type": "ui_chart",
        "z": "36fdbc5d5d796808",
        "name": "Puissance Four Phase 2 Sole",
        "group": "1b34a412bfc51b15",
        "order": 1,
        "width": "20",
        "height": "10",
        "label": "Puissance Four Phase 2 Sole (kW)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "20",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 870,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "4ad426cd51c34d2f",
        "type": "ui_gauge",
        "z": "36fdbc5d5d796808",
        "name": "Puissance Four Phase 2 Sole",
        "group": "1b34a412bfc51b15",
        "order": 3,
        "width": "10",
        "height": "10",
        "gtype": "gage",
        "title": "Puissance Four Phase 2 Sole (kW)",
        "label": "kW",
        "format": "{{value}}",
        "min": 0,
        "max": "20",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "60",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 870,
        "y": 820,
        "wires": []
    },
    {
        "id": "058b2258b2f4f484",
        "type": "function",
        "z": "36fdbc5d5d796808",
        "name": "006_Calcul_puissance_ph3_n_sole",
        "func": "   \nif (msg.payload.data.Name == \"006_Calcul_puissance_ph3_n_sole\") {\n    msg.payload = (msg.payload.data.Value)/1000\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 880,
        "wires": [
            [
                "2f3665e9b82cec06",
                "b1545bba720954f4"
            ]
        ]
    },
    {
        "id": "2f3665e9b82cec06",
        "type": "ui_chart",
        "z": "36fdbc5d5d796808",
        "name": "Puissance Four Phase 3 Sole",
        "group": "1b34a412bfc51b15",
        "order": 1,
        "width": "20",
        "height": "10",
        "label": "Puissance Four Phase 3 Sole (kW)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "20",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 870,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "b1545bba720954f4",
        "type": "ui_gauge",
        "z": "36fdbc5d5d796808",
        "name": "Puissance Four Phase 3 Sole",
        "group": "1b34a412bfc51b15",
        "order": 3,
        "width": "10",
        "height": "10",
        "gtype": "gage",
        "title": "Puissance Four Phase 3 Sole (kW)",
        "label": "kW",
        "format": "{{value}}",
        "min": 0,
        "max": "20",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "60",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 870,
        "y": 960,
        "wires": []
    },
    {
        "id": "19eab78be4a5f84f",
        "type": "function",
        "z": "36fdbc5d5d796808",
        "name": "007_Calcul_puissance_ph1_n_chaudiere_inf",
        "func": "   \nif (msg.payload.data.Name == \"007_Calcul_puissance_ph1_n_chaudiere_inf\") {\n    msg.payload = (msg.payload.data.Value)/1000\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 1020,
        "wires": [
            [
                "d74f7809e78dc267",
                "0184e9c207853bec"
            ]
        ]
    },
    {
        "id": "d74f7809e78dc267",
        "type": "ui_chart",
        "z": "36fdbc5d5d796808",
        "name": "Puissance Chaudiere Phase 1",
        "group": "1b34a412bfc51b15",
        "order": 1,
        "width": "20",
        "height": "10",
        "label": "Puissance Chaudiere_inf Phase 1 (kW)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "15",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 870,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "0184e9c207853bec",
        "type": "ui_gauge",
        "z": "36fdbc5d5d796808",
        "name": "Puissance Chaudiere Phase 1",
        "group": "1b34a412bfc51b15",
        "order": 3,
        "width": "10",
        "height": "10",
        "gtype": "gage",
        "title": "Puissance Chaudiere_inf Phase 1 (kW)",
        "label": "kW",
        "format": "{{value}}",
        "min": 0,
        "max": "15",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "60",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 870,
        "y": 1100,
        "wires": []
    },
    {
        "id": "7abc8bd354388782",
        "type": "function",
        "z": "36fdbc5d5d796808",
        "name": "008_Calcul_puissance_ph2_n_chaudiere_inf",
        "func": "   \nif (msg.payload.data.Name == \"008_Calcul_puissance_ph2_n_chaudiere_inf\") {\n    msg.payload = (msg.payload.data.Value)/1000\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 1160,
        "wires": [
            [
                "17f52c20d840c842",
                "3cd43f76db6a5d61"
            ]
        ]
    },
    {
        "id": "17f52c20d840c842",
        "type": "ui_chart",
        "z": "36fdbc5d5d796808",
        "name": "Puissance Chaudiere Phase 2",
        "group": "1b34a412bfc51b15",
        "order": 1,
        "width": "20",
        "height": "10",
        "label": "Puissance Chaudiere_inf Phase 2 (kW)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "15",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 870,
        "y": 1160,
        "wires": [
            []
        ]
    },
    {
        "id": "3cd43f76db6a5d61",
        "type": "ui_gauge",
        "z": "36fdbc5d5d796808",
        "name": "Puissance Chaudiere Phase 2",
        "group": "1b34a412bfc51b15",
        "order": 3,
        "width": "10",
        "height": "10",
        "gtype": "gage",
        "title": "Puissance Chaudiere_inf Phase 2 (kW)",
        "label": "kW",
        "format": "{{value}}",
        "min": 0,
        "max": "15",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "60",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 870,
        "y": 1240,
        "wires": []
    },
    {
        "id": "8d40af215700f9d5",
        "type": "function",
        "z": "36fdbc5d5d796808",
        "name": "009_Calcul_puissance_ph3_n_chaudiere_inf",
        "func": "   \nif (msg.payload.data.Name == \"009_Calcul_puissance_ph3_n_chaudiere_inf\") {\n    msg.payload = (msg.payload.data.Value)/1000\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 1300,
        "wires": [
            [
                "6058558d805cab74",
                "13a1fde1fba1cee3"
            ]
        ]
    },
    {
        "id": "6058558d805cab74",
        "type": "ui_chart",
        "z": "36fdbc5d5d796808",
        "name": "Puissance Chaudiere Phase 3",
        "group": "1b34a412bfc51b15",
        "order": 1,
        "width": "20",
        "height": "10",
        "label": "Puissance Chaudiere_inf Phase 3 (kW)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "15",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 870,
        "y": 1300,
        "wires": [
            []
        ]
    },
    {
        "id": "13a1fde1fba1cee3",
        "type": "ui_gauge",
        "z": "36fdbc5d5d796808",
        "name": "Puissance Chaudiere Phase 3",
        "group": "1b34a412bfc51b15",
        "order": 3,
        "width": "10",
        "height": "10",
        "gtype": "gage",
        "title": "Puissance Chaudiere_inf Phase 3 (kW)",
        "label": "kW",
        "format": "{{value}}",
        "min": 0,
        "max": "15",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "60",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 870,
        "y": 1380,
        "wires": []
    },
    {
        "id": "749f1e22a8d274b7",
        "type": "function",
        "z": "36fdbc5d5d796808",
        "name": "015_tension phase 1",
        "func": "   \nif (msg.payload.data.Name == \"015_tension phase 1\") {\n    msg.payload = (msg.payload.data.Value)\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 60,
        "wires": [
            [
                "d22b62d53eee7a50",
                "59e8121e3e7fa924"
            ]
        ]
    },
    {
        "id": "d22b62d53eee7a50",
        "type": "ui_chart",
        "z": "36fdbc5d5d796808",
        "name": "Tension phase 1 (V)",
        "group": "1b34a412bfc51b15",
        "order": 1,
        "width": "20",
        "height": "10",
        "label": "Tension phase 1 (V)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "300",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 660,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "59e8121e3e7fa924",
        "type": "ui_gauge",
        "z": "36fdbc5d5d796808",
        "name": "Tension phase 1",
        "group": "1b34a412bfc51b15",
        "order": 3,
        "width": "10",
        "height": "10",
        "gtype": "gage",
        "title": "Tension phase 1 (V)",
        "label": "(V)",
        "format": "{{value}}",
        "min": 0,
        "max": "300",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "60",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 640,
        "y": 100,
        "wires": []
    },
    {
        "id": "542a1e5f29567005",
        "type": "function",
        "z": "36fdbc5d5d796808",
        "name": "016_tension phase 2",
        "func": "   \nif (msg.payload.data.Name == \"016_tension phase 2\") {\n    msg.payload = (msg.payload.data.Value)\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 140,
        "wires": [
            [
                "8d45516437468a2b",
                "b9e5b99ebc69e600"
            ]
        ]
    },
    {
        "id": "8d45516437468a2b",
        "type": "ui_chart",
        "z": "36fdbc5d5d796808",
        "name": "Tension phase 2 (V)",
        "group": "1b34a412bfc51b15",
        "order": 1,
        "width": "20",
        "height": "10",
        "label": "Tension phase 2 (V)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "300",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1200,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "b9e5b99ebc69e600",
        "type": "ui_gauge",
        "z": "36fdbc5d5d796808",
        "name": "Tension phase 2",
        "group": "1b34a412bfc51b15",
        "order": 3,
        "width": "10",
        "height": "10",
        "gtype": "gage",
        "title": "Tension phase 2 (V)",
        "label": "(V)",
        "format": "{{value}}",
        "min": 0,
        "max": "300",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "60",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 1180,
        "y": 220,
        "wires": []
    },
    {
        "id": "cf42e20fd82849cb",
        "type": "function",
        "z": "36fdbc5d5d796808",
        "name": "017_tension phase 3",
        "func": "   \nif (msg.payload.data.Name == \"017_tension phase 3\") {\n    msg.payload = (msg.payload.data.Value)\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 140,
        "wires": [
            [
                "fa6f5d5f8c747ba6",
                "31633c6d0dd974eb"
            ]
        ]
    },
    {
        "id": "fa6f5d5f8c747ba6",
        "type": "ui_chart",
        "z": "36fdbc5d5d796808",
        "name": "Tension phase 3 (V)",
        "group": "1b34a412bfc51b15",
        "order": 1,
        "width": "20",
        "height": "10",
        "label": "Tension phase 3 (V)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "300",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1860,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "31633c6d0dd974eb",
        "type": "ui_gauge",
        "z": "36fdbc5d5d796808",
        "name": "Tension phase 3",
        "group": "1b34a412bfc51b15",
        "order": 3,
        "width": "10",
        "height": "10",
        "gtype": "gage",
        "title": "Tension phase 3 (V)",
        "label": "(V)",
        "format": "{{value}}",
        "min": 0,
        "max": "300",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "60",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 1840,
        "y": 220,
        "wires": []
    },
    {
        "id": "dbfe9c018fbbe033",
        "type": "ui_template",
        "z": "36fdbc5d5d796808",
        "group": "",
        "name": "",
        "order": 0,
        "width": 0,
        "height": 0,
        "format": "<!-- Template HTML pour Node-RED -->\n\n<!-- Zone de contenu principale -->\n<div class=\"nr-dashboard-theme\">\n    <md-toolbar class=\"md-default-theme\">\n        <span class=\"md-toolbar-tools\">Mon Dashboard Node-RED</span>\n    </md-toolbar>\n\n    <md-content>\n        <md-card>\n            <p>Bienvenue dans l'interface de supervision.</p>\n            <p>Ce dashboard est configur√© avec des alertes et des graphiques pour superviser les √©quipements.</p>\n        </md-card>\n    </md-content>\n\n    <!-- Ajout du logo Daher en bas √† gauche -->\n    <img src=\"\\\\fr1nteqapp01p\\Node-Red\\_Production\\Dashboard\\Pictures\\Logo_daher.png\" alt=\"Logo Daher\" class=\"logo-daher\">\n<!--      <img src=\"D:\\Node-Red\\_Production\\Dashboard\\Pictures\\Logo_daher.png\" alt=\"Logo Daher\" class=\"logo-daher\"> -->\n    </div>\n\n<!-- Styles CSS -->\n<style>\n    .nr-dashboard-theme {\n        font-family: Arial, sans-serif;\n    }\n\n    /* Barre d'outils */\n    md-toolbar.md-default-theme {\n        background-color: #4CAF50;\n        /* Couleur de fond de la barre */\n        color: #ffffff;\n        /* Couleur du texte */\n    }\n\n    /* Zone de contenu avec un fond clair et un peu de padding */\n    md-content {\n        padding: 20px;\n        background-color: #f4f4f4;\n        margin-top: 10px;\n    }\n\n    /* Cartes avec un peu de bordure et d'ombre */\n    md-card {\n        background-color: #ffffff;\n        border-radius: 10px;\n        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n        padding: 20px;\n    }\n\n    /* Positionnement du logo Daher en bas √† gauche */\n    .logo-daher {\n        position: fixed;\n        bottom: 10px;\n        left: 10px;\n        width: 100px;\n        /* Taille du logo */\n        height: auto;\n        /* Conserver les proportions */\n        z-index: 9999;\n        /* Assurer que le logo soit visible par-dessus d'autres √©l√©ments */\n    }\n\n    /* Personnalisation des boutons si n√©cessaire */\n    .md-button {\n        background-color: #FF8C00;\n        color: white;\n        border-radius: 8px;\n    }\n\n    .md-button:hover {\n        background-color: #FF6A00;\n    }\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "global",
        "className": "",
        "x": 1040,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "d5012239.44e59",
        "type": "function",
        "z": "f1f7ec6f.11a9",
        "name": "Subscribe",
        "func": "//Get global flag\nvar bConnectLost = global.get('ConnectionLost') || false;\n\n//Default settings\nvar injectMssge = {};\ninjectMssge.topic=\"\";\ninjectMssge.nodetype=\"inject\";\ninjectMssge.injectType=\"listen\";\ninjectMssge.addressSpaceItems=[];\n//injectMssge.payload=1000;\nvar optionsParam = {\n            \"requestedPublishingInterval\": 1000,\n            //\"requestedLifetimeCount\": 99999,\n            \"requestedLifetimeCount\": 10,\n            \"requestedMaxKeepAliveCount\": 5,\n            \"maxNotificationsPerPublish\": 10,\n            \"publishingEnabled\": true,\n            \"priority\": 10,\n            \"clientName\":\"nr-iot\",\n      };\n\ninjectMssge.payload={ \"interval\": 6000, \"queueSize\": 10, \"options\":optionsParam };\n\n//Specific case if the configuration contains only one variable\nif(Array.isArray(msg.varNameList) === false)\n {\n    injectMssge.addressSpaceItems.push({\"name\": msg.varNameList, \"nodeId\":  msg.varNodeIdList}); \n }\n else\n {\n    //Add variables\n    for(var iIndVar=0;iIndVar<msg.varNameList.length; iIndVar++)\n    {\n      injectMssge.addressSpaceItems.push( {\"name\": msg.varNameList[iIndVar], \"nodeId\":  msg.varNodeIdList[iIndVar]});\n    }\n }\n\n if(bConnectLost === false)\n {\n   console.log(\"---- FIRST SUBSCRIBE ------\")\n   SendSubscribeMessage();\n }\n else\n {\n    //In case of connection lost, send another subscription\n    console.log(\"---- CONNECT LOST - RESUBSCRIBE  ------\")\n    SendSubscribeMessage();\n    setTimeout(SendSubscribeMessage, 5000);\n  }\n  \n  //Send inject message\n  function SendSubscribeMessage()\n  {\n    node.send(injectMssge);\n  }\n  \n  ",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 400,
        "wires": [
            [
                "6d729803.0f9c28"
            ]
        ]
    },
    {
        "id": "29e2e388.69547c",
        "type": "file in",
        "z": "f1f7ec6f.11a9",
        "name": "Read Configuration",
        "filename": "C:\\Users\\2108529\\.node-red\\ConfXML\\node_red_configuration_Lent_Presse_75T.xml",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "allProps": false,
        "x": 280,
        "y": 400,
        "wires": [
            [
                "f5e13a12.0f2a68"
            ]
        ]
    },
    {
        "id": "f5e13a12.0f2a68",
        "type": "xml",
        "z": "f1f7ec6f.11a9",
        "name": "",
        "property": "payload",
        "attr": "",
        "chr": "",
        "x": 440,
        "y": 400,
        "wires": [
            [
                "be7ce4c5.4029e8"
            ]
        ]
    },
    {
        "id": "be7ce4c5.4029e8",
        "type": "change",
        "z": "f1f7ec6f.11a9",
        "name": "Get Variable List",
        "rules": [
            {
                "t": "set",
                "p": "varNameList",
                "pt": "msg",
                "to": "payload.Variables.**.Name",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "varNodeIdList",
                "pt": "msg",
                "to": "payload.Variables.**.NodeId",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 400,
        "wires": [
            [
                "d5012239.44e59"
            ]
        ]
    },
    {
        "id": "324ebcf4.7440c4",
        "type": "comment",
        "z": "f1f7ec6f.11a9",
        "name": "Load Configuration and subscribe",
        "info": "",
        "x": 200,
        "y": 260,
        "wires": []
    },
    {
        "id": "5e0295a5.03146c",
        "type": "comment",
        "z": "f1f7ec6f.11a9",
        "name": "Timeout Management",
        "info": "",
        "x": 150,
        "y": 560,
        "wires": []
    },
    {
        "id": "4de76fb4.50d54",
        "type": "status",
        "z": "f1f7ec6f.11a9",
        "name": "Get Client Status",
        "scope": [
            "6d729803.0f9c28"
        ],
        "x": 200,
        "y": 140,
        "wires": [
            [
                "cbb016cf.0db7f8"
            ]
        ]
    },
    {
        "id": "cbb016cf.0db7f8",
        "type": "switch",
        "z": "f1f7ec6f.11a9",
        "name": "Client Status",
        "property": "status.text",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "connecting",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "active",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "started",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "listening",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "terminated",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 410,
        "y": 140,
        "wires": [
            [
                "b5988fea.92201"
            ],
            [
                "1d1baa2c.f62ac6"
            ],
            [],
            [
                "562456f0.a1d4c8"
            ],
            [
                "1b6c1012.8692f"
            ]
        ]
    },
    {
        "id": "7642cbe0.b5a034",
        "type": "trigger",
        "z": "f1f7ec6f.11a9",
        "name": "Timeout ConnectionLost",
        "op1": "",
        "op2": "{\"endpoint\":\"opc.tcp://localhost:59300/Prosyst/UnifiedDataCollector\",\"keepSessionAlive\":false,\"showErrors\":true,\"defaultSecureTokenLifetime\":360000,\"endpointMustExist\":false,\"autoSelectRightEndpoint\":false,\"strategyMaxRetry\":10000}",
        "op1type": "nul",
        "op2type": "json",
        "duration": "5",
        "extend": true,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "outputs": 1,
        "x": 500,
        "y": 700,
        "wires": [
            [
                "65fe2db0.b35ec4"
            ]
        ]
    },
    {
        "id": "1b6c1012.8692f",
        "type": "change",
        "z": "f1f7ec6f.11a9",
        "name": "ConnectionLost",
        "rules": [
            {
                "t": "set",
                "p": "ConnectionLost",
                "pt": "global",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 620,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "3ab3aa89.089d16",
        "type": "comment",
        "z": "f1f7ec6f.11a9",
        "name": "Subscription Management",
        "info": "",
        "x": 150,
        "y": 60,
        "wires": []
    },
    {
        "id": "562456f0.a1d4c8",
        "type": "change",
        "z": "f1f7ec6f.11a9",
        "name": "ConnectionOk",
        "rules": [
            {
                "t": "set",
                "p": "ConnectionLost",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 620,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "5d365a63.e5ea54",
        "type": "link in",
        "z": "f1f7ec6f.11a9",
        "name": "Subscribe",
        "links": [
            "1d1baa2c.f62ac6"
        ],
        "x": 125,
        "y": 400,
        "wires": [
            [
                "29e2e388.69547c"
            ]
        ]
    },
    {
        "id": "1d1baa2c.f62ac6",
        "type": "link out",
        "z": "f1f7ec6f.11a9",
        "name": "StartSubscribe",
        "mode": "link",
        "links": [
            "5d365a63.e5ea54"
        ],
        "x": 555,
        "y": 100,
        "wires": []
    },
    {
        "id": "a07d41c1.00a5f",
        "type": "debug",
        "z": "f1f7ec6f.11a9",
        "name": "DebugLent",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 1350,
        "y": 560,
        "wires": []
    },
    {
        "id": "b43e3212.fcd09",
        "type": "function",
        "z": "f1f7ec6f.11a9",
        "name": "GetData",
        "func": "var Proto = \"ns=16;s=Presse_API_Lent_\"\n             \n\n// Initialisation de la sortie\n// R√©cup√©ration du message\nvar Data = msg;\n\n// R√©cup√©ration de la valeur\nvar Value = Data.payload.value.value;\n\n// r√©cup√©ration du type\nvar DataType = Data.payload.value.dataType;\n\n// r√©cup√©ration de l'horodatage\nvar DateTimeStr = new Date(Data.payload.sourceTimestamp);\nvar DateTime = DateTimeStr.getTime();\n\n// r√©cup√©ration du nom\nvar Name = Data.addressSpaceItems[0].nodeId.toString().substring(Proto.length);\n\n// Cr√©ation de la variable de sortie\nvar myvar_output = {Name,DateTime,Value};\n\n// Suppression des donn√©es existantes\nmsg = {}\nmsg.payload ={}\n\nmsg.payload.data = myvar_output;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 540,
        "wires": [
            [
                "73dc9ecf.cbf18",
                "e0393363204b254a"
            ]
        ]
    },
    {
        "id": "73dc9ecf.cbf18",
        "type": "join",
        "z": "f1f7ec6f.11a9",
        "name": "group",
        "mode": "custom",
        "build": "array",
        "property": "payload.data",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "10",
        "count": "120",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 948,
        "y": 540,
        "wires": [
            [
                "875dec4f.ae744"
            ]
        ]
    },
    {
        "id": "2a7ba5a7.0cf31a",
        "type": "function",
        "z": "f1f7ec6f.11a9",
        "name": "Erreur Comm Lente",
        "func": "var status = msg.payload.statusCode.name;\n\nif ( status == \"Good\")\n{\n    node.status({fill:\"green\",shape:\"dot\",text:\"Ok\"})\n    return [msg,null];\n}\nelse\n{\n    node.status({fill:\"red\",shape:\"ring\",text:status}) \n    return [null,msg]\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 528,
        "y": 540,
        "wires": [
            [
                "b43e3212.fcd09"
            ],
            [
                "aaa534c7.fc7be8"
            ]
        ]
    },
    {
        "id": "875dec4f.ae744",
        "type": "change",
        "z": "f1f7ec6f.11a9",
        "name": "Desc",
        "rules": [
            {
                "t": "set",
                "p": "payload.type",
                "pt": "msg",
                "to": "listen",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1100,
        "y": 540,
        "wires": [
            [
                "a07d41c1.00a5f"
            ]
        ]
    },
    {
        "id": "82ad2a5f.93bcd8",
        "type": "inject",
        "z": "f1f7ec6f.11a9",
        "name": "Initialization",
        "props": [
            {
                "p": "payload",
                "v": "",
                "vt": "date"
            },
            {
                "p": "topic",
                "v": "",
                "vt": "string"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 640,
        "wires": [
            [
                "d6114fa7.ed058"
            ]
        ]
    },
    {
        "id": "d6114fa7.ed058",
        "type": "change",
        "z": "f1f7ec6f.11a9",
        "name": "ConnectionOk",
        "rules": [
            {
                "t": "set",
                "p": "ConnectionLost",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "3c553cd2.969144",
        "type": "delay",
        "z": "f1f7ec6f.11a9",
        "name": "Reconnect Timeout",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 230,
        "y": 760,
        "wires": [
            [
                "7642cbe0.b5a034"
            ]
        ]
    },
    {
        "id": "7cee4f2d.d7a49",
        "type": "link in",
        "z": "f1f7ec6f.11a9",
        "name": "inReconnectTimeout",
        "links": [
            "b5988fea.92201"
        ],
        "x": 85,
        "y": 760,
        "wires": [
            [
                "3c553cd2.969144"
            ]
        ]
    },
    {
        "id": "b5988fea.92201",
        "type": "link out",
        "z": "f1f7ec6f.11a9",
        "name": "outConnecting",
        "links": [
            "7cee4f2d.d7a49"
        ],
        "x": 555,
        "y": 60,
        "wires": []
    },
    {
        "id": "aaa534c7.fc7be8",
        "type": "debug",
        "z": "f1f7ec6f.11a9",
        "name": "erreur Comm",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 750,
        "y": 620,
        "wires": []
    },
    {
        "id": "e0393363204b254a",
        "type": "link out",
        "z": "f1f7ec6f.11a9",
        "name": "Dashboard_Presse_75T",
        "mode": "link",
        "links": [
            "a7bb8182f71f06d9"
        ],
        "x": 915,
        "y": 620,
        "wires": []
    },
    {
        "id": "7513e0d0.642fc",
        "type": "OPCUA-IIoT-Inject",
        "z": "f1f7ec6f.11a9",
        "injectType": "inject",
        "payloadType": "json",
        "topic": "",
        "repeat": "1",
        "crontab": "",
        "once": false,
        "startDelay": "5",
        "name": "",
        "payload": "{ \"interval\": 500, \"queueSize\": 10 }",
        "addressSpaceItems": [
            {
                "name": "CurrentTime",
                "nodeId": "ns=0;i=2258",
                "datatypeName": ""
            }
        ],
        "x": 140,
        "y": 700,
        "wires": [
            [
                "e13b9b0a.d9b1a8"
            ]
        ]
    },
    {
        "id": "e13b9b0a.d9b1a8",
        "type": "OPCUA-IIoT-Read",
        "z": "f1f7ec6f.11a9",
        "attributeId": 0,
        "maxAge": 1,
        "depth": 1,
        "connector": "da5aa165.a9f37",
        "name": "",
        "justValue": true,
        "showStatusActivities": false,
        "showErrors": true,
        "parseStrings": false,
        "historyDays": 1,
        "x": 280,
        "y": 700,
        "wires": [
            [
                "7642cbe0.b5a034"
            ]
        ]
    },
    {
        "id": "65fe2db0.b35ec4",
        "type": "OPCUA-IIoT-Flex-Connector",
        "z": "f1f7ec6f.11a9",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "connector": "da5aa165.a9f37",
        "x": 750,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "6d729803.0f9c28",
        "type": "OPCUA-IIoT-Listener",
        "z": "f1f7ec6f.11a9",
        "connector": "da5aa165.a9f37",
        "action": "subscribe",
        "queueSize": 10,
        "name": "",
        "topic": "",
        "justValue": true,
        "useGroupItems": false,
        "showStatusActivities": true,
        "showErrors": true,
        "x": 1040,
        "y": 400,
        "wires": [
            [
                "2a7ba5a7.0cf31a"
            ]
        ]
    },
    {
        "id": "a7bb8182f71f06d9",
        "type": "link in",
        "z": "52543b0b0214e59c",
        "name": "Communication_Presse_75T",
        "links": [
            "e0393363204b254a"
        ],
        "x": 255,
        "y": 140,
        "wires": [
            [
                "8448c224a835f557",
                "4643e57d33653126",
                "e274f24f58456c3b",
                "32fb5a4e7ceb72e3",
                "e1ad300a602ceea5",
                "bcc7373ebe8aed4e",
                "258d3a4545bfc05d"
            ]
        ]
    },
    {
        "id": "8448c224a835f557",
        "type": "function",
        "z": "52543b0b0214e59c",
        "name": "temp_lunet_1",
        "func": "   \nif (msg.payload.data.Name == \"temp_lunet_1\") {\n    msg.payload = (msg.payload.data.Value)\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 380,
        "wires": [
            [
                "992ec33c403035d7",
                "b70b9a9ba41049ee"
            ]
        ]
    },
    {
        "id": "992ec33c403035d7",
        "type": "ui_chart",
        "z": "52543b0b0214e59c",
        "name": "Temp Lunette 1",
        "group": "4f571a16771506d1",
        "order": 1,
        "width": 17,
        "height": 11,
        "label": "Temp Lunette 1 (¬∞C)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "400",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 980,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "4643e57d33653126",
        "type": "function",
        "z": "52543b0b0214e59c",
        "name": "temp_lunet_2",
        "func": "   \nif (msg.payload.data.Name == \"temp_lunet_2\") {\n    msg.payload = (msg.payload.data.Value)\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 540,
        "wires": [
            [
                "500511e0f32cf6b5",
                "88bc6f6eb04725fc"
            ]
        ]
    },
    {
        "id": "500511e0f32cf6b5",
        "type": "ui_chart",
        "z": "52543b0b0214e59c",
        "name": "Temp Lunette 2",
        "group": "4f571a16771506d1",
        "order": 7,
        "width": 17,
        "height": 11,
        "label": "Temp Lunette 2 (¬∞C)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "400",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 980,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "e274f24f58456c3b",
        "type": "function",
        "z": "52543b0b0214e59c",
        "name": "ener_four_p1",
        "func": "   \nif (msg.payload.data.Name == \"ener_four_p1\") {\n    msg.payload = (msg.payload.data.Value)\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 700,
        "wires": [
            [
                "b79fcbf8f2139c28",
                "a91df98f1d76eb58"
            ]
        ]
    },
    {
        "id": "32fb5a4e7ceb72e3",
        "type": "function",
        "z": "52543b0b0214e59c",
        "name": "ener_four_p2",
        "func": "   \nif (msg.payload.data.Name == \"ener_four_p2\") {\n    msg.payload = (msg.payload.data.Value)\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 860,
        "wires": [
            [
                "c8febebe57293057",
                "0b0acd2b4e6af159"
            ]
        ]
    },
    {
        "id": "e1ad300a602ceea5",
        "type": "function",
        "z": "52543b0b0214e59c",
        "name": "ener_four_p3",
        "func": "   \nif (msg.payload.data.Name == \"ener_four_p3\") {\n    msg.payload = (msg.payload.data.Value)\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 1020,
        "wires": [
            [
                "6d211f09c13b05b2",
                "fbf490d32a966ef1"
            ]
        ]
    },
    {
        "id": "b70b9a9ba41049ee",
        "type": "ui_gauge",
        "z": "52543b0b0214e59c",
        "name": "Temp Lunette 1",
        "group": "4f571a16771506d1",
        "order": 2,
        "width": 13,
        "height": 11,
        "gtype": "gage",
        "title": "Temp Lunette 1 (¬∞C)",
        "label": "¬∞C",
        "format": "{{value}}",
        "min": 0,
        "max": "450",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "60",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 980,
        "y": 420,
        "wires": []
    },
    {
        "id": "88bc6f6eb04725fc",
        "type": "ui_gauge",
        "z": "52543b0b0214e59c",
        "name": "Temp Lunette 2",
        "group": "4f571a16771506d1",
        "order": 8,
        "width": 13,
        "height": 11,
        "gtype": "gage",
        "title": "Temp Lunette 2 (¬∞C)",
        "label": "kW",
        "format": "{{value}}",
        "min": 0,
        "max": "450",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "60",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 980,
        "y": 600,
        "wires": []
    },
    {
        "id": "b79fcbf8f2139c28",
        "type": "ui_chart",
        "z": "52543b0b0214e59c",
        "name": "Energie Four P1",
        "group": "4f571a16771506d1",
        "order": 9,
        "width": 17,
        "height": 11,
        "label": "Energie Four P1 (kW)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 980,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "a91df98f1d76eb58",
        "type": "ui_gauge",
        "z": "52543b0b0214e59c",
        "name": "Energie Four P1",
        "group": "4f571a16771506d1",
        "order": 10,
        "width": 13,
        "height": 11,
        "gtype": "wave",
        "title": "Energie Four P1 (kW)",
        "label": "kW",
        "format": "{{value}}",
        "min": 0,
        "max": "200",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ff0000"
        ],
        "seg1": "150",
        "seg2": "300",
        "diff": false,
        "className": "",
        "x": 980,
        "y": 760,
        "wires": []
    },
    {
        "id": "c8febebe57293057",
        "type": "ui_chart",
        "z": "52543b0b0214e59c",
        "name": "Energie Four P2",
        "group": "4f571a16771506d1",
        "order": 11,
        "width": 17,
        "height": 11,
        "label": "Energie Four P2 (kW)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 980,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "0b0acd2b4e6af159",
        "type": "ui_gauge",
        "z": "52543b0b0214e59c",
        "name": "Energie Four P2",
        "group": "4f571a16771506d1",
        "order": 12,
        "width": 13,
        "height": 11,
        "gtype": "wave",
        "title": "Energie Four P2 (kW)",
        "label": "kW",
        "format": "{{value}}",
        "min": 0,
        "max": "200",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "150",
        "seg2": "300",
        "diff": false,
        "className": "",
        "x": 980,
        "y": 920,
        "wires": []
    },
    {
        "id": "6d211f09c13b05b2",
        "type": "ui_chart",
        "z": "52543b0b0214e59c",
        "name": "ener_four_p3",
        "group": "4f571a16771506d1",
        "order": 13,
        "width": 16,
        "height": 12,
        "label": "Energie Four P3 (kW)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 970,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "fbf490d32a966ef1",
        "type": "ui_gauge",
        "z": "52543b0b0214e59c",
        "name": "ener_four_p3",
        "group": "4f571a16771506d1",
        "order": 14,
        "width": 14,
        "height": 12,
        "gtype": "wave",
        "title": "Energie Four P3 (kW)",
        "label": "kW",
        "format": "{{value}}",
        "min": 0,
        "max": "200",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "60",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 970,
        "y": 1080,
        "wires": []
    },
    {
        "id": "258d3a4545bfc05d",
        "type": "function",
        "z": "52543b0b0214e59c",
        "name": "temp_huile",
        "func": "   \nif (msg.payload.data.Name == \"temp_huile\") {\n    msg.payload = (msg.payload.data.Value)\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 260,
        "wires": [
            [
                "4c9940e0e4130617",
                "6b2e510182fcc7bd"
            ]
        ]
    },
    {
        "id": "4c9940e0e4130617",
        "type": "ui_chart",
        "z": "52543b0b0214e59c",
        "name": "Temp Huile",
        "group": "4f571a16771506d1",
        "order": 3,
        "width": 17,
        "height": 11,
        "label": "Temp Huile (¬∞C)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "400",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 970,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "6b2e510182fcc7bd",
        "type": "ui_gauge",
        "z": "52543b0b0214e59c",
        "name": "Temp Huile",
        "group": "4f571a16771506d1",
        "order": 4,
        "width": 13,
        "height": 11,
        "gtype": "gage",
        "title": "Temp Huile (¬∞C)",
        "label": "¬∞C",
        "format": "{{value}}",
        "min": 0,
        "max": "120",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "60",
        "seg2": "90",
        "diff": false,
        "className": "",
        "x": 970,
        "y": 300,
        "wires": []
    },
    {
        "id": "bcc7373ebe8aed4e",
        "type": "function",
        "z": "52543b0b0214e59c",
        "name": "temp_amb_four",
        "func": "   \nif (msg.payload.data.Name == \"temp_amb_four\") {\n    msg.payload = (msg.payload.data.Value)\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 140,
        "wires": [
            [
                "b22efc8a5391ec42",
                "b0f7d5c268be3203"
            ]
        ]
    },
    {
        "id": "b22efc8a5391ec42",
        "type": "ui_chart",
        "z": "52543b0b0214e59c",
        "name": "Temp Ambiante Four ",
        "group": "4f571a16771506d1",
        "order": 5,
        "width": 17,
        "height": 11,
        "label": "Temp Ambiante Four (¬∞C)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "400",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1000,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "b0f7d5c268be3203",
        "type": "ui_gauge",
        "z": "52543b0b0214e59c",
        "name": "Temp Ambiante Four ",
        "group": "4f571a16771506d1",
        "order": 6,
        "width": 13,
        "height": 11,
        "gtype": "gage",
        "title": "Temp Ambiante Four  (¬∞C)",
        "label": "¬∞C",
        "format": "{{value}}",
        "min": 0,
        "max": "400",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "60",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 1000,
        "y": 180,
        "wires": []
    },
    {
        "id": "2ebfac98c0a9cf2a",
        "type": "function",
        "z": "c655ed5d447ddd09",
        "name": "Subscribe",
        "func": "//Get global flag\nvar bConnectLost = global.get('ConnectionLost') || false;\n\n//Default settings\nvar injectMssge = {};\ninjectMssge.topic=\"\";\ninjectMssge.nodetype=\"inject\";\ninjectMssge.injectType=\"listen\";\ninjectMssge.addressSpaceItems=[];\n//injectMssge.payload=1000;\nvar optionsParam = {\n            \"requestedPublishingInterval\": 1000,\n            //\"requestedLifetimeCount\": 99999,\n            \"requestedLifetimeCount\": 10,\n            \"requestedMaxKeepAliveCount\": 5,\n            \"maxNotificationsPerPublish\": 10,\n            \"publishingEnabled\": true,\n            \"priority\": 10,\n            \"clientName\":\"nr-iot\",\n      };\n\ninjectMssge.payload={ \"interval\": 6000, \"queueSize\": 10, \"options\":optionsParam };\n\n//Specific case if the configuration contains only one variable\nif(Array.isArray(msg.varNameList) === false)\n {\n    injectMssge.addressSpaceItems.push({\"name\": msg.varNameList, \"nodeId\":  msg.varNodeIdList}); \n }\n else\n {\n    //Add variables\n    for(var iIndVar=0;iIndVar<msg.varNameList.length; iIndVar++)\n    {\n      injectMssge.addressSpaceItems.push( {\"name\": msg.varNameList[iIndVar], \"nodeId\":  msg.varNodeIdList[iIndVar]});\n    }\n }\n\n if(bConnectLost === false)\n {\n   console.log(\"---- FIRST SUBSCRIBE ------\")\n   SendSubscribeMessage();\n }\n else\n {\n    //In case of connection lost, send another subscription\n    console.log(\"---- CONNECT LOST - RESUBSCRIBE  ------\")\n    SendSubscribeMessage();\n    setTimeout(SendSubscribeMessage, 5000);\n  }\n  \n  //Send inject message\n  function SendSubscribeMessage()\n  {\n    node.send(injectMssge);\n  }\n  \n  ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 340,
        "wires": [
            [
                "f494e2a74218d674"
            ]
        ]
    },
    {
        "id": "83be0aecc0b024ce",
        "type": "file in",
        "z": "c655ed5d447ddd09",
        "name": "Read Configuration",
        "filename": "C:\\Users\\2108529\\.node-red\\ConfXML\\node_red_configuration_Lent_Belotti",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "allProps": false,
        "x": 430,
        "y": 420,
        "wires": [
            [
                "3971b8aa9e5b9cbc"
            ]
        ]
    },
    {
        "id": "3971b8aa9e5b9cbc",
        "type": "xml",
        "z": "c655ed5d447ddd09",
        "name": "",
        "property": "payload",
        "attr": "",
        "chr": "",
        "x": 590,
        "y": 420,
        "wires": [
            [
                "f95e91d1af507b95",
                "d5b8824a935e2c32"
            ]
        ]
    },
    {
        "id": "f95e91d1af507b95",
        "type": "change",
        "z": "c655ed5d447ddd09",
        "name": "Get Variable List",
        "rules": [
            {
                "t": "set",
                "p": "varNameList",
                "pt": "msg",
                "to": "payload.Variables.**.Name",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "varNodeIdList",
                "pt": "msg",
                "to": "payload.Variables.**.NodeId",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "varUnitList",
                "pt": "msg",
                "to": "payload.Variables.**.Unit",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "varFormatList",
                "pt": "msg",
                "to": "payload.Variables.**.Format",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 760,
        "y": 420,
        "wires": [
            [
                "2ebfac98c0a9cf2a"
            ]
        ]
    },
    {
        "id": "9eae5cb948bc77a7",
        "type": "comment",
        "z": "c655ed5d447ddd09",
        "name": "Load Configuration and subscribe",
        "info": "",
        "x": 350,
        "y": 280,
        "wires": []
    },
    {
        "id": "2d9c5238dc85d356",
        "type": "comment",
        "z": "c655ed5d447ddd09",
        "name": "Timeout Management",
        "info": "",
        "x": 310,
        "y": 560,
        "wires": []
    },
    {
        "id": "d06cfac55cb0c109",
        "type": "status",
        "z": "c655ed5d447ddd09",
        "name": "Get Client Status",
        "scope": [
            "f494e2a74218d674"
        ],
        "x": 320,
        "y": 120,
        "wires": [
            [
                "a34e0ee17e896669",
                "edc4b1e3bd03932f"
            ]
        ]
    },
    {
        "id": "a34e0ee17e896669",
        "type": "switch",
        "z": "c655ed5d447ddd09",
        "name": "Client Status",
        "property": "status.text",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "connecting",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "active",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "started",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "listening",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "terminated",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 570,
        "y": 140,
        "wires": [
            [
                "ed23e9403ca5a248"
            ],
            [
                "5311208846553782"
            ],
            [],
            [
                "cdae3a951f19a450"
            ],
            [
                "dcff384d59c5ceee"
            ]
        ]
    },
    {
        "id": "49b6ef7131be0c75",
        "type": "trigger",
        "z": "c655ed5d447ddd09",
        "name": "Timeout ConnectionLost",
        "op1": "",
        "op2": "{\"endpoint\":\"opc.tcp://localhost:59300/Prosyst/UnifiedDataCollector\",\"keepSessionAlive\":false,\"showErrors\":true,\"defaultSecureTokenLifetime\":360000,\"endpointMustExist\":false,\"autoSelectRightEndpoint\":false,\"strategyMaxRetry\":10000}",
        "op1type": "nul",
        "op2type": "json",
        "duration": "5",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 660,
        "y": 700,
        "wires": [
            [
                "1fbed0b664d74489"
            ]
        ]
    },
    {
        "id": "dcff384d59c5ceee",
        "type": "change",
        "z": "c655ed5d447ddd09",
        "name": "ConnectionLost",
        "rules": [
            {
                "t": "set",
                "p": "ConnectionLost",
                "pt": "global",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "87d54b694825ed2e",
        "type": "comment",
        "z": "c655ed5d447ddd09",
        "name": "Subscription Management",
        "info": "",
        "x": 310,
        "y": 60,
        "wires": []
    },
    {
        "id": "cdae3a951f19a450",
        "type": "change",
        "z": "c655ed5d447ddd09",
        "name": "ConnectionOk",
        "rules": [
            {
                "t": "set",
                "p": "ConnectionLost",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "b375e7419c11eacf",
        "type": "link in",
        "z": "c655ed5d447ddd09",
        "name": "Subscribe",
        "links": [
            "5311208846553782"
        ],
        "x": 255,
        "y": 420,
        "wires": [
            [
                "83be0aecc0b024ce"
            ]
        ]
    },
    {
        "id": "5311208846553782",
        "type": "link out",
        "z": "c655ed5d447ddd09",
        "name": "StartSubscribe",
        "links": [
            "b375e7419c11eacf"
        ],
        "x": 715,
        "y": 100,
        "wires": []
    },
    {
        "id": "4d0f60891c399ffe",
        "type": "debug",
        "z": "c655ed5d447ddd09",
        "name": "DebugLent",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 1390,
        "y": 540,
        "wires": []
    },
    {
        "id": "a13ecbffb60c2b5b",
        "type": "function",
        "z": "c655ed5d447ddd09",
        "name": "GetData",
        "func": "var Proto = \"ns=16;s=Presse_API_Lent_\"\nvar Longueur = Proto.length\n          \n\n// Initialisation de la sortie\n// R√©cup√©ration du message\nvar Data = msg;\n\n// R√©cup√©ration de la valeur\nvar Value = Data.payload.value.value;\n\n// r√©cup√©ration du type\nvar DataType = Data.payload.value.dataType;\n\n// r√©cup√©ration de l'horodatage\nvar DateTimeStr = new Date(Data.payload.sourceTimestamp);\nvar DateTime = DateTimeStr.getTime();\n\n// r√©cup√©ration du nom\nvar Name = Data.addressSpaceItems[0].nodeId.toString().substring(Longueur);\nvar Numero = parseInt(Data.addressSpaceItems[0].nodeId.toString().substring(Longueur,Longueur+3));\n\n// R√©cup√©ration de l'unit√©\nvar Unit = global.get(\"varUnitList\")[Numero-1];\n\n// R√©cup√©ration du format\nvar Format = global.get(\"varFormatList\")[Numero-1];\nif (Format!=\"\"){\n    // @ts-ignore\n    ValueFormat = parseFloat(Value).toFixed(parseInt(Format))\n    // @ts-ignore\n    Value = ValueFormat.toString()\n}\n\n\n// Cr√©ation de la variable de sortie\nvar myvar_output = {Name,DateTime,Value,Unit};\n\n// Suppression des donn√©es existantes\nmsg = {}\nmsg.payload ={}\n\nmsg.payload.data = myvar_output;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 540,
        "wires": [
            [
                "1c30737cb3080b0e",
                "73e14216242f5208",
                "819d95857f8e72c1"
            ]
        ]
    },
    {
        "id": "1c30737cb3080b0e",
        "type": "join",
        "z": "c655ed5d447ddd09",
        "name": "group",
        "mode": "custom",
        "build": "array",
        "property": "payload.data",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "10",
        "count": "120",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1008,
        "y": 540,
        "wires": [
            [
                "b1f3b375746d370c"
            ]
        ]
    },
    {
        "id": "225f5af778dbf729",
        "type": "function",
        "z": "c655ed5d447ddd09",
        "name": "Erreur Comm Lente",
        "func": "var status = msg.payload.statusCode.name;\n\nif ( status == \"Good\")\n{\n    node.status({fill:\"green\",shape:\"dot\",text:\"Ok\"})\n    return [msg,null];\n}\nelse\n{\n    node.status({fill:\"red\",shape:\"ring\",text:status}) \n    return [null,msg]\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 560,
        "wires": [
            [
                "a13ecbffb60c2b5b"
            ],
            [
                "75d3040c5740d273"
            ]
        ]
    },
    {
        "id": "b1f3b375746d370c",
        "type": "change",
        "z": "c655ed5d447ddd09",
        "name": "Desc",
        "rules": [
            {
                "t": "set",
                "p": "payload.type",
                "pt": "msg",
                "to": "listen",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1160,
        "y": 540,
        "wires": [
            [
                "4d0f60891c399ffe"
            ]
        ]
    },
    {
        "id": "50b39462d9103f93",
        "type": "inject",
        "z": "c655ed5d447ddd09",
        "name": "Initialization",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 320,
        "y": 640,
        "wires": [
            [
                "7d8edeaebbedb503"
            ]
        ]
    },
    {
        "id": "7d8edeaebbedb503",
        "type": "change",
        "z": "c655ed5d447ddd09",
        "name": "ConnectionOk",
        "rules": [
            {
                "t": "set",
                "p": "ConnectionLost",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 490,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "e06ff91b20fede0f",
        "type": "delay",
        "z": "c655ed5d447ddd09",
        "name": "Reconnect Timeout",
        "pauseType": "delay",
        "timeout": "60",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 630,
        "y": 840,
        "wires": [
            [
                "49b6ef7131be0c75"
            ]
        ]
    },
    {
        "id": "ed23e9403ca5a248",
        "type": "link out",
        "z": "c655ed5d447ddd09",
        "name": "outConnecting",
        "links": [],
        "x": 715,
        "y": 60,
        "wires": []
    },
    {
        "id": "75d3040c5740d273",
        "type": "debug",
        "z": "c655ed5d447ddd09",
        "name": "erreur Comm",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 850,
        "y": 640,
        "wires": []
    },
    {
        "id": "d5b8824a935e2c32",
        "type": "change",
        "z": "c655ed5d447ddd09",
        "name": "Get Variable List",
        "rules": [
            {
                "t": "set",
                "p": "varNameList",
                "pt": "global",
                "to": "payload.Variables.**.Name",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "varNodeIdList",
                "pt": "global",
                "to": "payload.Variables.**.NodeId",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "varUnitList",
                "pt": "global",
                "to": "payload.Variables.**.Unit",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "varFormatList",
                "pt": "global",
                "to": "payload.Variables.**.Format",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 760,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "edc4b1e3bd03932f",
        "type": "debug",
        "z": "c655ed5d447ddd09",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 260,
        "wires": []
    },
    {
        "id": "88b00bf892b2a4e7",
        "type": "switch",
        "z": "c655ed5d447ddd09",
        "name": "Client Status",
        "property": "status.text",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "not running",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 430,
        "y": 840,
        "wires": [
            [
                "e06ff91b20fede0f"
            ]
        ]
    },
    {
        "id": "66e1e5f5ad70303e",
        "type": "status",
        "z": "c655ed5d447ddd09",
        "name": "Get Client Status",
        "scope": [
            "78fe19904586b22e"
        ],
        "x": 260,
        "y": 840,
        "wires": [
            [
                "88b00bf892b2a4e7"
            ]
        ]
    },
    {
        "id": "73e14216242f5208",
        "type": "debug",
        "z": "c655ed5d447ddd09",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 480,
        "wires": []
    },
    {
        "id": "819d95857f8e72c1",
        "type": "link out",
        "z": "c655ed5d447ddd09",
        "name": "link out 2",
        "mode": "link",
        "links": [
            "3b981560b957dbee"
        ],
        "x": 975,
        "y": 580,
        "wires": []
    },
    {
        "id": "725773571c3b27e3",
        "type": "OPCUA-IIoT-Inject",
        "z": "c655ed5d447ddd09",
        "injectType": "inject",
        "payloadType": "json",
        "topic": "",
        "repeat": "1",
        "crontab": "",
        "once": false,
        "startDelay": "5",
        "name": "",
        "payload": "{ \"interval\": 500, \"queueSize\": 10 }",
        "addressSpaceItems": [
            {
                "name": "CurrentTime",
                "nodeId": "ns=0;i=2258",
                "datatypeName": ""
            }
        ],
        "x": 300,
        "y": 700,
        "wires": [
            [
                "78fe19904586b22e"
            ]
        ]
    },
    {
        "id": "78fe19904586b22e",
        "type": "OPCUA-IIoT-Read",
        "z": "c655ed5d447ddd09",
        "attributeId": 0,
        "maxAge": 1,
        "depth": 1,
        "connector": "ae3ddfa32adf981e",
        "name": "",
        "justValue": true,
        "showStatusActivities": false,
        "showErrors": false,
        "parseStrings": false,
        "historyDays": 1,
        "x": 440,
        "y": 700,
        "wires": [
            [
                "49b6ef7131be0c75"
            ]
        ]
    },
    {
        "id": "1fbed0b664d74489",
        "type": "OPCUA-IIoT-Flex-Connector",
        "z": "c655ed5d447ddd09",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "connector": "4039d7da.be9428",
        "x": 980,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "f494e2a74218d674",
        "type": "OPCUA-IIoT-Listener",
        "z": "c655ed5d447ddd09",
        "connector": "ae3ddfa32adf981e",
        "action": "subscribe",
        "queueSize": 10,
        "name": "",
        "topic": "",
        "justValue": true,
        "useGroupItems": false,
        "showStatusActivities": true,
        "showErrors": true,
        "x": 1120,
        "y": 340,
        "wires": [
            [
                "225f5af778dbf729"
            ]
        ]
    },
    {
        "id": "8acf6096c7f31e6d",
        "type": "change",
        "z": "86a266d2e918ccb0",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.data",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 390,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "3b981560b957dbee",
        "type": "link in",
        "z": "86a266d2e918ccb0",
        "name": "link in 2",
        "links": [
            "819d95857f8e72c1"
        ],
        "x": 185,
        "y": 60,
        "wires": [
            [
                "8acf6096c7f31e6d",
                "df0cda5dbb2720f2",
                "30a79c4f8b484350",
                "4a997572b21ee24d",
                "3047b54fe4299e0e",
                "7e6e57ac73292886",
                "02ab69581f3001da",
                "de9299b15ca09679",
                "be91171736b23af0",
                "77e1095659867220",
                "4eb13d56a746c650",
                "e6a43b013345d608",
                "127ac6383cdca5bf"
            ]
        ]
    },
    {
        "id": "df0cda5dbb2720f2",
        "type": "function",
        "z": "86a266d2e918ccb0",
        "name": "001_Calcul_puissance_ph1_n_voute",
        "func": "   \nif (msg.payload.data.Name == \"001_Calcul_puissance_ph1_n_voute\") {\n    msg.payload = (msg.payload.data.Value)/1000\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 260,
        "wires": [
            [
                "fb3fa18f12b013c8",
                "a2c3b2211a86b457"
            ]
        ]
    },
    {
        "id": "fb3fa18f12b013c8",
        "type": "ui_chart",
        "z": "86a266d2e918ccb0",
        "name": "Puissance Four Voute phase 1",
        "group": "c5bf63fb1b49fed7",
        "order": 1,
        "width": "20",
        "height": "10",
        "label": "Puissance Four Voute phase 1 (kW)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "20",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 910,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "a2c3b2211a86b457",
        "type": "ui_gauge",
        "z": "86a266d2e918ccb0",
        "name": "Puissance Four Voute phase 1",
        "group": "c5bf63fb1b49fed7",
        "order": 3,
        "width": "10",
        "height": "10",
        "gtype": "gage",
        "title": "Puissance Four Voute phase 1 (kW)",
        "label": "kW",
        "format": "{{value}}",
        "min": 0,
        "max": "20",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "60",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 910,
        "y": 340,
        "wires": []
    },
    {
        "id": "30a79c4f8b484350",
        "type": "function",
        "z": "86a266d2e918ccb0",
        "name": "002_Calcul_puissance_ph2_n_voute",
        "func": "   \nif (msg.payload.data.Name == \"002_Calcul_puissance_ph2_n_voute\") {\n    msg.payload = (msg.payload.data.Value)/1000\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 440,
        "wires": [
            [
                "f2f35cd527ea956d",
                "384d935af435ad0f"
            ]
        ]
    },
    {
        "id": "f2f35cd527ea956d",
        "type": "ui_chart",
        "z": "86a266d2e918ccb0",
        "name": "Puissance Four Phase 2 Voute",
        "group": "1b34a412bfc51b15",
        "order": 1,
        "width": "20",
        "height": "10",
        "label": "Puissance Four Phase 2 Voute (kW)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "20",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 910,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "384d935af435ad0f",
        "type": "ui_gauge",
        "z": "86a266d2e918ccb0",
        "name": "Puissance Four Phase 2 Voute",
        "group": "1b34a412bfc51b15",
        "order": 3,
        "width": "10",
        "height": "10",
        "gtype": "gage",
        "title": "Puissance Four Phase 2 Voute (kW)",
        "label": "kW",
        "format": "{{value}}",
        "min": 0,
        "max": "20",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "60",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 910,
        "y": 520,
        "wires": []
    },
    {
        "id": "4a997572b21ee24d",
        "type": "function",
        "z": "86a266d2e918ccb0",
        "name": "003_Calcul_puissance_ph3_n_voute",
        "func": "   \nif (msg.payload.data.Name == \"003_Calcul_puissance_ph3_n_voute\") {\n    msg.payload = (msg.payload.data.Value)/1000\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 620,
        "wires": [
            [
                "f51ad04ecdaed8ce",
                "66eaf9fe6501919c"
            ]
        ]
    },
    {
        "id": "f51ad04ecdaed8ce",
        "type": "ui_chart",
        "z": "86a266d2e918ccb0",
        "name": "Puissance Four Phase 3 Voute",
        "group": "1b34a412bfc51b15",
        "order": 1,
        "width": "20",
        "height": "10",
        "label": "Puissance Four Phase 3 Voute (kW)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "20",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 910,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "66eaf9fe6501919c",
        "type": "ui_gauge",
        "z": "86a266d2e918ccb0",
        "name": "Puissance Four Phase 3 Voute",
        "group": "1b34a412bfc51b15",
        "order": 3,
        "width": "10",
        "height": "10",
        "gtype": "gage",
        "title": "Puissance Four Phase 3 Voute (kW)",
        "label": "kW",
        "format": "{{value}}",
        "min": 0,
        "max": "20",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "60",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 910,
        "y": 700,
        "wires": []
    },
    {
        "id": "3047b54fe4299e0e",
        "type": "function",
        "z": "86a266d2e918ccb0",
        "name": "004_Calcul_puissance_ph1_n_sole",
        "func": "   \nif (msg.payload.data.Name == \"004_Calcul_puissance_ph1_n_sole\") {\n    msg.payload = (msg.payload.data.Value)/1000\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 840,
        "wires": [
            [
                "10c01f3288b451d6",
                "daa328d12b6883c4"
            ]
        ]
    },
    {
        "id": "10c01f3288b451d6",
        "type": "ui_chart",
        "z": "86a266d2e918ccb0",
        "name": "Puissance Four Phase 1 Sole",
        "group": "1b34a412bfc51b15",
        "order": 1,
        "width": "20",
        "height": "10",
        "label": "Puissance Four Phase 1 Sole (kW)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "20",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 910,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "daa328d12b6883c4",
        "type": "ui_gauge",
        "z": "86a266d2e918ccb0",
        "name": "Puissance Four Phase 1 Sole",
        "group": "1b34a412bfc51b15",
        "order": 3,
        "width": "10",
        "height": "10",
        "gtype": "gage",
        "title": "Puissance Four Phase 1 Sole (kW)",
        "label": "kW",
        "format": "{{value}}",
        "min": 0,
        "max": "20",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "60",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 910,
        "y": 920,
        "wires": []
    },
    {
        "id": "7e6e57ac73292886",
        "type": "function",
        "z": "86a266d2e918ccb0",
        "name": "005_Calcul_puissance_ph2_n_sole",
        "func": "   \nif (msg.payload.data.Name == \"005_Calcul_puissance_ph2_n_sole\") {\n    msg.payload = (msg.payload.data.Value)/1000\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 1000,
        "wires": [
            [
                "f99e2feed121af6c",
                "36156b5a0a9b01b6"
            ]
        ]
    },
    {
        "id": "f99e2feed121af6c",
        "type": "ui_chart",
        "z": "86a266d2e918ccb0",
        "name": "Puissance Four Phase 2 Sole",
        "group": "1b34a412bfc51b15",
        "order": 1,
        "width": "20",
        "height": "10",
        "label": "Puissance Four Phase 2 Sole (kW)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "20",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 910,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "36156b5a0a9b01b6",
        "type": "ui_gauge",
        "z": "86a266d2e918ccb0",
        "name": "Puissance Four Phase 2 Sole",
        "group": "1b34a412bfc51b15",
        "order": 3,
        "width": "10",
        "height": "10",
        "gtype": "gage",
        "title": "Puissance Four Phase 2 Sole (kW)",
        "label": "kW",
        "format": "{{value}}",
        "min": 0,
        "max": "20",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "60",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 910,
        "y": 1080,
        "wires": []
    },
    {
        "id": "02ab69581f3001da",
        "type": "function",
        "z": "86a266d2e918ccb0",
        "name": "006_Calcul_puissance_ph3_n_sole",
        "func": "   \nif (msg.payload.data.Name == \"006_Calcul_puissance_ph3_n_sole\") {\n    msg.payload = (msg.payload.data.Value)/1000\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 1160,
        "wires": [
            [
                "6fd581ba400e34ea",
                "e48ea5e1d52e1c07"
            ]
        ]
    },
    {
        "id": "6fd581ba400e34ea",
        "type": "ui_chart",
        "z": "86a266d2e918ccb0",
        "name": "Puissance Four Phase 3 Sole",
        "group": "1b34a412bfc51b15",
        "order": 1,
        "width": "20",
        "height": "10",
        "label": "Puissance Four Phase 3 Sole (kW)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "20",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 910,
        "y": 1160,
        "wires": [
            []
        ]
    },
    {
        "id": "e48ea5e1d52e1c07",
        "type": "ui_gauge",
        "z": "86a266d2e918ccb0",
        "name": "Puissance Four Phase 3 Sole",
        "group": "1b34a412bfc51b15",
        "order": 3,
        "width": "10",
        "height": "10",
        "gtype": "gage",
        "title": "Puissance Four Phase 3 Sole (kW)",
        "label": "kW",
        "format": "{{value}}",
        "min": 0,
        "max": "20",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "60",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 910,
        "y": 1240,
        "wires": []
    },
    {
        "id": "de9299b15ca09679",
        "type": "function",
        "z": "86a266d2e918ccb0",
        "name": "007_Calcul_puissance_ph1_n_chaudiere_inf",
        "func": "   \nif (msg.payload.data.Name == \"007_Calcul_puissance_ph1_n_chaudiere_inf\") {\n    msg.payload = (msg.payload.data.Value)/1000\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 1320,
        "wires": [
            [
                "633716a251044b26",
                "8821910cfd13a98c"
            ]
        ]
    },
    {
        "id": "633716a251044b26",
        "type": "ui_chart",
        "z": "86a266d2e918ccb0",
        "name": "Puissance Chaudiere Phase 1",
        "group": "1b34a412bfc51b15",
        "order": 1,
        "width": "20",
        "height": "10",
        "label": "Puissance Chaudiere_inf Phase 1 (kW)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "15",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 910,
        "y": 1320,
        "wires": [
            []
        ]
    },
    {
        "id": "8821910cfd13a98c",
        "type": "ui_gauge",
        "z": "86a266d2e918ccb0",
        "name": "Puissance Chaudiere Phase 1",
        "group": "1b34a412bfc51b15",
        "order": 3,
        "width": "10",
        "height": "10",
        "gtype": "gage",
        "title": "Puissance Chaudiere_inf Phase 1 (kW)",
        "label": "kW",
        "format": "{{value}}",
        "min": 0,
        "max": "15",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "60",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 910,
        "y": 1400,
        "wires": []
    },
    {
        "id": "be91171736b23af0",
        "type": "function",
        "z": "86a266d2e918ccb0",
        "name": "008_Calcul_puissance_ph2_n_chaudiere_inf",
        "func": "   \nif (msg.payload.data.Name == \"008_Calcul_puissance_ph2_n_chaudiere_inf\") {\n    msg.payload = (msg.payload.data.Value)/1000\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 1480,
        "wires": [
            [
                "0da4626f981a7ad9",
                "6707621059d4e37f"
            ]
        ]
    },
    {
        "id": "0da4626f981a7ad9",
        "type": "ui_chart",
        "z": "86a266d2e918ccb0",
        "name": "Puissance Chaudiere Phase 2",
        "group": "1b34a412bfc51b15",
        "order": 1,
        "width": "20",
        "height": "10",
        "label": "Puissance Chaudiere_inf Phase 2 (kW)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "15",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 910,
        "y": 1480,
        "wires": [
            []
        ]
    },
    {
        "id": "6707621059d4e37f",
        "type": "ui_gauge",
        "z": "86a266d2e918ccb0",
        "name": "Puissance Chaudiere Phase 2",
        "group": "1b34a412bfc51b15",
        "order": 3,
        "width": "10",
        "height": "10",
        "gtype": "gage",
        "title": "Puissance Chaudiere_inf Phase 2 (kW)",
        "label": "kW",
        "format": "{{value}}",
        "min": 0,
        "max": "15",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "60",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 910,
        "y": 1560,
        "wires": []
    },
    {
        "id": "77e1095659867220",
        "type": "function",
        "z": "86a266d2e918ccb0",
        "name": "009_Calcul_puissance_ph3_n_chaudiere_inf",
        "func": "   \nif (msg.payload.data.Name == \"009_Calcul_puissance_ph3_n_chaudiere_inf\") {\n    msg.payload = (msg.payload.data.Value)/1000\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 1640,
        "wires": [
            [
                "a3fde0ae1df36102",
                "b3f5ff1f822ede3d"
            ]
        ]
    },
    {
        "id": "a3fde0ae1df36102",
        "type": "ui_chart",
        "z": "86a266d2e918ccb0",
        "name": "Puissance Chaudiere Phase 3",
        "group": "1b34a412bfc51b15",
        "order": 1,
        "width": "20",
        "height": "10",
        "label": "Puissance Chaudiere_inf Phase 3 (kW)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "15",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 910,
        "y": 1640,
        "wires": [
            []
        ]
    },
    {
        "id": "b3f5ff1f822ede3d",
        "type": "ui_gauge",
        "z": "86a266d2e918ccb0",
        "name": "Puissance Chaudiere Phase 3",
        "group": "1b34a412bfc51b15",
        "order": 3,
        "width": "10",
        "height": "10",
        "gtype": "gage",
        "title": "Puissance Chaudiere_inf Phase 3 (kW)",
        "label": "kW",
        "format": "{{value}}",
        "min": 0,
        "max": "15",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "60",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 910,
        "y": 1720,
        "wires": []
    },
    {
        "id": "4eb13d56a746c650",
        "type": "function",
        "z": "86a266d2e918ccb0",
        "name": "015_tension phase 1",
        "func": "   \nif (msg.payload.data.Name == \"015_tension phase 1\") {\n    msg.payload = (msg.payload.data.Value)\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 260,
        "wires": [
            [
                "84cbc218ef66d83d",
                "73e00dcdbf24e1a9"
            ]
        ]
    },
    {
        "id": "84cbc218ef66d83d",
        "type": "ui_chart",
        "z": "86a266d2e918ccb0",
        "name": "Tension phase 1 (V)",
        "group": "1b34a412bfc51b15",
        "order": 1,
        "width": "20",
        "height": "10",
        "label": "Tension phase 1 (V)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "300",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1700,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "73e00dcdbf24e1a9",
        "type": "ui_gauge",
        "z": "86a266d2e918ccb0",
        "name": "Tension phase 1",
        "group": "1b34a412bfc51b15",
        "order": 3,
        "width": "10",
        "height": "10",
        "gtype": "gage",
        "title": "Tension phase 1 (V)",
        "label": "(V)",
        "format": "{{value}}",
        "min": 0,
        "max": "300",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "60",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 1700,
        "y": 340,
        "wires": []
    },
    {
        "id": "e6a43b013345d608",
        "type": "function",
        "z": "86a266d2e918ccb0",
        "name": "016_tension phase 2",
        "func": "   \nif (msg.payload.data.Name == \"016_tension phase 2\") {\n    msg.payload = (msg.payload.data.Value)\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 500,
        "wires": [
            [
                "a39d515f18a6e552",
                "ed34d4c84ba537f0"
            ]
        ]
    },
    {
        "id": "a39d515f18a6e552",
        "type": "ui_chart",
        "z": "86a266d2e918ccb0",
        "name": "Tension phase 2 (V)",
        "group": "1b34a412bfc51b15",
        "order": 1,
        "width": "20",
        "height": "10",
        "label": "Tension phase 2 (V)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "300",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1760,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "ed34d4c84ba537f0",
        "type": "ui_gauge",
        "z": "86a266d2e918ccb0",
        "name": "Tension phase 2",
        "group": "1b34a412bfc51b15",
        "order": 3,
        "width": "10",
        "height": "10",
        "gtype": "gage",
        "title": "Tension phase 2 (V)",
        "label": "(V)",
        "format": "{{value}}",
        "min": 0,
        "max": "300",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "60",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 1740,
        "y": 580,
        "wires": []
    },
    {
        "id": "127ac6383cdca5bf",
        "type": "function",
        "z": "86a266d2e918ccb0",
        "name": "017_tension phase 3",
        "func": "   \nif (msg.payload.data.Name == \"017_tension phase 3\") {\n    msg.payload = (msg.payload.data.Value)\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1460,
        "y": 760,
        "wires": [
            [
                "1cea189de0476598",
                "d7acdd94233d9ee0"
            ]
        ]
    },
    {
        "id": "1cea189de0476598",
        "type": "ui_chart",
        "z": "86a266d2e918ccb0",
        "name": "Tension phase 3 (V)",
        "group": "1b34a412bfc51b15",
        "order": 1,
        "width": "20",
        "height": "10",
        "label": "Tension phase 3 (V)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "300",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1780,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "d7acdd94233d9ee0",
        "type": "ui_gauge",
        "z": "86a266d2e918ccb0",
        "name": "Tension phase 3",
        "group": "1b34a412bfc51b15",
        "order": 3,
        "width": "10",
        "height": "10",
        "gtype": "gage",
        "title": "Tension phase 3 (V)",
        "label": "(V)",
        "format": "{{value}}",
        "min": 0,
        "max": "300",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "60",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 1760,
        "y": 840,
        "wires": []
    },
    {
        "id": "665c11b3027887d9",
        "type": "ui_template",
        "z": "86a266d2e918ccb0",
        "group": "",
        "name": "",
        "order": 0,
        "width": 0,
        "height": 0,
        "format": "<style>\n    .nr-dashboard-theme ui-card-panel p.nr-dashboard-cardtitle {\n        color: #6D81BC;\n        /*<-- couleur ent√™te*/\n        /*border-radius: 10px*/\n        ;\n    }\n\n    md-toolbar.md-default-theme:not(.md-menu-toolbar),\n    md-toolbar:not(.md-menu-toolbar) {\n        background-color: #EF7613;\n        color: rgb(255, 255, 255);\n    }\n\n    body.nr-dashboard-theme md-content md-card {\n        background-color: #FED5B6;\n        color: #B62650 !important\n    }\n\n    /*d√©grad√© de fond*/\n    body {\n        background: -webkit-linear-gradient(55deg,\n                #009785 0%,\n                #245aa5 50%,\n                #b800e9 100%);\n        -websit-touch-callout: none !important;\n    }\n\n    /*Top bar*/\n    body.nr-dashboard-theme md-toolbar,\n    body.nr-dashboard-theme md-content md-card {\n        background-color: transparent !important;\n        color: #FFFFFF;\n    }\n\n    body.nr-dashboard-theme md-toolbar,\n    body.nr-dashboard-theme md-content md-card {\n        background-color: transparent !important;\n        color: #E18A08;\n    }\n\n    /*Groupes*/\n    ui-card-panel {\n        background-color: rgba(255, 255, 255, 0.1) !important border-radius: 40px !important;\n    }\n\n    .nr-dashboard-theme ui-card-panel {\n        border: none;\n    }\n\n    /*Nom groupes*/\n    .nr-dashboard-theme ui-card-panel p.nr-nr-dashboard-cardtitle;\n    color: rgba(255, 255, 255, 0.5);\n    }\n\n    /*Boutons*/\n    .nr-dashboard-theme .nr-dashboard-button .md-button {\n        background-color: rgba(255, 255, 255, .1);\n    }\n\n    .md-button {\n        border-radius: 10px;\n    }\n\n    element.style {\n        left: 120px;\n        top: 6px;\n    }\n\n\n    <style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "global",
        "className": "",
        "x": 1360,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "4a8e65f192044952",
        "type": "function",
        "z": "3c6eb3759a5ae8f0",
        "name": "Subscribe",
        "func": "//Get global flag\nvar bConnectLost = global.get('ConnectionLost') || false;\n\n//Default settings\nvar injectMssge = {};\ninjectMssge.topic=\"\";\ninjectMssge.nodetype=\"inject\";\ninjectMssge.injectType=\"listen\";\ninjectMssge.addressSpaceItems=[];\n//injectMssge.payload=1000;\nvar optionsParam = {\n            \"requestedPublishingInterval\": 1000,\n            //\"requestedLifetimeCount\": 99999,\n            \"requestedLifetimeCount\": 10,\n            \"requestedMaxKeepAliveCount\": 5,\n            \"maxNotificationsPerPublish\": 10,\n            \"publishingEnabled\": true,\n            \"priority\": 10,\n            \"clientName\":\"nr-iot\",\n      };\n\ninjectMssge.payload={ \"interval\": 6000, \"queueSize\": 10, \"options\":optionsParam };\n\n//Specific case if the configuration contains only one variable\nif(Array.isArray(msg.varNameList) === false)\n {\n    injectMssge.addressSpaceItems.push({\"name\": msg.varNameList, \"nodeId\":  msg.varNodeIdList}); \n }\n else\n {\n    //Add variables\n    for(var iIndVar=0;iIndVar<msg.varNameList.length; iIndVar++)\n    {\n      injectMssge.addressSpaceItems.push( {\"name\": msg.varNameList[iIndVar], \"nodeId\":  msg.varNodeIdList[iIndVar]});\n    }\n }\n\n if(bConnectLost === false)\n {\n   console.log(\"---- FIRST SUBSCRIBE ------\")\n   SendSubscribeMessage();\n }\n else\n {\n    //In case of connection lost, send another subscription\n    console.log(\"---- CONNECT LOST - RESUBSCRIBE  ------\")\n    SendSubscribeMessage();\n    setTimeout(SendSubscribeMessage, 5000);\n  }\n  \n  //Send inject message\n  function SendSubscribeMessage()\n  {\n    node.send(injectMssge);\n  }\n  \n  ",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 320,
        "wires": [
            [
                "ec9995730bacd7a2"
            ]
        ]
    },
    {
        "id": "17b93545af15a32f",
        "type": "file in",
        "z": "3c6eb3759a5ae8f0",
        "name": "Read Configuration",
        "filename": "C:\\Users\\2108529\\.node-red\\ConfXML\\node_red_configuration_Lent_Presse_55T.xml",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "allProps": false,
        "x": 350,
        "y": 400,
        "wires": [
            [
                "f987e9ad907f41d4"
            ]
        ]
    },
    {
        "id": "f987e9ad907f41d4",
        "type": "xml",
        "z": "3c6eb3759a5ae8f0",
        "name": "",
        "property": "payload",
        "attr": "",
        "chr": "",
        "x": 510,
        "y": 400,
        "wires": [
            [
                "a5617624e55feb2e",
                "727e0d88a6192f46"
            ]
        ]
    },
    {
        "id": "a5617624e55feb2e",
        "type": "change",
        "z": "3c6eb3759a5ae8f0",
        "name": "Get Variable List",
        "rules": [
            {
                "t": "set",
                "p": "varNameList",
                "pt": "msg",
                "to": "payload.Variables.**.Name",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "varNodeIdList",
                "pt": "msg",
                "to": "payload.Variables.**.NodeId",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "varUnitList",
                "pt": "msg",
                "to": "payload.Variables.**.Unit",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "varFormatList",
                "pt": "msg",
                "to": "payload.Variables.**.Format",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 680,
        "y": 400,
        "wires": [
            [
                "4a8e65f192044952"
            ]
        ]
    },
    {
        "id": "9c688963cc7b6690",
        "type": "comment",
        "z": "3c6eb3759a5ae8f0",
        "name": "Load Configuration and subscribe",
        "info": "",
        "x": 270,
        "y": 260,
        "wires": []
    },
    {
        "id": "151232598f785c5c",
        "type": "comment",
        "z": "3c6eb3759a5ae8f0",
        "name": "Timeout Management",
        "info": "",
        "x": 230,
        "y": 540,
        "wires": []
    },
    {
        "id": "7911b8d205adc1b8",
        "type": "status",
        "z": "3c6eb3759a5ae8f0",
        "name": "Get Client Status",
        "scope": [
            "ec9995730bacd7a2"
        ],
        "x": 240,
        "y": 100,
        "wires": [
            [
                "a05d9fa0c05d2dc9",
                "7c6a572a14ca7ff0"
            ]
        ]
    },
    {
        "id": "a05d9fa0c05d2dc9",
        "type": "switch",
        "z": "3c6eb3759a5ae8f0",
        "name": "Client Status",
        "property": "status.text",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "connecting",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "active",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "started",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "listening",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "terminated",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 490,
        "y": 120,
        "wires": [
            [
                "e683fe0255740485"
            ],
            [
                "8af59eef625684ce"
            ],
            [],
            [
                "f8e40aea8318813d"
            ],
            [
                "265004c9efaaf8a9"
            ]
        ]
    },
    {
        "id": "b35fb9bb764d09cf",
        "type": "trigger",
        "z": "3c6eb3759a5ae8f0",
        "name": "Timeout ConnectionLost",
        "op1": "",
        "op2": "{\"endpoint\":\"opc.tcp://localhost:59300/Prosyst/UnifiedDataCollector\",\"keepSessionAlive\":false,\"showErrors\":true,\"defaultSecureTokenLifetime\":360000,\"endpointMustExist\":false,\"autoSelectRightEndpoint\":false,\"strategyMaxRetry\":10000}",
        "op1type": "nul",
        "op2type": "json",
        "duration": "5",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 580,
        "y": 680,
        "wires": [
            [
                "5679cc0aa1025656"
            ]
        ]
    },
    {
        "id": "265004c9efaaf8a9",
        "type": "change",
        "z": "3c6eb3759a5ae8f0",
        "name": "ConnectionLost",
        "rules": [
            {
                "t": "set",
                "p": "ConnectionLost",
                "pt": "global",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 700,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "04072c2d4d156c38",
        "type": "comment",
        "z": "3c6eb3759a5ae8f0",
        "name": "Subscription Management",
        "info": "",
        "x": 230,
        "y": 40,
        "wires": []
    },
    {
        "id": "f8e40aea8318813d",
        "type": "change",
        "z": "3c6eb3759a5ae8f0",
        "name": "ConnectionOk",
        "rules": [
            {
                "t": "set",
                "p": "ConnectionLost",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 700,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "9b3e84080721b189",
        "type": "link in",
        "z": "3c6eb3759a5ae8f0",
        "name": "Subscribe",
        "links": [
            "8af59eef625684ce"
        ],
        "x": 175,
        "y": 400,
        "wires": [
            [
                "17b93545af15a32f"
            ]
        ]
    },
    {
        "id": "8af59eef625684ce",
        "type": "link out",
        "z": "3c6eb3759a5ae8f0",
        "name": "StartSubscribe",
        "links": [
            "9b3e84080721b189"
        ],
        "x": 635,
        "y": 80,
        "wires": []
    },
    {
        "id": "a8af4a43ee2d9996",
        "type": "debug",
        "z": "3c6eb3759a5ae8f0",
        "name": "DebugLent",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 520,
        "wires": []
    },
    {
        "id": "fd2fdb522a132f11",
        "type": "function",
        "z": "3c6eb3759a5ae8f0",
        "name": "GetData",
        "func": "var Proto = \"ns=16;s=Presse_API_Lent_\"\n\n\n// Initialisation de la sortie\n// R√©cup√©ration du message\nvar Data = msg;\n\n// R√©cup√©ration de la valeur\nvar Value = Data.payload.value.value;\n\n// r√©cup√©ration du type\nvar DataType = Data.payload.value.dataType;\n\n// r√©cup√©ration de l'horodatage\nvar DateTimeStr = new Date(Data.payload.sourceTimestamp);\nvar DateTime = DateTimeStr.getTime();\n\n// r√©cup√©ration du nom\nvar Name = Data.addressSpaceItems[0].nodeId.toString().substring(Proto.length);\n\n// Cr√©ation de la variable de sortie\nvar myvar_output = { Name, DateTime, Value };\n\n// Suppression des donn√©es existantes\nmsg = {}\nmsg.payload = {}\n\nmsg.payload.data = myvar_output;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 520,
        "wires": [
            [
                "fb12fe4e99543e2a",
                "489903e584949d3b",
                "d2a6da0a7a0175dd"
            ]
        ]
    },
    {
        "id": "fb12fe4e99543e2a",
        "type": "join",
        "z": "3c6eb3759a5ae8f0",
        "name": "group",
        "mode": "custom",
        "build": "array",
        "property": "payload.data",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "10",
        "count": "120",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 928,
        "y": 520,
        "wires": [
            [
                "de30837fc6eeb889"
            ]
        ]
    },
    {
        "id": "544715cc5cd88f6e",
        "type": "function",
        "z": "3c6eb3759a5ae8f0",
        "name": "Erreur Comm Lente",
        "func": "var status = msg.payload.statusCode.name;\n\nif ( status == \"Good\")\n{\n    node.status({fill:\"green\",shape:\"dot\",text:\"Ok\"})\n    return [msg,null];\n}\nelse\n{\n    node.status({fill:\"red\",shape:\"ring\",text:status}) \n    return [null,msg]\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 540,
        "wires": [
            [
                "fd2fdb522a132f11"
            ],
            [
                "c7305d528acb65fc"
            ]
        ]
    },
    {
        "id": "de30837fc6eeb889",
        "type": "change",
        "z": "3c6eb3759a5ae8f0",
        "name": "Desc",
        "rules": [
            {
                "t": "set",
                "p": "payload.type",
                "pt": "msg",
                "to": "listen",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1080,
        "y": 520,
        "wires": [
            [
                "a8af4a43ee2d9996"
            ]
        ]
    },
    {
        "id": "e9baab8ff6fc5cdc",
        "type": "inject",
        "z": "3c6eb3759a5ae8f0",
        "name": "Initialization",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 620,
        "wires": [
            [
                "53d678139fc05e28"
            ]
        ]
    },
    {
        "id": "53d678139fc05e28",
        "type": "change",
        "z": "3c6eb3759a5ae8f0",
        "name": "ConnectionOk",
        "rules": [
            {
                "t": "set",
                "p": "ConnectionLost",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 410,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "5e88f7f84b648dba",
        "type": "delay",
        "z": "3c6eb3759a5ae8f0",
        "name": "Reconnect Timeout",
        "pauseType": "delay",
        "timeout": "60",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 550,
        "y": 820,
        "wires": [
            [
                "b35fb9bb764d09cf"
            ]
        ]
    },
    {
        "id": "e683fe0255740485",
        "type": "link out",
        "z": "3c6eb3759a5ae8f0",
        "name": "outConnecting",
        "links": [],
        "x": 635,
        "y": 40,
        "wires": []
    },
    {
        "id": "c7305d528acb65fc",
        "type": "debug",
        "z": "3c6eb3759a5ae8f0",
        "name": "erreur Comm",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 770,
        "y": 620,
        "wires": []
    },
    {
        "id": "727e0d88a6192f46",
        "type": "change",
        "z": "3c6eb3759a5ae8f0",
        "name": "Get Variable List",
        "rules": [
            {
                "t": "set",
                "p": "varNameList",
                "pt": "global",
                "to": "payload.Variables.**.Name",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "varNodeIdList",
                "pt": "global",
                "to": "payload.Variables.**.NodeId",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "varUnitList",
                "pt": "global",
                "to": "payload.Variables.**.Unit",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "varFormatList",
                "pt": "global",
                "to": "payload.Variables.**.Format",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 680,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "7c6a572a14ca7ff0",
        "type": "debug",
        "z": "3c6eb3759a5ae8f0",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 240,
        "wires": []
    },
    {
        "id": "02a8e6e68814a3c9",
        "type": "switch",
        "z": "3c6eb3759a5ae8f0",
        "name": "Client Status",
        "property": "status.text",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "not running",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 350,
        "y": 820,
        "wires": [
            [
                "5e88f7f84b648dba"
            ]
        ]
    },
    {
        "id": "b3231590bb3b5449",
        "type": "status",
        "z": "3c6eb3759a5ae8f0",
        "name": "Get Client Status",
        "scope": [
            "c36962a4d446173f"
        ],
        "x": 180,
        "y": 820,
        "wires": [
            [
                "02a8e6e68814a3c9"
            ]
        ]
    },
    {
        "id": "489903e584949d3b",
        "type": "debug",
        "z": "3c6eb3759a5ae8f0",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 460,
        "wires": []
    },
    {
        "id": "d2a6da0a7a0175dd",
        "type": "link out",
        "z": "3c6eb3759a5ae8f0",
        "name": "link out 3",
        "mode": "link",
        "links": [
            "bae6a5c48a0a8369"
        ],
        "x": 895,
        "y": 560,
        "wires": []
    },
    {
        "id": "0ecb265c07836a7f",
        "type": "OPCUA-IIoT-Inject",
        "z": "3c6eb3759a5ae8f0",
        "injectType": "inject",
        "payloadType": "json",
        "topic": "",
        "repeat": "1",
        "crontab": "",
        "once": false,
        "startDelay": "5",
        "name": "",
        "payload": "{ \"interval\": 500, \"queueSize\": 10 }",
        "addressSpaceItems": [
            {
                "name": "CurrentTime",
                "nodeId": "ns=0;i=2258",
                "datatypeName": ""
            }
        ],
        "x": 220,
        "y": 680,
        "wires": [
            [
                "c36962a4d446173f"
            ]
        ]
    },
    {
        "id": "c36962a4d446173f",
        "type": "OPCUA-IIoT-Read",
        "z": "3c6eb3759a5ae8f0",
        "attributeId": 0,
        "maxAge": 1,
        "depth": 1,
        "connector": "458017ab284dc12c",
        "name": "",
        "justValue": true,
        "showStatusActivities": false,
        "showErrors": false,
        "parseStrings": false,
        "historyDays": 1,
        "x": 360,
        "y": 680,
        "wires": [
            [
                "b35fb9bb764d09cf"
            ]
        ]
    },
    {
        "id": "5679cc0aa1025656",
        "type": "OPCUA-IIoT-Flex-Connector",
        "z": "3c6eb3759a5ae8f0",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "connector": "4039d7da.be9428",
        "x": 900,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "ec9995730bacd7a2",
        "type": "OPCUA-IIoT-Listener",
        "z": "3c6eb3759a5ae8f0",
        "connector": "458017ab284dc12c",
        "action": "subscribe",
        "queueSize": 10,
        "name": "",
        "topic": "",
        "justValue": true,
        "useGroupItems": false,
        "showStatusActivities": true,
        "showErrors": true,
        "x": 1040,
        "y": 320,
        "wires": [
            [
                "544715cc5cd88f6e"
            ]
        ]
    },
    {
        "id": "bae6a5c48a0a8369",
        "type": "link in",
        "z": "d4d1d4d8c221f3e8",
        "name": "Communication_Presse_75T",
        "links": [
            "d2a6da0a7a0175dd"
        ],
        "x": 465,
        "y": 180,
        "wires": [
            [
                "43b42348fa1599e4",
                "356e8b0656ec1bb6",
                "841c1ba47306c2b9",
                "9288de1af44f54f4",
                "5aacbe7a2b762073"
            ]
        ]
    },
    {
        "id": "43b42348fa1599e4",
        "type": "function",
        "z": "d4d1d4d8c221f3e8",
        "name": "temp_lunet_1",
        "func": "   \nif (msg.payload.data.Name == \"temp_lunet_1\") {\n    msg.payload = (msg.payload.data.Value)\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 180,
        "wires": [
            [
                "935be7fca9fba802",
                "81b74023504a95aa"
            ]
        ]
    },
    {
        "id": "935be7fca9fba802",
        "type": "ui_gauge",
        "z": "d4d1d4d8c221f3e8",
        "name": "Temp Lunette 1",
        "group": "f9220d91d5895a6a",
        "order": 2,
        "width": 14,
        "height": 9,
        "gtype": "gage",
        "title": "Temp Lunette 1 (¬∞C)",
        "label": "¬∞C",
        "format": "{{value}}",
        "min": 0,
        "max": "400",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "60",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 1210,
        "y": 260,
        "wires": []
    },
    {
        "id": "356e8b0656ec1bb6",
        "type": "function",
        "z": "d4d1d4d8c221f3e8",
        "name": "temp_lunet_2",
        "func": "   \nif (msg.payload.data.Name == \"temp_lunet_2\") {\n    msg.payload = (msg.payload.data.Value)\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 340,
        "wires": [
            [
                "e57c298273bf3a48",
                "681961a8c036b1ed"
            ]
        ]
    },
    {
        "id": "841c1ba47306c2b9",
        "type": "function",
        "z": "d4d1d4d8c221f3e8",
        "name": "ener_four_p1",
        "func": "   \nif (msg.payload.data.Name == \"ener_four_p1\") {\n    msg.payload = (msg.payload.data.Value)\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 500,
        "wires": [
            [
                "6efc513e46ca98a4",
                "21e3a828b3626fe2"
            ]
        ]
    },
    {
        "id": "6efc513e46ca98a4",
        "type": "ui_chart",
        "z": "d4d1d4d8c221f3e8",
        "name": "Energie Four P1",
        "group": "f9220d91d5895a6a",
        "order": 5,
        "width": 16,
        "height": 10,
        "label": "Energie Four P1 (kW)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1210,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "21e3a828b3626fe2",
        "type": "ui_gauge",
        "z": "d4d1d4d8c221f3e8",
        "name": "Energie Four P1",
        "group": "f9220d91d5895a6a",
        "order": 6,
        "width": 14,
        "height": 10,
        "gtype": "wave",
        "title": "Energie Four P1 (kW)",
        "label": "kW",
        "format": "{{value}}",
        "min": 0,
        "max": "200",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "150",
        "seg2": "300",
        "diff": false,
        "className": "",
        "x": 1210,
        "y": 580,
        "wires": []
    },
    {
        "id": "9288de1af44f54f4",
        "type": "function",
        "z": "d4d1d4d8c221f3e8",
        "name": "ener_four_p2",
        "func": "   \nif (msg.payload.data.Name == \"ener_four_p2\") {\n    msg.payload = (msg.payload.data.Value)\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 660,
        "wires": [
            [
                "693f83e836dbe04e",
                "069ad86055a5309a"
            ]
        ]
    },
    {
        "id": "693f83e836dbe04e",
        "type": "ui_chart",
        "z": "d4d1d4d8c221f3e8",
        "name": "Energie Four P2",
        "group": "f9220d91d5895a6a",
        "order": 7,
        "width": 16,
        "height": 10,
        "label": "Energie Four P2 (kW)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1210,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "069ad86055a5309a",
        "type": "ui_gauge",
        "z": "d4d1d4d8c221f3e8",
        "name": "Energie Four P2",
        "group": "f9220d91d5895a6a",
        "order": 8,
        "width": 14,
        "height": 10,
        "gtype": "wave",
        "title": "Energie Four P2 (kW)",
        "label": "kW",
        "format": "{{value}}",
        "min": 0,
        "max": "200",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "150",
        "seg2": "300",
        "diff": false,
        "className": "",
        "x": 1210,
        "y": 740,
        "wires": []
    },
    {
        "id": "5aacbe7a2b762073",
        "type": "function",
        "z": "d4d1d4d8c221f3e8",
        "name": "ener_four_p3",
        "func": "   \nif (msg.payload.data.Name == \"ener_four_p3\") {\n    msg.payload = (msg.payload.data.Value)\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 820,
        "wires": [
            [
                "5d08661bb15629b5",
                "c8fab0b774113137"
            ]
        ]
    },
    {
        "id": "81b74023504a95aa",
        "type": "ui_chart",
        "z": "d4d1d4d8c221f3e8",
        "name": "Temp Lunette 1",
        "group": "f9220d91d5895a6a",
        "order": 1,
        "width": 16,
        "height": 9,
        "label": "Temp Lunette 1 (¬∞C)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "400",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1200,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "e57c298273bf3a48",
        "type": "ui_gauge",
        "z": "d4d1d4d8c221f3e8",
        "name": "Temp Lunette 2",
        "group": "f9220d91d5895a6a",
        "order": 4,
        "width": 14,
        "height": 9,
        "gtype": "gage",
        "title": "Temp Lunette 2 (¬∞C)",
        "label": "kW",
        "format": "{{value}}",
        "min": 0,
        "max": "440",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "150",
        "seg2": "300",
        "diff": false,
        "className": "",
        "x": 1220,
        "y": 400,
        "wires": []
    },
    {
        "id": "681961a8c036b1ed",
        "type": "ui_chart",
        "z": "d4d1d4d8c221f3e8",
        "name": "Temp Lunette 2",
        "group": "f9220d91d5895a6a",
        "order": 3,
        "width": 16,
        "height": 9,
        "label": "Temp Lunette 2 (¬∞C)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "400",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1210,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "5d08661bb15629b5",
        "type": "ui_chart",
        "z": "d4d1d4d8c221f3e8",
        "name": "Energie Four P3",
        "group": "f9220d91d5895a6a",
        "order": 9,
        "width": 16,
        "height": 10,
        "label": "Energie Four P3 (kW)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1200,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "c8fab0b774113137",
        "type": "ui_gauge",
        "z": "d4d1d4d8c221f3e8",
        "name": "Energie Four P3",
        "group": "f9220d91d5895a6a",
        "order": 10,
        "width": 14,
        "height": 10,
        "gtype": "wave",
        "title": "Energie Four P3 (kW)",
        "label": "kW",
        "format": "{{value}}",
        "min": 0,
        "max": "200",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "150",
        "seg2": "300",
        "diff": false,
        "className": "",
        "x": 1200,
        "y": 880,
        "wires": []
    },
    {
        "id": "1857eaafa17f5abb",
        "type": "function",
        "z": "0c2a792bad088f5c",
        "name": "Subscribe",
        "func": "//Get global flag\nvar bConnectLost = global.get('ConnectionLost') || false;\n\n//Default settings\nvar injectMssge = {};\ninjectMssge.topic=\"\";\ninjectMssge.nodetype=\"inject\";\ninjectMssge.injectType=\"listen\";\ninjectMssge.addressSpaceItems=[];\n//injectMssge.payload=1000;\nvar optionsParam = {\n            \"requestedPublishingInterval\": 1000,\n            //\"requestedLifetimeCount\": 99999,\n            \"requestedLifetimeCount\": 10,\n            \"requestedMaxKeepAliveCount\": 5,\n            \"maxNotificationsPerPublish\": 10,\n            \"publishingEnabled\": true,\n            \"priority\": 10,\n            \"clientName\":\"nr-iot\",\n      };\n\ninjectMssge.payload={ \"interval\": 6000, \"queueSize\": 10, \"options\":optionsParam };\n\n//Specific case if the configuration contains only one variable\nif(Array.isArray(msg.varNameList) === false)\n {\n    injectMssge.addressSpaceItems.push({\"name\": msg.varNameList, \"nodeId\":  msg.varNodeIdList}); \n }\n else\n {\n    //Add variables\n    for(var iIndVar=0;iIndVar<msg.varNameList.length; iIndVar++)\n    {\n      injectMssge.addressSpaceItems.push( {\"name\": msg.varNameList[iIndVar], \"nodeId\":  msg.varNodeIdList[iIndVar]});\n    }\n }\n\n if(bConnectLost === false)\n {\n   console.log(\"---- FIRST SUBSCRIBE ------\")\n   SendSubscribeMessage();\n }\n else\n {\n    //In case of connection lost, send another subscription\n    console.log(\"---- CONNECT LOST - RESUBSCRIBE  ------\")\n    SendSubscribeMessage();\n    setTimeout(SendSubscribeMessage, 5000);\n  }\n  \n  //Send inject message\n  function SendSubscribeMessage()\n  {\n    node.send(injectMssge);\n  }\n  \n  ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 420,
        "wires": [
            [
                "bcb6244be5bf8509"
            ]
        ]
    },
    {
        "id": "8b64b8a49e9c6619",
        "type": "file in",
        "z": "0c2a792bad088f5c",
        "name": "Read Configuration",
        "filename": "C:\\Users\\2108529\\.node-red\\ConfXML\\node_red_configuration_Lent_Presse_120T.xml",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "allProps": false,
        "x": 430,
        "y": 500,
        "wires": [
            [
                "ff5dc494675a48d2"
            ]
        ]
    },
    {
        "id": "ff5dc494675a48d2",
        "type": "xml",
        "z": "0c2a792bad088f5c",
        "name": "",
        "property": "payload",
        "attr": "",
        "chr": "",
        "x": 590,
        "y": 500,
        "wires": [
            [
                "c8089be8c30a414f",
                "1b59fb50170f2d1e"
            ]
        ]
    },
    {
        "id": "c8089be8c30a414f",
        "type": "change",
        "z": "0c2a792bad088f5c",
        "name": "Get Variable List",
        "rules": [
            {
                "t": "set",
                "p": "varNameList",
                "pt": "msg",
                "to": "payload.Variables.**.Name",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "varNodeIdList",
                "pt": "msg",
                "to": "payload.Variables.**.NodeId",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "varUnitList",
                "pt": "msg",
                "to": "payload.Variables.**.Unit",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "varFormatList",
                "pt": "msg",
                "to": "payload.Variables.**.Format",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 760,
        "y": 500,
        "wires": [
            [
                "1857eaafa17f5abb"
            ]
        ]
    },
    {
        "id": "70a9b433bbf2a6a4",
        "type": "comment",
        "z": "0c2a792bad088f5c",
        "name": "Load Configuration and subscribe",
        "info": "",
        "x": 350,
        "y": 360,
        "wires": []
    },
    {
        "id": "1f98e1cdcfca3d9f",
        "type": "comment",
        "z": "0c2a792bad088f5c",
        "name": "Timeout Management",
        "info": "",
        "x": 310,
        "y": 640,
        "wires": []
    },
    {
        "id": "7617769de420464e",
        "type": "status",
        "z": "0c2a792bad088f5c",
        "name": "Get Client Status",
        "scope": [
            "bcb6244be5bf8509"
        ],
        "x": 320,
        "y": 200,
        "wires": [
            [
                "91479a60ef15277d",
                "fea97993600a60cd"
            ]
        ]
    },
    {
        "id": "91479a60ef15277d",
        "type": "switch",
        "z": "0c2a792bad088f5c",
        "name": "Client Status",
        "property": "status.text",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "connecting",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "active",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "started",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "listening",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "terminated",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 570,
        "y": 220,
        "wires": [
            [
                "6194233c871fcbd1"
            ],
            [
                "a259d31d3ce72f45"
            ],
            [],
            [
                "3c1e09afc9da62c0"
            ],
            [
                "2d197e107f014340"
            ]
        ]
    },
    {
        "id": "b8398c0ad81501b2",
        "type": "trigger",
        "z": "0c2a792bad088f5c",
        "name": "Timeout ConnectionLost",
        "op1": "",
        "op2": "{\"endpoint\":\"opc.tcp://localhost:59300/Prosyst/UnifiedDataCollector\",\"keepSessionAlive\":false,\"showErrors\":true,\"defaultSecureTokenLifetime\":360000,\"endpointMustExist\":false,\"autoSelectRightEndpoint\":false,\"strategyMaxRetry\":10000}",
        "op1type": "nul",
        "op2type": "json",
        "duration": "5",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 660,
        "y": 780,
        "wires": [
            [
                "17d6e2c4181f7642"
            ]
        ]
    },
    {
        "id": "2d197e107f014340",
        "type": "change",
        "z": "0c2a792bad088f5c",
        "name": "ConnectionLost",
        "rules": [
            {
                "t": "set",
                "p": "ConnectionLost",
                "pt": "global",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "90aa2e77f10b4431",
        "type": "comment",
        "z": "0c2a792bad088f5c",
        "name": "Subscription Management",
        "info": "",
        "x": 310,
        "y": 140,
        "wires": []
    },
    {
        "id": "3c1e09afc9da62c0",
        "type": "change",
        "z": "0c2a792bad088f5c",
        "name": "ConnectionOk",
        "rules": [
            {
                "t": "set",
                "p": "ConnectionLost",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 800,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "5334becbb6037392",
        "type": "link in",
        "z": "0c2a792bad088f5c",
        "name": "Subscribe",
        "links": [
            "a259d31d3ce72f45"
        ],
        "x": 255,
        "y": 500,
        "wires": [
            [
                "8b64b8a49e9c6619"
            ]
        ]
    },
    {
        "id": "a259d31d3ce72f45",
        "type": "link out",
        "z": "0c2a792bad088f5c",
        "name": "StartSubscribe",
        "links": [
            "5334becbb6037392"
        ],
        "x": 715,
        "y": 180,
        "wires": []
    },
    {
        "id": "4c9d58579c9070ad",
        "type": "debug",
        "z": "0c2a792bad088f5c",
        "name": "DebugLent",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 1390,
        "y": 620,
        "wires": []
    },
    {
        "id": "2e1099d1ffbdd8e3",
        "type": "function",
        "z": "0c2a792bad088f5c",
        "name": "GetData",
        "func": "var Proto = \"ns=16;s=Presse_API_Lent_\"\n\n\n// Initialisation de la sortie\n// R√©cup√©ration du message\nvar Data = msg;\n\n// R√©cup√©ration de la valeur\nvar Value = Data.payload.value.value;\n\n// r√©cup√©ration du type\nvar DataType = Data.payload.value.dataType;\n\n// r√©cup√©ration de l'horodatage\nvar DateTimeStr = new Date(Data.payload.sourceTimestamp);\nvar DateTime = DateTimeStr.getTime();\n\n// r√©cup√©ration du nom\nvar Name = Data.addressSpaceItems[0].nodeId.toString().substring(Proto.length);\n\n// Cr√©ation de la variable de sortie\nvar myvar_output = { Name, DateTime, Value };\n\n// Suppression des donn√©es existantes\nmsg = {}\nmsg.payload = {}\n\nmsg.payload.data = myvar_output;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 620,
        "wires": [
            [
                "458b8d3d97a9061a",
                "8b1200c049a0150f",
                "a54bbced27924f8e"
            ]
        ]
    },
    {
        "id": "458b8d3d97a9061a",
        "type": "join",
        "z": "0c2a792bad088f5c",
        "name": "group",
        "mode": "custom",
        "build": "array",
        "property": "payload.data",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "10",
        "count": "120",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1008,
        "y": 620,
        "wires": [
            [
                "8406451c818d3678"
            ]
        ]
    },
    {
        "id": "dc98b1078d798884",
        "type": "function",
        "z": "0c2a792bad088f5c",
        "name": "Erreur Comm Lente",
        "func": "var status = msg.payload.statusCode.name;\n\nif ( status == \"Good\")\n{\n    node.status({fill:\"green\",shape:\"dot\",text:\"Ok\"})\n    return [msg,null];\n}\nelse\n{\n    node.status({fill:\"red\",shape:\"ring\",text:status}) \n    return [null,msg]\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 640,
        "wires": [
            [
                "2e1099d1ffbdd8e3"
            ],
            [
                "6cc01352ec5082f7"
            ]
        ]
    },
    {
        "id": "8406451c818d3678",
        "type": "change",
        "z": "0c2a792bad088f5c",
        "name": "Desc",
        "rules": [
            {
                "t": "set",
                "p": "payload.type",
                "pt": "msg",
                "to": "listen",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1160,
        "y": 620,
        "wires": [
            [
                "4c9d58579c9070ad"
            ]
        ]
    },
    {
        "id": "e2d71fa742690584",
        "type": "inject",
        "z": "0c2a792bad088f5c",
        "name": "Initialization",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 320,
        "y": 720,
        "wires": [
            [
                "178a0f38a15c6166"
            ]
        ]
    },
    {
        "id": "178a0f38a15c6166",
        "type": "change",
        "z": "0c2a792bad088f5c",
        "name": "ConnectionOk",
        "rules": [
            {
                "t": "set",
                "p": "ConnectionLost",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 490,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "1e763669cb5a4ddd",
        "type": "delay",
        "z": "0c2a792bad088f5c",
        "name": "Reconnect Timeout",
        "pauseType": "delay",
        "timeout": "60",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 630,
        "y": 920,
        "wires": [
            [
                "b8398c0ad81501b2"
            ]
        ]
    },
    {
        "id": "6194233c871fcbd1",
        "type": "link out",
        "z": "0c2a792bad088f5c",
        "name": "outConnecting",
        "links": [],
        "x": 715,
        "y": 140,
        "wires": []
    },
    {
        "id": "6cc01352ec5082f7",
        "type": "debug",
        "z": "0c2a792bad088f5c",
        "name": "erreur Comm",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 850,
        "y": 720,
        "wires": []
    },
    {
        "id": "1b59fb50170f2d1e",
        "type": "change",
        "z": "0c2a792bad088f5c",
        "name": "Get Variable List",
        "rules": [
            {
                "t": "set",
                "p": "varNameList",
                "pt": "global",
                "to": "payload.Variables.**.Name",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "varNodeIdList",
                "pt": "global",
                "to": "payload.Variables.**.NodeId",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "varUnitList",
                "pt": "global",
                "to": "payload.Variables.**.Unit",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "varFormatList",
                "pt": "global",
                "to": "payload.Variables.**.Format",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 760,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "fea97993600a60cd",
        "type": "debug",
        "z": "0c2a792bad088f5c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 340,
        "wires": []
    },
    {
        "id": "e9260ff366bc3b84",
        "type": "switch",
        "z": "0c2a792bad088f5c",
        "name": "Client Status",
        "property": "status.text",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "not running",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 430,
        "y": 920,
        "wires": [
            [
                "1e763669cb5a4ddd"
            ]
        ]
    },
    {
        "id": "a7573655cb9210bb",
        "type": "status",
        "z": "0c2a792bad088f5c",
        "name": "Get Client Status",
        "scope": [
            "fd5166420a802040"
        ],
        "x": 260,
        "y": 920,
        "wires": [
            [
                "e9260ff366bc3b84"
            ]
        ]
    },
    {
        "id": "8b1200c049a0150f",
        "type": "debug",
        "z": "0c2a792bad088f5c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 560,
        "wires": []
    },
    {
        "id": "a54bbced27924f8e",
        "type": "link out",
        "z": "0c2a792bad088f5c",
        "name": "link out 4",
        "mode": "link",
        "links": [
            "6c6d44986871e41c"
        ],
        "x": 975,
        "y": 660,
        "wires": []
    },
    {
        "id": "568a8ed541f64901",
        "type": "OPCUA-IIoT-Inject",
        "z": "0c2a792bad088f5c",
        "injectType": "inject",
        "payloadType": "json",
        "topic": "",
        "repeat": "1",
        "crontab": "",
        "once": false,
        "startDelay": "5",
        "name": "",
        "payload": "{ \"interval\": 500, \"queueSize\": 10 }",
        "addressSpaceItems": [
            {
                "name": "CurrentTime",
                "nodeId": "ns=0;i=2258",
                "datatypeName": ""
            }
        ],
        "x": 300,
        "y": 780,
        "wires": [
            [
                "fd5166420a802040"
            ]
        ]
    },
    {
        "id": "fd5166420a802040",
        "type": "OPCUA-IIoT-Read",
        "z": "0c2a792bad088f5c",
        "attributeId": 0,
        "maxAge": 1,
        "depth": 1,
        "connector": "9c48326a43e5b76b",
        "name": "",
        "justValue": true,
        "showStatusActivities": false,
        "showErrors": false,
        "parseStrings": false,
        "historyDays": 1,
        "serverMaxItemsToRead": "",
        "x": 440,
        "y": 780,
        "wires": [
            [
                "b8398c0ad81501b2"
            ]
        ]
    },
    {
        "id": "17d6e2c4181f7642",
        "type": "OPCUA-IIoT-Flex-Connector",
        "z": "0c2a792bad088f5c",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "connector": "9c48326a43e5b76b",
        "x": 980,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "bcb6244be5bf8509",
        "type": "OPCUA-IIoT-Listener",
        "z": "0c2a792bad088f5c",
        "connector": "9c48326a43e5b76b",
        "action": "subscribe",
        "queueSize": 10,
        "name": "",
        "topic": "",
        "justValue": true,
        "useGroupItems": false,
        "showStatusActivities": true,
        "showErrors": true,
        "x": 1140,
        "y": 420,
        "wires": [
            [
                "dc98b1078d798884"
            ]
        ]
    },
    {
        "id": "6c6d44986871e41c",
        "type": "link in",
        "z": "1b375dd4e8b1a2a2",
        "name": "Communication_Presse_75T",
        "links": [
            "a54bbced27924f8e"
        ],
        "x": 565,
        "y": 200,
        "wires": [
            [
                "67e37c094a261f07",
                "444af706ca8fc815",
                "eb2de05defcb2af9",
                "1fe6c175ec710362",
                "dada6c26e87daa2f",
                "d36e370d4d66fbb2",
                "31204a451050ed6f",
                "c7fb6d68058e14a3",
                "c058640ffca767c3"
            ]
        ]
    },
    {
        "id": "67e37c094a261f07",
        "type": "function",
        "z": "1b375dd4e8b1a2a2",
        "name": "002_temp_lunet_1",
        "func": "   \nif (msg.payload.data.Name == \"002_temp_lunet_1\") {\n    msg.payload = (msg.payload.data.Value)\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 200,
        "wires": [
            [
                "ceabb5df86774937",
                "2704662668fba5f2"
            ]
        ]
    },
    {
        "id": "ceabb5df86774937",
        "type": "ui_chart",
        "z": "1b375dd4e8b1a2a2",
        "name": "002_temp_lunet_1",
        "group": "7b473d4078040ec5",
        "order": 3,
        "width": 16,
        "height": 10,
        "label": "temp_lunet_1 (¬∞C)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "400",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1320,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "444af706ca8fc815",
        "type": "function",
        "z": "1b375dd4e8b1a2a2",
        "name": "003_temp_lunet_2",
        "func": "   \nif (msg.payload.data.Name == \"003_temp_lunet_2\") {\n    msg.payload = (msg.payload.data.Value)\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 360,
        "wires": [
            [
                "19b771a6f801b185",
                "25e9a86ea1f7e633"
            ]
        ]
    },
    {
        "id": "19b771a6f801b185",
        "type": "ui_chart",
        "z": "1b375dd4e8b1a2a2",
        "name": "003_temp_lunet_2",
        "group": "7b473d4078040ec5",
        "order": 5,
        "width": 16,
        "height": 11,
        "label": "temp_lunet_2 (¬∞C)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "400",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1320,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "eb2de05defcb2af9",
        "type": "function",
        "z": "1b375dd4e8b1a2a2",
        "name": "004_ener_four_p1",
        "func": "   \nif (msg.payload.data.Name == \"004_ener_four_p1\") {\n    msg.payload = (msg.payload.data.Value)\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 520,
        "wires": [
            [
                "64c5f7818203b16f",
                "c7c5bfaf00824e41"
            ]
        ]
    },
    {
        "id": "1fe6c175ec710362",
        "type": "function",
        "z": "1b375dd4e8b1a2a2",
        "name": "005_ener_four_p2",
        "func": "   \nif (msg.payload.data.Name == \"005_ener_four_p2\") {\n    msg.payload = (msg.payload.data.Value)\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 680,
        "wires": [
            [
                "42b37e8ecfb08359",
                "d25d1d54b0ff7d6a"
            ]
        ]
    },
    {
        "id": "dada6c26e87daa2f",
        "type": "function",
        "z": "1b375dd4e8b1a2a2",
        "name": "006_ener_four_p3",
        "func": "   \nif (msg.payload.data.Name == \"006_ener_four_p3\") {\n    msg.payload = (msg.payload.data.Value)\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 840,
        "wires": [
            [
                "4f9922e9ebb9474f",
                "337240a2ccc63c55"
            ]
        ]
    },
    {
        "id": "2704662668fba5f2",
        "type": "ui_gauge",
        "z": "1b375dd4e8b1a2a2",
        "name": "002_temp_lunet_1",
        "group": "7b473d4078040ec5",
        "order": 4,
        "width": 14,
        "height": 10,
        "gtype": "gage",
        "title": "temp_lunet_1 (¬∞C)",
        "label": "¬∞C",
        "format": "{{value}}",
        "min": 0,
        "max": "200",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "60",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 1320,
        "y": 240,
        "wires": []
    },
    {
        "id": "25e9a86ea1f7e633",
        "type": "ui_gauge",
        "z": "1b375dd4e8b1a2a2",
        "name": "003_temp_lunet_2",
        "group": "7b473d4078040ec5",
        "order": 6,
        "width": 14,
        "height": 11,
        "gtype": "gage",
        "title": "temp_lunet_2 (¬∞C)",
        "label": "¬∞C",
        "format": "{{value}}",
        "min": 0,
        "max": "200",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "100",
        "seg2": "150",
        "diff": false,
        "className": "",
        "x": 1320,
        "y": 420,
        "wires": []
    },
    {
        "id": "64c5f7818203b16f",
        "type": "ui_chart",
        "z": "1b375dd4e8b1a2a2",
        "name": "004_ener_four_p1",
        "group": "7b473d4078040ec5",
        "order": 7,
        "width": 16,
        "height": 11,
        "label": "ener_four_p1 (kW)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1320,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "c7c5bfaf00824e41",
        "type": "ui_gauge",
        "z": "1b375dd4e8b1a2a2",
        "name": "004_ener_four_p1",
        "group": "7b473d4078040ec5",
        "order": 8,
        "width": 14,
        "height": 11,
        "gtype": "gage",
        "title": "ener_four_p1 (kW)",
        "label": "kW",
        "format": "{{value}}",
        "min": 0,
        "max": "200",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "100",
        "seg2": "150",
        "diff": false,
        "className": "",
        "x": 1320,
        "y": 580,
        "wires": []
    },
    {
        "id": "42b37e8ecfb08359",
        "type": "ui_chart",
        "z": "1b375dd4e8b1a2a2",
        "name": "005_ener_four_p2",
        "group": "7b473d4078040ec5",
        "order": 9,
        "width": 16,
        "height": 11,
        "label": "ener_four_p2 (kW)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1320,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "d25d1d54b0ff7d6a",
        "type": "ui_gauge",
        "z": "1b375dd4e8b1a2a2",
        "name": "005_ener_four_p2",
        "group": "7b473d4078040ec5",
        "order": 10,
        "width": 14,
        "height": 11,
        "gtype": "gage",
        "title": "ener_four_p2 (kW)",
        "label": "kW",
        "format": "{{value}}",
        "min": 0,
        "max": "200",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "100",
        "seg2": "150",
        "diff": false,
        "className": "",
        "x": 1320,
        "y": 740,
        "wires": []
    },
    {
        "id": "4f9922e9ebb9474f",
        "type": "ui_chart",
        "z": "1b375dd4e8b1a2a2",
        "name": "006_ener_four_p3",
        "group": "7b473d4078040ec5",
        "order": 11,
        "width": 16,
        "height": 12,
        "label": "Energie Four P3 (kW)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1310,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "337240a2ccc63c55",
        "type": "ui_gauge",
        "z": "1b375dd4e8b1a2a2",
        "name": "006_ener_four_p3",
        "group": "7b473d4078040ec5",
        "order": 12,
        "width": 14,
        "height": 12,
        "gtype": "gage",
        "title": "Energie Four P3 (kW)",
        "label": "kW",
        "format": "{{value}}",
        "min": 0,
        "max": "200",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "100",
        "seg2": "150",
        "diff": false,
        "className": "",
        "x": 1310,
        "y": 880,
        "wires": []
    },
    {
        "id": "d36e370d4d66fbb2",
        "type": "function",
        "z": "1b375dd4e8b1a2a2",
        "name": "001_temp_huile",
        "func": "   \nif (msg.payload.data.Name == \"001_temp_huile\") {\n    msg.payload = (msg.payload.data.Value)\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 100,
        "wires": [
            [
                "42525b04c9837fcf",
                "64ca24d2f986a7bf"
            ]
        ]
    },
    {
        "id": "64ca24d2f986a7bf",
        "type": "ui_chart",
        "z": "1b375dd4e8b1a2a2",
        "name": "001_temp_huile",
        "group": "7b473d4078040ec5",
        "order": 1,
        "width": 16,
        "height": 9,
        "label": "temp_huile (¬∞C)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "400",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1300,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "42525b04c9837fcf",
        "type": "ui_gauge",
        "z": "1b375dd4e8b1a2a2",
        "name": "001_temp_huile",
        "group": "7b473d4078040ec5",
        "order": 2,
        "width": 14,
        "height": 9,
        "gtype": "gage",
        "title": "temp_huile (¬∞C)",
        "label": "¬∞C",
        "format": "{{value}}",
        "min": 0,
        "max": "120",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "60",
        "seg2": "90",
        "diff": false,
        "className": "",
        "x": 1300,
        "y": 80,
        "wires": []
    },
    {
        "id": "31204a451050ed6f",
        "type": "function",
        "z": "1b375dd4e8b1a2a2",
        "name": "007_temp_moule_sup",
        "func": "   \nif (msg.payload.data.Name == \"007_temp_moule_sup\") {\n    msg.payload = (msg.payload.data.Value)\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 960,
        "wires": [
            [
                "9f766f34b45435d6",
                "dd3548668a7d00e1"
            ]
        ]
    },
    {
        "id": "9f766f34b45435d6",
        "type": "ui_chart",
        "z": "1b375dd4e8b1a2a2",
        "name": "007_temp_moule_sup",
        "group": "7b473d4078040ec5",
        "order": 13,
        "width": 16,
        "height": 11,
        "label": "temp_moule_sup (kW)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1330,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "dd3548668a7d00e1",
        "type": "ui_gauge",
        "z": "1b375dd4e8b1a2a2",
        "name": "007_temp_moule_sup",
        "group": "7b473d4078040ec5",
        "order": 14,
        "width": 14,
        "height": 11,
        "gtype": "gage",
        "title": "temp_moule_sup (¬∞C)",
        "label": "¬∞C",
        "format": "{{value}}",
        "min": 0,
        "max": "200",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "100",
        "seg2": "150",
        "diff": false,
        "className": "",
        "x": 1330,
        "y": 1000,
        "wires": []
    },
    {
        "id": "c7fb6d68058e14a3",
        "type": "function",
        "z": "1b375dd4e8b1a2a2",
        "name": "008_temp_moule_inf",
        "func": "   \nif (msg.payload.data.Name == \"008_temp_moule_inf\") {\n    msg.payload = (msg.payload.data.Value)\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 1080,
        "wires": [
            [
                "ae69f3793084323d",
                "64cccd1f839e6229"
            ]
        ]
    },
    {
        "id": "ae69f3793084323d",
        "type": "ui_chart",
        "z": "1b375dd4e8b1a2a2",
        "name": "008_temp_moule_inf",
        "group": "7b473d4078040ec5",
        "order": 15,
        "width": 16,
        "height": 11,
        "label": "temp_moule_inf (kW)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1330,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "64cccd1f839e6229",
        "type": "ui_gauge",
        "z": "1b375dd4e8b1a2a2",
        "name": "008_temp_moule_inf",
        "group": "7b473d4078040ec5",
        "order": 16,
        "width": 14,
        "height": 11,
        "gtype": "gage",
        "title": "temp_moule_inf (¬∞C)",
        "label": "¬∞C",
        "format": "{{value}}",
        "min": 0,
        "max": "200",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "100",
        "seg2": "150",
        "diff": false,
        "className": "",
        "x": 1330,
        "y": 1120,
        "wires": []
    },
    {
        "id": "c058640ffca767c3",
        "type": "function",
        "z": "1b375dd4e8b1a2a2",
        "name": "009_temp_amb_four",
        "func": "   \nif (msg.payload.data.Name == \"009_temp_amb_four\") {\n    msg.payload = (msg.payload.data.Value)\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 1200,
        "wires": [
            [
                "92f11b7dd84b1a7f",
                "896bf0fb4f2280a4"
            ]
        ]
    },
    {
        "id": "92f11b7dd84b1a7f",
        "type": "ui_chart",
        "z": "1b375dd4e8b1a2a2",
        "name": "009_temp_amb_four",
        "group": "7b473d4078040ec5",
        "order": 17,
        "width": 16,
        "height": 11,
        "label": "temp_amb_four (kW)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1330,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "896bf0fb4f2280a4",
        "type": "ui_gauge",
        "z": "1b375dd4e8b1a2a2",
        "name": "009_temp_amb_four",
        "group": "7b473d4078040ec5",
        "order": 18,
        "width": 14,
        "height": 11,
        "gtype": "gage",
        "title": "temp_amb_four (¬∞C)",
        "label": "¬∞C",
        "format": "{{value}}",
        "min": 0,
        "max": "200",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "100",
        "seg2": "150",
        "diff": false,
        "className": "",
        "x": 1330,
        "y": 1240,
        "wires": []
    },
    {
        "id": "b98a665b392ee549",
        "type": "function",
        "z": "f7d535f0f01c4dee",
        "name": "Subscribe",
        "func": "//Get global flag\nvar bConnectLost = global.get('ConnectionLost') || false;\n\n//Default settings\nvar injectMssge = {};\ninjectMssge.topic=\"\";\ninjectMssge.nodetype=\"inject\";\ninjectMssge.injectType=\"listen\";\ninjectMssge.addressSpaceItems=[];\n//injectMssge.payload=1000;\nvar optionsParam = {\n            \"requestedPublishingInterval\": 1000,\n            //\"requestedLifetimeCount\": 99999,\n            \"requestedLifetimeCount\": 10,\n            \"requestedMaxKeepAliveCount\": 5,\n            \"maxNotificationsPerPublish\": 10,\n            \"publishingEnabled\": true,\n            \"priority\": 10,\n            \"clientName\":\"nr-iot\",\n      };\n\ninjectMssge.payload={ \"interval\": 6000, \"queueSize\": 10, \"options\":optionsParam };\n\n//Specific case if the configuration contains only one variable\nif(Array.isArray(msg.varNameList) === false)\n {\n    injectMssge.addressSpaceItems.push({\"name\": msg.varNameList, \"nodeId\":  msg.varNodeIdList}); \n }\n else\n {\n    //Add variables\n    for(var iIndVar=0;iIndVar<msg.varNameList.length; iIndVar++)\n    {\n      injectMssge.addressSpaceItems.push( {\"name\": msg.varNameList[iIndVar], \"nodeId\":  msg.varNodeIdList[iIndVar]});\n    }\n }\n\n if(bConnectLost === false)\n {\n   console.log(\"---- FIRST SUBSCRIBE ------\")\n   SendSubscribeMessage();\n }\n else\n {\n    //In case of connection lost, send another subscription\n    console.log(\"---- CONNECT LOST - RESUBSCRIBE  ------\")\n    SendSubscribeMessage();\n    setTimeout(SendSubscribeMessage, 5000);\n  }\n  \n  //Send inject message\n  function SendSubscribeMessage()\n  {\n    node.send(injectMssge);\n  }\n  \n  ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 400,
        "wires": [
            [
                "c14ed30f7f05352e"
            ]
        ]
    },
    {
        "id": "26898e6f9aa9ec02",
        "type": "file in",
        "z": "f7d535f0f01c4dee",
        "name": "Read Configuration",
        "filename": "C:\\Users\\2108529\\.node-red\\ConfXML\\node_red_configuration_Lent_CMS2",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "allProps": false,
        "x": 510,
        "y": 480,
        "wires": [
            [
                "70250922c2245c51"
            ]
        ]
    },
    {
        "id": "70250922c2245c51",
        "type": "xml",
        "z": "f7d535f0f01c4dee",
        "name": "",
        "property": "payload",
        "attr": "",
        "chr": "",
        "x": 670,
        "y": 480,
        "wires": [
            [
                "2ef98d50eeae0d5f",
                "d294069f95bc1150"
            ]
        ]
    },
    {
        "id": "2ef98d50eeae0d5f",
        "type": "change",
        "z": "f7d535f0f01c4dee",
        "name": "Get Variable List",
        "rules": [
            {
                "t": "set",
                "p": "varNameList",
                "pt": "msg",
                "to": "payload.Variables.**.Name",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "varNodeIdList",
                "pt": "msg",
                "to": "payload.Variables.**.NodeId",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "varUnitList",
                "pt": "msg",
                "to": "payload.Variables.**.Unit",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "varFormatList",
                "pt": "msg",
                "to": "payload.Variables.**.Format",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 840,
        "y": 480,
        "wires": [
            [
                "b98a665b392ee549"
            ]
        ]
    },
    {
        "id": "a199c6e7d674e8b3",
        "type": "comment",
        "z": "f7d535f0f01c4dee",
        "name": "Load Configuration and subscribe",
        "info": "",
        "x": 430,
        "y": 340,
        "wires": []
    },
    {
        "id": "948cc0ca7c7c806c",
        "type": "comment",
        "z": "f7d535f0f01c4dee",
        "name": "Timeout Management",
        "info": "",
        "x": 390,
        "y": 620,
        "wires": []
    },
    {
        "id": "c3657ec354bcdff1",
        "type": "status",
        "z": "f7d535f0f01c4dee",
        "name": "Get Client Status",
        "scope": [
            "c14ed30f7f05352e"
        ],
        "x": 400,
        "y": 180,
        "wires": [
            [
                "b9b33a5917b697be",
                "19a57bb268138b70"
            ]
        ]
    },
    {
        "id": "b9b33a5917b697be",
        "type": "switch",
        "z": "f7d535f0f01c4dee",
        "name": "Client Status",
        "property": "status.text",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "connecting",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "active",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "started",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "listening",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "terminated",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 650,
        "y": 200,
        "wires": [
            [
                "17899589fd3d0f6e"
            ],
            [
                "8f81ba7da699faa0"
            ],
            [],
            [
                "8c32eb0ce5403fcd"
            ],
            [
                "5bbbf4fcf643617f"
            ]
        ]
    },
    {
        "id": "f09f47b880a62127",
        "type": "trigger",
        "z": "f7d535f0f01c4dee",
        "name": "Timeout ConnectionLost",
        "op1": "",
        "op2": "{\"endpoint\":\"opc.tcp://localhost:59300/Prosyst/UnifiedDataCollector\",\"keepSessionAlive\":false,\"showErrors\":true,\"defaultSecureTokenLifetime\":360000,\"endpointMustExist\":false,\"autoSelectRightEndpoint\":false,\"strategyMaxRetry\":10000}",
        "op1type": "nul",
        "op2type": "json",
        "duration": "5",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 740,
        "y": 760,
        "wires": [
            [
                "cb4b2eb656666f1c"
            ]
        ]
    },
    {
        "id": "5bbbf4fcf643617f",
        "type": "change",
        "z": "f7d535f0f01c4dee",
        "name": "ConnectionLost",
        "rules": [
            {
                "t": "set",
                "p": "ConnectionLost",
                "pt": "global",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 860,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "6a854992db1d56c8",
        "type": "comment",
        "z": "f7d535f0f01c4dee",
        "name": "Subscription Management",
        "info": "",
        "x": 390,
        "y": 120,
        "wires": []
    },
    {
        "id": "8c32eb0ce5403fcd",
        "type": "change",
        "z": "f7d535f0f01c4dee",
        "name": "ConnectionOk",
        "rules": [
            {
                "t": "set",
                "p": "ConnectionLost",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 860,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "066a61f63e0a0a70",
        "type": "link in",
        "z": "f7d535f0f01c4dee",
        "name": "Subscribe",
        "links": [
            "8f81ba7da699faa0"
        ],
        "x": 335,
        "y": 480,
        "wires": [
            [
                "26898e6f9aa9ec02"
            ]
        ]
    },
    {
        "id": "8f81ba7da699faa0",
        "type": "link out",
        "z": "f7d535f0f01c4dee",
        "name": "StartSubscribe",
        "links": [
            "066a61f63e0a0a70"
        ],
        "x": 795,
        "y": 160,
        "wires": []
    },
    {
        "id": "89d506c765400a87",
        "type": "debug",
        "z": "f7d535f0f01c4dee",
        "name": "DebugLent",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 1470,
        "y": 600,
        "wires": []
    },
    {
        "id": "2088f824da1c0d3b",
        "type": "function",
        "z": "f7d535f0f01c4dee",
        "name": "GetData",
        "func": "var Proto = \"ns=16;s=Presse_API_Lent_\"\n\n\n// Initialisation de la sortie\n// R√©cup√©ration du message\nvar Data = msg;\n\n// R√©cup√©ration de la valeur\nvar Value = Data.payload.value.value;\n\n// r√©cup√©ration du type\nvar DataType = Data.payload.value.dataType;\n\n// r√©cup√©ration de l'horodatage\nvar DateTimeStr = new Date(Data.payload.sourceTimestamp);\nvar DateTime = DateTimeStr.getTime();\n\n// r√©cup√©ration du nom\nvar Name = Data.addressSpaceItems[0].nodeId.toString().substring(Proto.length);\n\n// Cr√©ation de la variable de sortie\nvar myvar_output = { Name, DateTime, Value };\n\n// Suppression des donn√©es existantes\nmsg = {}\nmsg.payload = {}\n\nmsg.payload.data = myvar_output;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 600,
        "wires": [
            [
                "015b7e70cdb4bf72",
                "e030390846e4060e",
                "1b48a37dfdf561bd"
            ]
        ]
    },
    {
        "id": "015b7e70cdb4bf72",
        "type": "join",
        "z": "f7d535f0f01c4dee",
        "name": "group",
        "mode": "custom",
        "build": "array",
        "property": "payload.data",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "10",
        "count": "120",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1088,
        "y": 600,
        "wires": [
            [
                "bc5f938dbf3d0126"
            ]
        ]
    },
    {
        "id": "a62680c29c28b74a",
        "type": "function",
        "z": "f7d535f0f01c4dee",
        "name": "Erreur Comm Lente",
        "func": "var status = msg.payload.statusCode.name;\n\nif ( status == \"Good\")\n{\n    node.status({fill:\"green\",shape:\"dot\",text:\"Ok\"})\n    return [msg,null];\n}\nelse\n{\n    node.status({fill:\"red\",shape:\"ring\",text:status}) \n    return [null,msg]\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 620,
        "wires": [
            [
                "2088f824da1c0d3b"
            ],
            [
                "d3497382e72e3ee1"
            ]
        ]
    },
    {
        "id": "bc5f938dbf3d0126",
        "type": "change",
        "z": "f7d535f0f01c4dee",
        "name": "Desc",
        "rules": [
            {
                "t": "set",
                "p": "payload.type",
                "pt": "msg",
                "to": "listen",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1240,
        "y": 600,
        "wires": [
            [
                "89d506c765400a87"
            ]
        ]
    },
    {
        "id": "5445eab0c52a7c1b",
        "type": "inject",
        "z": "f7d535f0f01c4dee",
        "name": "Initialization",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 400,
        "y": 700,
        "wires": [
            [
                "0803387a173f4165"
            ]
        ]
    },
    {
        "id": "0803387a173f4165",
        "type": "change",
        "z": "f7d535f0f01c4dee",
        "name": "ConnectionOk",
        "rules": [
            {
                "t": "set",
                "p": "ConnectionLost",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "0266692ba41230a6",
        "type": "delay",
        "z": "f7d535f0f01c4dee",
        "name": "Reconnect Timeout",
        "pauseType": "delay",
        "timeout": "60",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 710,
        "y": 900,
        "wires": [
            [
                "f09f47b880a62127"
            ]
        ]
    },
    {
        "id": "17899589fd3d0f6e",
        "type": "link out",
        "z": "f7d535f0f01c4dee",
        "name": "outConnecting",
        "links": [],
        "x": 795,
        "y": 120,
        "wires": []
    },
    {
        "id": "d3497382e72e3ee1",
        "type": "debug",
        "z": "f7d535f0f01c4dee",
        "name": "erreur Comm",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 930,
        "y": 700,
        "wires": []
    },
    {
        "id": "d294069f95bc1150",
        "type": "change",
        "z": "f7d535f0f01c4dee",
        "name": "Get Variable List",
        "rules": [
            {
                "t": "set",
                "p": "varNameList",
                "pt": "global",
                "to": "payload.Variables.**.Name",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "varNodeIdList",
                "pt": "global",
                "to": "payload.Variables.**.NodeId",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "varUnitList",
                "pt": "global",
                "to": "payload.Variables.**.Unit",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "varFormatList",
                "pt": "global",
                "to": "payload.Variables.**.Format",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 840,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "19a57bb268138b70",
        "type": "debug",
        "z": "f7d535f0f01c4dee",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 320,
        "wires": []
    },
    {
        "id": "2102cfb9af1f267a",
        "type": "switch",
        "z": "f7d535f0f01c4dee",
        "name": "Client Status",
        "property": "status.text",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "not running",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 510,
        "y": 900,
        "wires": [
            [
                "0266692ba41230a6"
            ]
        ]
    },
    {
        "id": "4a976c0eb07fe5fc",
        "type": "status",
        "z": "f7d535f0f01c4dee",
        "name": "Get Client Status",
        "scope": [
            "8b7437795287e89a"
        ],
        "x": 340,
        "y": 900,
        "wires": [
            [
                "2102cfb9af1f267a"
            ]
        ]
    },
    {
        "id": "e030390846e4060e",
        "type": "debug",
        "z": "f7d535f0f01c4dee",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 540,
        "wires": []
    },
    {
        "id": "1b48a37dfdf561bd",
        "type": "link out",
        "z": "f7d535f0f01c4dee",
        "name": "link out 5",
        "mode": "link",
        "links": [
            "ee1c4ef303cb5e8b"
        ],
        "x": 1055,
        "y": 640,
        "wires": []
    },
    {
        "id": "0878bd49d6f7f107",
        "type": "OPCUA-IIoT-Inject",
        "z": "f7d535f0f01c4dee",
        "injectType": "inject",
        "payloadType": "json",
        "topic": "",
        "repeat": "1",
        "crontab": "",
        "once": false,
        "startDelay": "5",
        "name": "",
        "payload": "{ \"interval\": 500, \"queueSize\": 10 }",
        "addressSpaceItems": [
            {
                "name": "CurrentTime",
                "nodeId": "ns=0;i=2258",
                "datatypeName": ""
            }
        ],
        "x": 380,
        "y": 760,
        "wires": [
            [
                "8b7437795287e89a"
            ]
        ]
    },
    {
        "id": "8b7437795287e89a",
        "type": "OPCUA-IIoT-Read",
        "z": "f7d535f0f01c4dee",
        "attributeId": 0,
        "maxAge": 1,
        "depth": 1,
        "connector": "4039d7da.be9428",
        "name": "",
        "justValue": true,
        "showStatusActivities": false,
        "showErrors": false,
        "parseStrings": false,
        "historyDays": 1,
        "x": 520,
        "y": 760,
        "wires": [
            [
                "f09f47b880a62127"
            ]
        ]
    },
    {
        "id": "cb4b2eb656666f1c",
        "type": "OPCUA-IIoT-Flex-Connector",
        "z": "f7d535f0f01c4dee",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "connector": "4039d7da.be9428",
        "x": 1060,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "c14ed30f7f05352e",
        "type": "OPCUA-IIoT-Listener",
        "z": "f7d535f0f01c4dee",
        "connector": "4039d7da.be9428",
        "action": "subscribe",
        "queueSize": 10,
        "name": "",
        "topic": "",
        "justValue": true,
        "useGroupItems": false,
        "showStatusActivities": true,
        "showErrors": true,
        "x": 1200,
        "y": 400,
        "wires": [
            [
                "a62680c29c28b74a"
            ]
        ]
    },
    {
        "id": "ee1c4ef303cb5e8b",
        "type": "link in",
        "z": "f6bd567ff549a508",
        "name": "Communication_Presse_75T",
        "links": [
            "1b48a37dfdf561bd"
        ],
        "x": 245,
        "y": 160,
        "wires": [
            [
                "7a8fcb81d24af8e8",
                "c678a9c5cedee508"
            ]
        ]
    },
    {
        "id": "7a8fcb81d24af8e8",
        "type": "function",
        "z": "f6bd567ff549a508",
        "name": "002_Fep_Fin_Cyc",
        "func": "   \nif (msg.payload.data.Name == \"002_Fep_Fin_Cyc\") {\n    msg.payload = (msg.payload.data.Value)\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 320,
        "wires": [
            [
                "01dd5c0613ba71ba",
                "9c2f5adb32e8612e"
            ]
        ]
    },
    {
        "id": "01dd5c0613ba71ba",
        "type": "ui_chart",
        "z": "f6bd567ff549a508",
        "name": "Depart-Fin Cycle",
        "group": "2d112688535f1e19",
        "order": 3,
        "width": 16,
        "height": 11,
        "label": "Depart-Fin Cycle",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "400",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1000,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "c678a9c5cedee508",
        "type": "function",
        "z": "f6bd567ff549a508",
        "name": "003_Rot_Broche",
        "func": "  \nif (msg.payload.data.Name == \"003_Rot_Broche\") {\n    msg.payload = (msg.payload.data.Value)\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 480,
        "wires": [
            [
                "83311f37bbc99b8c",
                "fe22b6c663a3d3cd"
            ]
        ]
    },
    {
        "id": "9c2f5adb32e8612e",
        "type": "ui_gauge",
        "z": "f6bd567ff549a508",
        "name": "Depart-Fin Cycle",
        "group": "2d112688535f1e19",
        "order": 4,
        "width": 14,
        "height": 11,
        "gtype": "gage",
        "title": "Depart-Fin Cycle",
        "label": "kW",
        "format": "{{value}}",
        "min": 0,
        "max": "15",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "60",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 1000,
        "y": 380,
        "wires": []
    },
    {
        "id": "83311f37bbc99b8c",
        "type": "ui_chart",
        "z": "f6bd567ff549a508",
        "name": "Rotation broche",
        "group": "2d112688535f1e19",
        "order": 5,
        "width": 16,
        "height": 12,
        "label": "Rotation broche",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 990,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "fe22b6c663a3d3cd",
        "type": "ui_gauge",
        "z": "f6bd567ff549a508",
        "name": "Rotation broche",
        "group": "2d112688535f1e19",
        "order": 6,
        "width": 14,
        "height": 12,
        "gtype": "gage",
        "title": "Rotation broche",
        "label": "kW",
        "format": "{{value}}",
        "min": 0,
        "max": "15",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "60",
        "seg2": "70",
        "diff": false,
        "className": "",
        "x": 990,
        "y": 540,
        "wires": []
    },
    {
        "id": "fba2de22e361361f",
        "type": "inject",
        "z": "6af72356b98b0d5b",
        "name": "test inject csv",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "temperatureSensor01,99.9 ¬∞C,float,2025-04-24T15:55:00Z",
        "payloadType": "str",
        "x": 310,
        "y": 240,
        "wires": [
            [
                "3cba6a0e87b9ea76"
            ]
        ]
    },
    {
        "id": "3cba6a0e87b9ea76",
        "type": "file",
        "z": "6af72356b98b0d5b",
        "name": "Ecriture_fic_test",
        "filename": "C:\\Users\\2108529\\.node-red\\Capture_data\\test_data.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 620,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "70b8bb29099ef8bb",
        "type": "function",
        "z": "23dd4c85940a32b9",
        "name": "Subscribe",
        "func": "//Get global flag\nvar bConnectLost = global.get('ConnectionLost') || false;\n\n//Default settings\nvar injectMssge = {};\ninjectMssge.topic=\"\";\ninjectMssge.nodetype=\"inject\";\ninjectMssge.injectType=\"listen\";\ninjectMssge.addressSpaceItems=[];\n//injectMssge.payload=1000;\nvar optionsParam = {\n            \"requestedPublishingInterval\": 1000,\n            //\"requestedLifetimeCount\": 99999,\n            \"requestedLifetimeCount\": 10,\n            \"requestedMaxKeepAliveCount\": 5,\n            \"maxNotificationsPerPublish\": 10,\n            \"publishingEnabled\": true,\n            \"priority\": 10,\n            \"clientName\":\"nr-iot\",\n      };\n\ninjectMssge.payload={ \"interval\": 6000, \"queueSize\": 10, \"options\":optionsParam };\n\n//Specific case if the configuration contains only one variable\nif(Array.isArray(msg.varNameList) === false)\n {\n    injectMssge.addressSpaceItems.push({\"name\": msg.varNameList, \"nodeId\":  msg.varNodeIdList}); \n }\n else\n {\n    //Add variables\n    for(var iIndVar=0;iIndVar<msg.varNameList.length; iIndVar++)\n    {\n      injectMssge.addressSpaceItems.push( {\"name\": msg.varNameList[iIndVar], \"nodeId\":  msg.varNodeIdList[iIndVar]});\n    }\n }\n\n if(bConnectLost === false)\n {\n   console.log(\"---- FIRST SUBSCRIBE ------\")\n   SendSubscribeMessage();\n }\n else\n {\n    //In case of connection lost, send another subscription\n    console.log(\"---- CONNECT LOST - RESUBSCRIBE  ------\")\n    SendSubscribeMessage();\n    setTimeout(SendSubscribeMessage, 5000);\n  }\n  \n  //Send inject message\n  function SendSubscribeMessage()\n  {\n    node.send(injectMssge);\n  }\n  \n  ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 400,
        "wires": [
            [
                "f25bf1851cb73b38"
            ]
        ]
    },
    {
        "id": "24c2f617afd5569c",
        "type": "file in",
        "z": "23dd4c85940a32b9",
        "name": "Read Configuration",
        "filename": "C:\\Users\\2108529\\.node-red\\ConfXML\\node_red_configuration_TARBES_Eurotherm.xml",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "allProps": false,
        "x": 330,
        "y": 480,
        "wires": [
            [
                "ffa235f4f7bf88b0"
            ]
        ]
    },
    {
        "id": "ffa235f4f7bf88b0",
        "type": "xml",
        "z": "23dd4c85940a32b9",
        "name": "",
        "property": "payload",
        "attr": "",
        "chr": "",
        "x": 490,
        "y": 480,
        "wires": [
            [
                "74f453fb485cf315",
                "9d1339be36a1a7c2"
            ]
        ]
    },
    {
        "id": "74f453fb485cf315",
        "type": "change",
        "z": "23dd4c85940a32b9",
        "name": "Get Variable List",
        "rules": [
            {
                "t": "set",
                "p": "varNameList",
                "pt": "msg",
                "to": "payload.Variables.**.Name",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "varNodeIdList",
                "pt": "msg",
                "to": "payload.Variables.**.NodeId",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "varUnitList",
                "pt": "msg",
                "to": "payload.Variables.**.Unit",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "varFormatList",
                "pt": "msg",
                "to": "payload.Variables.**.Format",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 480,
        "wires": [
            [
                "70b8bb29099ef8bb"
            ]
        ]
    },
    {
        "id": "21d664fea4d8e09f",
        "type": "comment",
        "z": "23dd4c85940a32b9",
        "name": "Load Configuration and subscribe",
        "info": "",
        "x": 250,
        "y": 340,
        "wires": []
    },
    {
        "id": "5594ccb02d3108e9",
        "type": "comment",
        "z": "23dd4c85940a32b9",
        "name": "Timeout Management",
        "info": "",
        "x": 210,
        "y": 620,
        "wires": []
    },
    {
        "id": "53f06379175f2183",
        "type": "status",
        "z": "23dd4c85940a32b9",
        "name": "Get Client Status",
        "scope": [
            "f25bf1851cb73b38"
        ],
        "x": 220,
        "y": 180,
        "wires": [
            [
                "e263577cbce770c5",
                "4dcf1cabb718798f"
            ]
        ]
    },
    {
        "id": "e263577cbce770c5",
        "type": "switch",
        "z": "23dd4c85940a32b9",
        "name": "Client Status",
        "property": "status.text",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "connecting",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "active",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "started",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "listening",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "terminated",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 470,
        "y": 200,
        "wires": [
            [
                "6a9a74551084f180"
            ],
            [
                "ab70398de9103cb3"
            ],
            [],
            [
                "87446aed20839346"
            ],
            [
                "c8b3b28ef9cda6a3"
            ]
        ]
    },
    {
        "id": "c56aab01c1643d79",
        "type": "trigger",
        "z": "23dd4c85940a32b9",
        "name": "Timeout ConnectionLost",
        "op1": "",
        "op2": "{\"endpoint\":\"opc.tcp://localhost:59300/Prosyst/UnifiedDataCollector\",\"keepSessionAlive\":false,\"showErrors\":true,\"defaultSecureTokenLifetime\":360000,\"endpointMustExist\":false,\"autoSelectRightEndpoint\":false,\"strategyMaxRetry\":10000}",
        "op1type": "nul",
        "op2type": "json",
        "duration": "5",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 560,
        "y": 760,
        "wires": [
            [
                "e36a49d1673979cc"
            ]
        ]
    },
    {
        "id": "c8b3b28ef9cda6a3",
        "type": "change",
        "z": "23dd4c85940a32b9",
        "name": "ConnectionLost",
        "rules": [
            {
                "t": "set",
                "p": "ConnectionLost",
                "pt": "global",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 680,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "e05404e3b204f0d8",
        "type": "comment",
        "z": "23dd4c85940a32b9",
        "name": "Subscription Management",
        "info": "",
        "x": 210,
        "y": 120,
        "wires": []
    },
    {
        "id": "87446aed20839346",
        "type": "change",
        "z": "23dd4c85940a32b9",
        "name": "ConnectionOk",
        "rules": [
            {
                "t": "set",
                "p": "ConnectionLost",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 680,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "68c6663eb69a779d",
        "type": "link in",
        "z": "23dd4c85940a32b9",
        "name": "Subscribe",
        "links": [
            "ab70398de9103cb3"
        ],
        "x": 155,
        "y": 480,
        "wires": [
            [
                "24c2f617afd5569c"
            ]
        ]
    },
    {
        "id": "ab70398de9103cb3",
        "type": "link out",
        "z": "23dd4c85940a32b9",
        "name": "StartSubscribe",
        "links": [
            "68c6663eb69a779d"
        ],
        "x": 615,
        "y": 160,
        "wires": []
    },
    {
        "id": "bfa3d40bb4e6a2fa",
        "type": "debug",
        "z": "23dd4c85940a32b9",
        "name": "DebugLent",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 1290,
        "y": 600,
        "wires": []
    },
    {
        "id": "b478808013576155",
        "type": "function",
        "z": "23dd4c85940a32b9",
        "name": "GetData",
        "func": "var Proto = \"ns=16;s=uDC_TARBES_NANODAC_\"\n\n\n// Initialisation de la sortie\n// R√©cup√©ration du message\nvar Data = msg;\n\n// R√©cup√©ration de la valeur\nvar Value = Data.payload.value.value;\n\n// r√©cup√©ration du type\nvar DataType = Data.payload.value.dataType;\n\n// r√©cup√©ration de l'horodatage\nvar DateTimeStr = new Date(Data.payload.sourceTimestamp);\nvar DateTime = DateTimeStr.getTime();\n\n// r√©cup√©ration du nom\nvar Name = Data.addressSpaceItems[0].nodeId.toString().substring(Proto.length);\n\n// Cr√©ation de la variable de sortie\nvar myvar_output = { Name, DateTime, Value };\n\n// Suppression des donn√©es existantes\nmsg = {}\nmsg.payload = {}\n\nmsg.payload.data = myvar_output;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 600,
        "wires": [
            [
                "4998d8d5f3cef2c4",
                "a17696f594c94fad",
                "dd4ba2f657ccab4a"
            ]
        ]
    },
    {
        "id": "4998d8d5f3cef2c4",
        "type": "join",
        "z": "23dd4c85940a32b9",
        "name": "group",
        "mode": "custom",
        "build": "array",
        "property": "payload.data",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "10",
        "count": "120",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 908,
        "y": 600,
        "wires": [
            [
                "3a15b0d60ea3d7d7"
            ]
        ]
    },
    {
        "id": "2922f274b37abc60",
        "type": "function",
        "z": "23dd4c85940a32b9",
        "name": "Erreur Comm Lente",
        "func": "var status = msg.payload.statusCode.name;\n\nif ( status == \"Good\")\n{\n    node.status({fill:\"green\",shape:\"dot\",text:\"Ok\"})\n    return [msg,null];\n}\nelse\n{\n    node.status({fill:\"red\",shape:\"ring\",text:status}) \n    return [null,msg]\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 620,
        "wires": [
            [
                "b478808013576155"
            ],
            [
                "0ec9e916ac27bd28"
            ]
        ]
    },
    {
        "id": "3a15b0d60ea3d7d7",
        "type": "change",
        "z": "23dd4c85940a32b9",
        "name": "Desc",
        "rules": [
            {
                "t": "set",
                "p": "payload.type",
                "pt": "msg",
                "to": "listen",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1060,
        "y": 600,
        "wires": [
            [
                "bfa3d40bb4e6a2fa"
            ]
        ]
    },
    {
        "id": "83a930d4680af80b",
        "type": "inject",
        "z": "23dd4c85940a32b9",
        "name": "Initialization",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 700,
        "wires": [
            [
                "35ea19a5c21563e4"
            ]
        ]
    },
    {
        "id": "35ea19a5c21563e4",
        "type": "change",
        "z": "23dd4c85940a32b9",
        "name": "ConnectionOk",
        "rules": [
            {
                "t": "set",
                "p": "ConnectionLost",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 390,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "ac87e26029029e6a",
        "type": "delay",
        "z": "23dd4c85940a32b9",
        "name": "Reconnect Timeout",
        "pauseType": "delay",
        "timeout": "60",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 530,
        "y": 900,
        "wires": [
            [
                "c56aab01c1643d79"
            ]
        ]
    },
    {
        "id": "6a9a74551084f180",
        "type": "link out",
        "z": "23dd4c85940a32b9",
        "name": "outConnecting",
        "mode": "link",
        "links": [],
        "x": 615,
        "y": 120,
        "wires": []
    },
    {
        "id": "0ec9e916ac27bd28",
        "type": "debug",
        "z": "23dd4c85940a32b9",
        "name": "erreur Comm",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 750,
        "y": 700,
        "wires": []
    },
    {
        "id": "9d1339be36a1a7c2",
        "type": "change",
        "z": "23dd4c85940a32b9",
        "name": "Get Variable List",
        "rules": [
            {
                "t": "set",
                "p": "varNameList",
                "pt": "global",
                "to": "payload.Variables.**.Name",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "varNodeIdList",
                "pt": "global",
                "to": "payload.Variables.**.NodeId",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "varUnitList",
                "pt": "global",
                "to": "payload.Variables.**.Unit",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "varFormatList",
                "pt": "global",
                "to": "payload.Variables.**.Format",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "4dcf1cabb718798f",
        "type": "debug",
        "z": "23dd4c85940a32b9",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 320,
        "wires": []
    },
    {
        "id": "500828b816bdd5e0",
        "type": "switch",
        "z": "23dd4c85940a32b9",
        "name": "Client Status",
        "property": "status.text",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "not running",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 330,
        "y": 900,
        "wires": [
            [
                "ac87e26029029e6a"
            ]
        ]
    },
    {
        "id": "0c8690c81d3bd3b4",
        "type": "status",
        "z": "23dd4c85940a32b9",
        "name": "Get Client Status",
        "scope": [
            "7e648fc3fc53f473"
        ],
        "x": 160,
        "y": 900,
        "wires": [
            [
                "500828b816bdd5e0"
            ]
        ]
    },
    {
        "id": "a17696f594c94fad",
        "type": "debug",
        "z": "23dd4c85940a32b9",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 540,
        "wires": []
    },
    {
        "id": "dd4ba2f657ccab4a",
        "type": "link out",
        "z": "23dd4c85940a32b9",
        "name": "link out 6",
        "mode": "link",
        "links": [
            "fc3faa44ed7464a0"
        ],
        "x": 875,
        "y": 640,
        "wires": []
    },
    {
        "id": "671b27f62199ddec",
        "type": "OPCUA-IIoT-Inject",
        "z": "23dd4c85940a32b9",
        "injectType": "inject",
        "payloadType": "json",
        "topic": "",
        "repeat": "1",
        "crontab": "",
        "once": false,
        "startDelay": "5",
        "name": "",
        "payload": "{ \"interval\": 500, \"queueSize\": 10 }",
        "addressSpaceItems": [
            {
                "name": "CurrentTime",
                "nodeId": "ns=0;i=2258",
                "datatypeName": ""
            }
        ],
        "x": 200,
        "y": 760,
        "wires": [
            [
                "7e648fc3fc53f473"
            ]
        ]
    },
    {
        "id": "7e648fc3fc53f473",
        "type": "OPCUA-IIoT-Read",
        "z": "23dd4c85940a32b9",
        "attributeId": 0,
        "maxAge": 1,
        "depth": 1,
        "connector": "9598724e5fc0cf0b",
        "name": "",
        "justValue": true,
        "showStatusActivities": false,
        "showErrors": false,
        "parseStrings": false,
        "historyDays": 1,
        "x": 340,
        "y": 760,
        "wires": [
            [
                "c56aab01c1643d79"
            ]
        ]
    },
    {
        "id": "e36a49d1673979cc",
        "type": "OPCUA-IIoT-Flex-Connector",
        "z": "23dd4c85940a32b9",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "connector": "9598724e5fc0cf0b",
        "x": 880,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "f25bf1851cb73b38",
        "type": "OPCUA-IIoT-Listener",
        "z": "23dd4c85940a32b9",
        "connector": "9598724e5fc0cf0b",
        "action": "subscribe",
        "queueSize": 10,
        "name": "",
        "topic": "",
        "justValue": true,
        "useGroupItems": false,
        "showStatusActivities": true,
        "showErrors": true,
        "x": 1020,
        "y": 380,
        "wires": [
            [
                "2922f274b37abc60"
            ]
        ]
    },
    {
        "id": "fc3faa44ed7464a0",
        "type": "link in",
        "z": "818224cece2a3687",
        "name": "Communication_Tarbes",
        "links": [
            "dd4ba2f657ccab4a"
        ],
        "x": 75,
        "y": 120,
        "wires": [
            [
                "dd550c33486264ba",
                "0c634d70b7c8f553",
                "a059b3e1db171b60"
            ]
        ]
    },
    {
        "id": "dd550c33486264ba",
        "type": "function",
        "z": "818224cece2a3687",
        "name": "PONCAGE_001_Ch1_Value",
        "func": "   \nif (msg.payload.data.Name == \"PONCAGE_001_Ch1_Value\") {\n    msg.payload = (msg.payload.data.Value)\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 280,
        "wires": [
            [
                "885009b0d7f69968"
            ]
        ]
    },
    {
        "id": "885009b0d7f69968",
        "type": "ui_chart",
        "z": "818224cece2a3687",
        "name": "dust",
        "group": "2feac4f41a4a9f5d",
        "order": 3,
        "width": "0",
        "height": "0",
        "label": "dust (%)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "1000",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 790,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "0c634d70b7c8f553",
        "type": "function",
        "z": "818224cece2a3687",
        "name": "SOUTE_001_Ch1_Value",
        "func": "  \nif (msg.payload.data.Name == \"SOUTE_001_Ch1_Value\") {\n    msg.payload = (msg.payload.data.Value)/10\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 440,
        "wires": [
            [
                "688da7bfb007a113",
                "3b0e264993de14b2"
            ]
        ]
    },
    {
        "id": "688da7bfb007a113",
        "type": "ui_chart",
        "z": "818224cece2a3687",
        "name": "T¬∞ Soute stockage",
        "group": "2feac4f41a4a9f5d",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "T¬∞ Soute stockage (¬∞c)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "60",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 870,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "3b0e264993de14b2",
        "type": "ui_gauge",
        "z": "818224cece2a3687",
        "name": "T¬∞ Soute stockage",
        "group": "2feac4f41a4a9f5d",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "T¬∞ Soute stockage",
        "label": "¬∞c",
        "format": "{{value}}",
        "min": 0,
        "max": "60",
        "colors": [
            "#1306ae",
            "#04e120",
            "#ca3838"
        ],
        "seg1": "18",
        "seg2": "25",
        "diff": false,
        "className": "",
        "x": 890,
        "y": 460,
        "wires": []
    },
    {
        "id": "a059b3e1db171b60",
        "type": "function",
        "z": "818224cece2a3687",
        "name": "SOUTE_003_Ch3_Value",
        "func": "  \nif (msg.payload.data.Name == \"SOUTE_003_Ch3_Value\") {\n    msg.payload = (msg.payload.data.Value)/10\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 540,
        "wires": [
            [
                "5689bdf5b50ba627",
                "67a9cca55c4c3ff8"
            ]
        ]
    },
    {
        "id": "5689bdf5b50ba627",
        "type": "ui_chart",
        "z": "818224cece2a3687",
        "name": "HR soute stockage",
        "group": "2feac4f41a4a9f5d",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "HR soute stockage (%HR)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 790,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "67a9cca55c4c3ff8",
        "type": "ui_gauge",
        "z": "818224cece2a3687",
        "name": "HR Soute stockage",
        "group": "2feac4f41a4a9f5d",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "HR Soute stockage",
        "label": "¬∞c",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#2204b0",
            "#0adc24",
            "#ca3838"
        ],
        "seg1": "25",
        "seg2": "60",
        "diff": false,
        "className": "",
        "x": 790,
        "y": 600,
        "wires": []
    },
    {
        "id": "a53599d8f776d23a",
        "type": "function",
        "z": "2b1c420aecfa5af2",
        "name": "Convert_real_modbus",
        "func": "// @ts-nocheck\n\n// DateHeure\nvar dateHeure = new Date();\nvar imin = 0;\nvar jNbr = 39;\nvar i = 0;\nvar s = \"\";\n\nvar myvars_output = [];\n\nvar listeName = [\"C1_intensite1\",\"C1_intensite2\",\"C1_intensite3\",\"\",\"\",\"C1_intensiteMoy\",\"\",\"\",\"\",\"\",\"C1_Tension_L1L2\",\"C1_Tension_L2L3\",\"C1_Tension_L3L1\",\"C1_Tension_moyenne\",\"C1_Tension_L1N\",\"C1_Tension_L2N\",\"C1_Tension_L3N\",\"C1_Tension_LN\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"C1_Puis_acti_P1\",\"C1_Puis_acti_P2\",\"C1_Puis_acti_P3\",\"C1_Puis_acti_tot\",\"\",\"\",\"\",\"C1_Puis_reac_tot\",\"\",\"\",\"\",\"C1_Puis_app_tot\"];\n\nfor (var j = 0; j < jNbr; j++ ) {\n    if (listeName[j]!==\"\") {\n        var myvar = {\"Name\":\"\",\"DateTime\" :-1,\"Value\":-1};\n        myvar.Name = listeName[j];\n    \n        var Reg1 = msg.values[imin + 2*j];\n        if ( Reg1 < 0) {  Reg1 = 65535 + Reg1 + 1;}\n        var Reg2 = msg.values[imin + 1 + 2*j];\n        if ( Reg2 < 0) { Reg2 = 65535 + Reg2 + 1;}\n    \n    \n        var Base2reg1 = (Reg1).toString(2);\n        var StrLengthreg1 = Base2reg1.length;\n    \n        // Completion of the string\n        for (i=StrLengthreg1; i<16; i++) {\n            Base2reg1 = '0' + Base2reg1;   \n        }\n    \n        // conversion en binaire reg2\n        var Base2reg2 = (Reg2).toString(2);\n        var StrLengthreg2 = Base2reg2.length;\n        // Completion of the string\n        for (i=StrLengthreg2; i<16; i++) {\n            Base2reg2 = '0' + Base2reg2;   \n        }\n    \n        //definir concat√©nation-des registres \n        var msgbase2 = Base2reg2 + Base2reg1;\n        var StrLengthregmsg = msgbase2.length;\n        //node.error(\"msgbase2:\"+msgbase2);\n    \n        //calcule de s\n        s=msgbase2[0];\n        var Base10s = parseInt(s,2);\n    \n        //calcule de e\n        var e = '';\n        for (i=1; i<9; i++) {\n            e = e + msgbase2[i];  \n        }\n        var Base10e = parseInt(e,2); //conv bin to dec\n        console.log(e);\n    \n        //calcule de  f\n        var m = '';\n        for (i=9;i<32; i++) {\n            m = m + msgbase2[i]; \n        }\n    \n        var Base10m = parseInt(m,2);\n        //calculer message\n        var term1=Math.pow(-1,s);\n\n        var k=Base10e-127;\n        var term2=Math.pow(2,k);\n    \n        var term3= 1+(Base10m/Math.pow(2,23));\n        var Float = term1*term2*term3;\n        var calculatedFloat=Float.toFixed(2);\n        \n        if ( calculatedFloat < -40000.0) {calculatedFloat=0.0;}\n        if ( calculatedFloat > 40000.0) {calculatedFloat=0.0;}\n    \n        myvar.Value= parseFloat(calculatedFloat);\n        myvar.DateTime = dateHeure.getTime();\n        myvars_output.push(myvar);\n    }\n}\nmsg.payload.data = myvars_output;\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 500,
        "wires": [
            [
                "fc55b5241654fc5b"
            ]
        ]
    },
    {
        "id": "fc55b5241654fc5b",
        "type": "change",
        "z": "2b1c420aecfa5af2",
        "name": "Change_modbus",
        "rules": [
            {
                "t": "delete",
                "p": "topic",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "values",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "input",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "sendingNodeId",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "_msgid",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.buffer",
                "pt": "msg"
            },
            {
                "t": "set",
                "p": "payload.type",
                "pt": "msg",
                "to": "listen",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 930,
        "y": 500,
        "wires": [
            [
                "c54d192d41705a33"
            ]
        ]
    },
    {
        "id": "c54d192d41705a33",
        "type": "function",
        "z": "2b1c420aecfa5af2",
        "name": "Array_fusion",
        "func": "//gestion data\nvar myvars_output = []\n\nfor (var i=0; i < msg.payload.data.length; i++){\n    var myvar = msg.payload.data[i];\n    myvars_output.push(myvar);\n}\n\n//node.error(myvars_output);\n\nmsg.payload.data = myvars_output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 500,
        "wires": [
            [
                "1f3d13f3d4eebc88",
                "a5c5069d0117c599",
                "3d31ec1562758695",
                "42242c18825b5024"
            ]
        ]
    },
    {
        "id": "1f3d13f3d4eebc88",
        "type": "link out",
        "z": "2b1c420aecfa5af2",
        "name": "",
        "links": [],
        "x": 1335,
        "y": 500,
        "wires": []
    },
    {
        "id": "f41ad3ed17843c3a",
        "type": "function",
        "z": "2b1c420aecfa5af2",
        "name": "Convert_real_modbus",
        "func": "\n// DateHeure\nvar dateHeure = new Date();\nvar imin = 0;\nvar jNbr = 39;\n\nvar i=0;\nvar s=\"\";\n\nvar myvars_output = [];\n\nvar listeName = [\"C2_intensite1\",\"C2_intensite2\",\"C2_intensite3\",\"\",\"\",\"C2_intensiteMoy\",\"\",\"\",\"\",\"\",\"C2_Tension_L1L2\",\"C2_Tension_L2L3\",\"C2_Tension_L3L1\",\"C2_Tension_moyenne\",\"C2_Tension_L1N\",\"C2_Tension_L2N\",\"C2_Tension_L3N\",\"C2_Tension_LN\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"C2_Puis_acti_P1\",\"C2_Puis_acti_P2\",\"C2_Puis_acti_P3\",\"C2_Puis_acti_tot\",\"\",\"\",\"\",\"C2_Puis_reac_tot\",\"\",\"\",\"\",\"C2_Puis_app_tot\"];\n\nfor (var j = 0; j < jNbr; j++ ) {\n    if (listeName[j]!==\"\") {\n        var myvar = {\"Name\":\"\",\"DateTime\" :-1,\"Value\":-1};\n        myvar.Name = listeName[j];\n    \n        var Reg1 = msg.values[imin + 2*j];\n        if ( Reg1 < 0) {  Reg1 = 65535 + Reg1 + 1;}\n        var Reg2 = msg.values[imin + 1 + 2*j];\n        if ( Reg2 < 0) { Reg2 = 65535 + Reg2 + 1;}\n    \n    \n        var Base2reg1 = (Reg1).toString(2);\n        var StrLengthreg1 = Base2reg1.length;\n    \n        // Completion of the string\n        for (i=StrLengthreg1; i<16; i++) {\n            Base2reg1 = '0' + Base2reg1;   \n        }\n    \n        // conversion en binaire reg2\n        var Base2reg2 = (Reg2).toString(2);\n        var StrLengthreg2 = Base2reg2.length;\n        // Completion of the string\n        for (i=StrLengthreg2; i<16; i++) {\n            Base2reg2 = '0' + Base2reg2;   \n        }\n    \n        //definir concat√©nation-des registres \n        var msgbase2 = Base2reg2 + Base2reg1;\n        var StrLengthregmsg = msgbase2.length;\n        //node.error(\"msgbase2:\"+msgbase2);\n    \n        //calcule de s\n        s=msgbase2[0];\n        var Base10s = parseInt(s,2);\n    \n        //calcule de e\n        var e = '';\n        for (i=1; i<9; i++) {\n            e = e + msgbase2[i];  \n        }\n        var Base10e = parseInt(e,2); //conv bin to dec\n        console.log(e);\n    \n        //calcule de  f\n        var m = '';\n        for (i=9;i<32; i++) {\n            m = m + msgbase2[i]; \n        }\n    \n        var Base10m = parseInt(m,2);\n        //calculer message\n        var term1=Math.pow(-1,s);\n\n        var k=Base10e-127;\n        var term2=Math.pow(2,k);\n    \n        var term3= 1+(Base10m/Math.pow(2,23));\n        var Float = term1*term2*term3;\n        var calculatedFloat=Float.toFixed(2);\n        \n        // @ts-ignore\n        if ( calculatedFloat < -40000.0) {calculatedFloat=0.0;}\n        // @ts-ignore\n        if ( calculatedFloat > 40000.0) {calculatedFloat=0.0;}\n    \n        myvar.Value= parseFloat(calculatedFloat);\n        myvar.DateTime = dateHeure.getTime();\n        myvars_output.push(myvar);\n    }\n}\nmsg.payload.data = myvars_output;\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 580,
        "wires": [
            [
                "e996cc974c071091"
            ]
        ]
    },
    {
        "id": "e996cc974c071091",
        "type": "change",
        "z": "2b1c420aecfa5af2",
        "name": "Change_modbus",
        "rules": [
            {
                "t": "delete",
                "p": "topic",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "values",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "input",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "sendingNodeId",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "_msgid",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.buffer",
                "pt": "msg"
            },
            {
                "t": "set",
                "p": "payload.type",
                "pt": "msg",
                "to": "listen",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 930,
        "y": 580,
        "wires": [
            [
                "4fa7a2a456b184f2"
            ]
        ]
    },
    {
        "id": "4fa7a2a456b184f2",
        "type": "function",
        "z": "2b1c420aecfa5af2",
        "name": "Array_fusion",
        "func": "//gestion data\nvar myvars_output = []\n\nfor (var i=0; i < msg.payload.data.length; i++){\n    var myvar = msg.payload.data[i];\n    myvars_output.push(myvar);\n}\n\n//node.error(myvars_output);\n\nmsg.payload.data = myvars_output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1170,
        "y": 580,
        "wires": [
            [
                "a96c4650ae591fad",
                "a5c5069d0117c599",
                "63642bdff5d5d110",
                "8ef85d1f33e34c56"
            ]
        ]
    },
    {
        "id": "a96c4650ae591fad",
        "type": "link out",
        "z": "2b1c420aecfa5af2",
        "name": "",
        "links": [],
        "x": 1335,
        "y": 580,
        "wires": []
    },
    {
        "id": "a5c5069d0117c599",
        "type": "debug",
        "z": "2b1c420aecfa5af2",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1450,
        "y": 280,
        "wires": []
    },
    {
        "id": "b1c66fde9955d35f",
        "type": "function",
        "z": "2b1c420aecfa5af2",
        "name": "Convert_real_modbus",
        "func": "\n// DateHeure\nvar dateHeure = new Date();\nvar imin = 0;\nvar jNbr = 39;\nvar i = 0;\nvar s = \"\";\n\nvar myvars_output = [];\n\nvar listeName = [\"C3_intensite1\",\"C3_intensite2\",\"C3_intensite3\",\"\",\"\",\"C3_intensiteMoy\",\"\",\"\",\"\",\"\",\"C3_Tension_L1L2\",\"C3_Tension_L2L3\",\"C3_Tension_L3L1\",\"C3_Tension_moyenne\",\"C3_Tension_L1N\",\"C3_Tension_L2N\",\"C3_Tension_L3N\",\"C3_Tension_LN\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"C3_Puis_acti_P1\",\"C3_Puis_acti_P2\",\"C3_Puis_acti_P3\",\"C3_Puis_acti_tot\",\"\",\"\",\"\",\"C3_Puis_reac_tot\",\"\",\"\",\"\",\"C3_Puis_app_tot\"];\n\nfor (var j = 0; j < jNbr; j++ ) {\n    if (listeName[j]!==\"\") {\n        var myvar = {\"Name\":\"\",\"DateTime\" :-1,\"Value\":-1};\n        myvar.Name = listeName[j];\n    \n        var Reg1 = msg.values[imin + 2*j];\n        if ( Reg1 < 0) {  Reg1 = 65535 + Reg1 + 1;}\n        var Reg2 = msg.values[imin + 1 + 2*j];\n        if ( Reg2 < 0) { Reg2 = 65535 + Reg2 + 1;}\n    \n    \n        var Base2reg1 = (Reg1).toString(2);\n        var StrLengthreg1 = Base2reg1.length;\n    \n        // Completion of the string\n        for (i=StrLengthreg1; i<16; i++) {\n            Base2reg1 = '0' + Base2reg1;   \n        }\n    \n        // conversion en binaire reg2\n        var Base2reg2 = (Reg2).toString(2);\n        var StrLengthreg2 = Base2reg2.length;\n        // Completion of the string\n        for (i=StrLengthreg2; i<16; i++) {\n            Base2reg2 = '0' + Base2reg2;   \n        }\n    \n        //definir concat√©nation-des registres \n        var msgbase2 = Base2reg2 + Base2reg1;\n        var StrLengthregmsg = msgbase2.length;\n        //node.error(\"msgbase2:\"+msgbase2);\n    \n        //calcule de s\n        s=msgbase2[0];\n        var Base10s = parseInt(s,2);\n    \n        //calcule de e\n        var e = '';\n        for (i=1; i<9; i++) {\n            e = e + msgbase2[i];  \n        }\n        var Base10e = parseInt(e,2); //conv bin to dec\n        console.log(e);\n    \n        //calcule de  f\n        var m = '';\n        for (i=9;i<32; i++) {\n            m = m + msgbase2[i]; \n        }\n    \n        var Base10m = parseInt(m,2);\n        //calculer message\n        var term1=Math.pow(-1,s);\n\n        var k=Base10e-127;\n        var term2=Math.pow(2,k);\n    \n        var term3= 1+(Base10m/Math.pow(2,23));\n        var Float = term1*term2*term3;\n        var calculatedFloat=Float.toFixed(2);\n        \n        // @ts-ignore\n        if ( calculatedFloat < -40000.0) {calculatedFloat=0.0;}\n        // @ts-ignore\n        if ( calculatedFloat > 40000.0) {calculatedFloat=0.0;}\n    \n        myvar.Value= parseFloat(calculatedFloat);\n        myvar.DateTime = dateHeure.getTime();\n        myvars_output.push(myvar);\n    }\n}\nmsg.payload.data = myvars_output;\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 680,
        "wires": [
            [
                "37a5abc063533cfd"
            ]
        ]
    },
    {
        "id": "37a5abc063533cfd",
        "type": "change",
        "z": "2b1c420aecfa5af2",
        "name": "Change_modbus",
        "rules": [
            {
                "t": "delete",
                "p": "topic",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "values",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "input",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "sendingNodeId",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "_msgid",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.buffer",
                "pt": "msg"
            },
            {
                "t": "set",
                "p": "payload.type",
                "pt": "msg",
                "to": "listen",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 930,
        "y": 680,
        "wires": [
            [
                "e3b596ec50f03cd1"
            ]
        ]
    },
    {
        "id": "e3b596ec50f03cd1",
        "type": "function",
        "z": "2b1c420aecfa5af2",
        "name": "Array_fusion",
        "func": "//gestion data\nvar myvars_output = []\n\nfor (var i=0; i < msg.payload.data.length; i++){\n    var myvar = msg.payload.data[i];\n    myvars_output.push(myvar);\n}\n\n//node.error(myvars_output);\n\nmsg.payload.data = myvars_output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1170,
        "y": 680,
        "wires": [
            [
                "26a2c18383ba10ca",
                "a5c5069d0117c599",
                "c0d79aed2d574103",
                "25a55ea8c3f201af"
            ]
        ]
    },
    {
        "id": "26a2c18383ba10ca",
        "type": "link out",
        "z": "2b1c420aecfa5af2",
        "name": "",
        "links": [],
        "x": 1335,
        "y": 680,
        "wires": []
    },
    {
        "id": "42242c18825b5024",
        "type": "file",
        "z": "2b1c420aecfa5af2",
        "name": "",
        "filename": "\\\\Fr1nteqapp01p\\NTE1\\AUTOCLAVE\\TD_RTM\\c1datafile",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1650,
        "y": 480,
        "wires": [
            [
                "5c168582c4b2b67f"
            ]
        ]
    },
    {
        "id": "5c168582c4b2b67f",
        "type": "debug",
        "z": "2b1c420aecfa5af2",
        "name": "debug 4",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1940,
        "y": 440,
        "wires": []
    },
    {
        "id": "63642bdff5d5d110",
        "type": "file",
        "z": "2b1c420aecfa5af2",
        "name": "",
        "filename": "c2datafile",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1520,
        "y": 560,
        "wires": [
            [
                "b203d2363a8b3e60"
            ]
        ]
    },
    {
        "id": "b203d2363a8b3e60",
        "type": "debug",
        "z": "2b1c420aecfa5af2",
        "name": "debug 5",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1940,
        "y": 560,
        "wires": []
    },
    {
        "id": "c0d79aed2d574103",
        "type": "file",
        "z": "2b1c420aecfa5af2",
        "name": "",
        "filename": "c3datafile",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1520,
        "y": 680,
        "wires": [
            [
                "b8655d2bfffe518c"
            ]
        ]
    },
    {
        "id": "b8655d2bfffe518c",
        "type": "debug",
        "z": "2b1c420aecfa5af2",
        "name": "debug 6",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1680,
        "y": 680,
        "wires": []
    },
    {
        "id": "8ef85d1f33e34c56",
        "type": "file",
        "z": "2b1c420aecfa5af2",
        "name": "",
        "filename": "\\\\Fr1nteqapp01p\\NTE1\\AUTOCLAVE\\TD_RTM\\c2datafile",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1630,
        "y": 600,
        "wires": [
            [
                "c1049b2e2b3fa44c"
            ]
        ]
    },
    {
        "id": "25a55ea8c3f201af",
        "type": "file",
        "z": "2b1c420aecfa5af2",
        "name": "",
        "filename": "\\\\Fr1nteqapp01p\\NTE1\\AUTOCLAVE\\TD_RTM\\c3datafile",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1670,
        "y": 780,
        "wires": [
            [
                "4a8b7b679ecd57e5"
            ]
        ]
    },
    {
        "id": "3d31ec1562758695",
        "type": "file",
        "z": "2b1c420aecfa5af2",
        "name": "",
        "filename": "c1datafile",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1640,
        "y": 380,
        "wires": [
            [
                "c17ac2c7a7b8c13c"
            ]
        ]
    },
    {
        "id": "c17ac2c7a7b8c13c",
        "type": "debug",
        "z": "2b1c420aecfa5af2",
        "name": "debug 7",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1880,
        "y": 360,
        "wires": []
    },
    {
        "id": "4a8b7b679ecd57e5",
        "type": "debug",
        "z": "2b1c420aecfa5af2",
        "name": "debug 8",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2020,
        "y": 780,
        "wires": []
    },
    {
        "id": "c1049b2e2b3fa44c",
        "type": "debug",
        "z": "2b1c420aecfa5af2",
        "name": "debug 9",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2020,
        "y": 640,
        "wires": []
    },
    {
        "id": "6989111754e2081c",
        "type": "ui_chart",
        "z": "2b1c420aecfa5af2",
        "name": "C1_intensite1",
        "group": "",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "chart",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1280,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "3c1036470c5203b5",
        "type": "function",
        "z": "2b1c420aecfa5af2",
        "name": "C1_intensite1",
        "func": "\n    msg.payload = (msg.payload.data)\n    return msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 320,
        "wires": [
            [
                "6989111754e2081c"
            ]
        ]
    },
    {
        "id": "d27c1b459db01fac",
        "type": "function",
        "z": "2b1c420aecfa5af2",
        "name": "Convert_real_modbus_to_dashboard",
        "func": "// @ts-nocheck\n\n// DateHeure\nvar dateHeure = new Date();\nvar imin = 0;\nvar jNbr = 1;\nvar i = 0;\nvar s = \"\";\n\nvar myvars_output = [];\n\nvar listeName = [\"C1_intensite1\",\"C1_intensite2\",\"C1_intensite3\",\"\",\"\",\"C1_intensiteMoy\",\"\",\"\",\"\",\"\",\"C1_Tension_L1L2\",\"C1_Tension_L2L3\",\"C1_Tension_L3L1\",\"C1_Tension_moyenne\",\"C1_Tension_L1N\",\"C1_Tension_L2N\",\"C1_Tension_L3N\",\"C1_Tension_LN\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"C1_Puis_acti_P1\",\"C1_Puis_acti_P2\",\"C1_Puis_acti_P3\",\"C1_Puis_acti_tot\",\"\",\"\",\"\",\"C1_Puis_reac_tot\",\"\",\"\",\"\",\"C1_Puis_app_tot\"];\n\nfor (var j = 0; j < jNbr; j++ ) {\n    if (listeName[j]!==\"\") {\n        var myvar = {\"Name\":\"\",\"DateTime\" :-1,\"Value\":-1};\n        myvar.Name = listeName[j];\n    \n        var Reg1 = msg.values[imin + 2*j];\n        if ( Reg1 < 0) {  Reg1 = 65535 + Reg1 + 1;}\n        var Reg2 = msg.values[imin + 1 + 2*j];\n        if ( Reg2 < 0) { Reg2 = 65535 + Reg2 + 1;}\n    \n    \n        var Base2reg1 = (Reg1).toString(2);\n        var StrLengthreg1 = Base2reg1.length;\n    \n        // Completion of the string\n        for (i=StrLengthreg1; i<16; i++) {\n            Base2reg1 = '0' + Base2reg1;   \n        }\n    \n        // conversion en binaire reg2\n        var Base2reg2 = (Reg2).toString(2);\n        var StrLengthreg2 = Base2reg2.length;\n        // Completion of the string\n        for (i=StrLengthreg2; i<16; i++) {\n            Base2reg2 = '0' + Base2reg2;   \n        }\n    \n        //definir concat√©nation-des registres \n        var msgbase2 = Base2reg2 + Base2reg1;\n        var StrLengthregmsg = msgbase2.length;\n        //node.error(\"msgbase2:\"+msgbase2);\n    \n        //calcule de s\n        s=msgbase2[0];\n        var Base10s = parseInt(s,2);\n    \n        //calcule de e\n        var e = '';\n        for (i=1; i<9; i++) {\n            e = e + msgbase2[i];  \n        }\n        var Base10e = parseInt(e,2); //conv bin to dec\n        console.log(e);\n    \n        //calcule de  f\n        var m = '';\n        for (i=9;i<32; i++) {\n            m = m + msgbase2[i]; \n        }\n    \n        var Base10m = parseInt(m,2);\n        //calculer message\n        var term1=Math.pow(-1,s);\n\n        var k=Base10e-127;\n        var term2=Math.pow(2,k);\n    \n        var term3= 1+(Base10m/Math.pow(2,23));\n        var Float = term1*term2*term3;\n        var calculatedFloat=Float.toFixed(2);\n        \n        if ( calculatedFloat < -40000.0) {calculatedFloat=0.0;}\n        if ( calculatedFloat > 40000.0) {calculatedFloat=0.0;}\n    \n        myvars_output= parseFloat(calculatedFloat);\n    \n    \n    }\n}\nmsg.payload.data = myvars_output;\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 300,
        "wires": [
            [
                "3c1036470c5203b5"
            ]
        ]
    },
    {
        "id": "20d4beb44c7b6f9c",
        "type": "function",
        "z": "2b1c420aecfa5af2",
        "name": "C3_intensite1",
        "func": "\n    msg.payload = (msg.payload.data)\n    return msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 940,
        "wires": [
            [
                "89f4912f5da10c58"
            ]
        ]
    },
    {
        "id": "89f4912f5da10c58",
        "type": "ui_chart",
        "z": "2b1c420aecfa5af2",
        "name": "C3_intensite1",
        "group": "",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "chart",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1220,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "e3831969ceaa50b2",
        "type": "function",
        "z": "2b1c420aecfa5af2",
        "name": "Convert_real_modbus_to_dashboard",
        "func": "\n// DateHeure\nvar dateHeure = new Date();\nvar imin = 0;\nvar jNbr = 1;\nvar i = 0;\nvar s = \"\";\n\nvar myvars_output = [];\n\nvar listeName = [\"C3_intensite1\",\"C3_intensite2\",\"C3_intensite3\",\"\",\"\",\"C3_intensiteMoy\",\"\",\"\",\"\",\"\",\"C3_Tension_L1L2\",\"C3_Tension_L2L3\",\"C3_Tension_L3L1\",\"C3_Tension_moyenne\",\"C3_Tension_L1N\",\"C3_Tension_L2N\",\"C3_Tension_L3N\",\"C3_Tension_LN\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"C3_Puis_acti_P1\",\"C3_Puis_acti_P2\",\"C3_Puis_acti_P3\",\"C3_Puis_acti_tot\",\"\",\"\",\"\",\"C3_Puis_reac_tot\",\"\",\"\",\"\",\"C3_Puis_app_tot\"];\n\nfor (var j = 0; j < jNbr; j++ ) {\n    if (listeName[j]!==\"\") {\n        var myvar = {\"Name\":\"\",\"DateTime\" :-1,\"Value\":-1};\n        myvar.Name = listeName[j];\n    \n        var Reg1 = msg.values[imin + 2*j];\n        if ( Reg1 < 0) {  Reg1 = 65535 + Reg1 + 1;}\n        var Reg2 = msg.values[imin + 1 + 2*j];\n        if ( Reg2 < 0) { Reg2 = 65535 + Reg2 + 1;}\n    \n    \n        var Base2reg1 = (Reg1).toString(2);\n        var StrLengthreg1 = Base2reg1.length;\n    \n        // Completion of the string\n        for (i=StrLengthreg1; i<16; i++) {\n            Base2reg1 = '0' + Base2reg1;   \n        }\n    \n        // conversion en binaire reg2\n        var Base2reg2 = (Reg2).toString(2);\n        var StrLengthreg2 = Base2reg2.length;\n        // Completion of the string\n        for (i=StrLengthreg2; i<16; i++) {\n            Base2reg2 = '0' + Base2reg2;   \n        }\n    \n        //definir concat√©nation-des registres \n        var msgbase2 = Base2reg2 + Base2reg1;\n        var StrLengthregmsg = msgbase2.length;\n        //node.error(\"msgbase2:\"+msgbase2);\n    \n        //calcule de s\n        s=msgbase2[0];\n        var Base10s = parseInt(s,2);\n    \n        //calcule de e\n        var e = '';\n        for (i=1; i<9; i++) {\n            e = e + msgbase2[i];  \n        }\n        var Base10e = parseInt(e,2); //conv bin to dec\n        console.log(e);\n    \n        //calcule de  f\n        var m = '';\n        for (i=9;i<32; i++) {\n            m = m + msgbase2[i]; \n        }\n    \n        var Base10m = parseInt(m,2);\n        //calculer message\n        var term1=Math.pow(-1,s);\n\n        var k=Base10e-127;\n        var term2=Math.pow(2,k);\n    \n        var term3= 1+(Base10m/Math.pow(2,23));\n        var Float = term1*term2*term3;\n        var calculatedFloat=Float.toFixed(2);\n        \n        // @ts-ignore\n        if ( calculatedFloat < -40000.0) {calculatedFloat=0.0;}\n        // @ts-ignore\n        if ( calculatedFloat > 40000.0) {calculatedFloat=0.0;}\n    \n        myvars_output = parseFloat(calculatedFloat);\n        \n    }\n}\nmsg.payload.data = myvars_output;\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 900,
        "wires": [
            [
                "20d4beb44c7b6f9c"
            ]
        ]
    },
    {
        "id": "3b4c991a1e65ebcf",
        "type": "function",
        "z": "2b1c420aecfa5af2",
        "name": "C2_intensite1",
        "func": "\n    msg.payload = (msg.payload.data)\n    return msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 1020,
        "wires": [
            [
                "9e8fded3cc2c6fbf"
            ]
        ]
    },
    {
        "id": "9e8fded3cc2c6fbf",
        "type": "ui_chart",
        "z": "2b1c420aecfa5af2",
        "name": "C2_intensite1",
        "group": "",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "chart",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1400,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "32b4c863f41cd6a4",
        "type": "function",
        "z": "2b1c420aecfa5af2",
        "name": "Convert_real_modbus_to_dashboard",
        "func": "\n// DateHeure\nvar dateHeure = new Date();\nvar imin = 0;\nvar jNbr = 1;\n\nvar i=0;\nvar s=\"\";\n\nvar myvars_output = [];\n\nvar listeName = [\"C2_intensite1\",\"C2_intensite2\",\"C2_intensite3\",\"\",\"\",\"C2_intensiteMoy\",\"\",\"\",\"\",\"\",\"C2_Tension_L1L2\",\"C2_Tension_L2L3\",\"C2_Tension_L3L1\",\"C2_Tension_moyenne\",\"C2_Tension_L1N\",\"C2_Tension_L2N\",\"C2_Tension_L3N\",\"C2_Tension_LN\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"C2_Puis_acti_P1\",\"C2_Puis_acti_P2\",\"C2_Puis_acti_P3\",\"C2_Puis_acti_tot\",\"\",\"\",\"\",\"C2_Puis_reac_tot\",\"\",\"\",\"\",\"C2_Puis_app_tot\"];\n\nfor (var j = 0; j < jNbr; j++ ) {\n    if (listeName[j]!==\"\") {\n        var myvar = {\"Name\":\"\",\"DateTime\" :-1,\"Value\":-1};\n        myvar.Name = listeName[j];\n    \n        var Reg1 = msg.values[imin + 2*j];\n        if ( Reg1 < 0) {  Reg1 = 65535 + Reg1 + 1;}\n        var Reg2 = msg.values[imin + 1 + 2*j];\n        if ( Reg2 < 0) { Reg2 = 65535 + Reg2 + 1;}\n    \n    \n        var Base2reg1 = (Reg1).toString(2);\n        var StrLengthreg1 = Base2reg1.length;\n    \n        // Completion of the string\n        for (i=StrLengthreg1; i<16; i++) {\n            Base2reg1 = '0' + Base2reg1;   \n        }\n    \n        // conversion en binaire reg2\n        var Base2reg2 = (Reg2).toString(2);\n        var StrLengthreg2 = Base2reg2.length;\n        // Completion of the string\n        for (i=StrLengthreg2; i<16; i++) {\n            Base2reg2 = '0' + Base2reg2;   \n        }\n    \n        //definir concat√©nation-des registres \n        var msgbase2 = Base2reg2 + Base2reg1;\n        var StrLengthregmsg = msgbase2.length;\n        //node.error(\"msgbase2:\"+msgbase2);\n    \n        //calcule de s\n        s=msgbase2[0];\n        var Base10s = parseInt(s,2);\n    \n        //calcule de e\n        var e = '';\n        for (i=1; i<9; i++) {\n            e = e + msgbase2[i];  \n        }\n        var Base10e = parseInt(e,2); //conv bin to dec\n        console.log(e);\n    \n        //calcule de  f\n        var m = '';\n        for (i=9;i<32; i++) {\n            m = m + msgbase2[i]; \n        }\n    \n        var Base10m = parseInt(m,2);\n        //calculer message\n        var term1=Math.pow(-1,s);\n\n        var k=Base10e-127;\n        var term2=Math.pow(2,k);\n    \n        var term3= 1+(Base10m/Math.pow(2,23));\n        var Float = term1*term2*term3;\n        var calculatedFloat=Float.toFixed(2);\n        \n        // @ts-ignore\n        if ( calculatedFloat < -40000.0) {calculatedFloat=0.0;}\n        // @ts-ignore\n        if ( calculatedFloat > 40000.0) {calculatedFloat=0.0;}\n    \n        myvars_output = parseFloat(calculatedFloat);\n       \n    }\n}\nmsg.payload.data = myvars_output;\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 1020,
        "wires": [
            [
                "3b4c991a1e65ebcf"
            ]
        ]
    },
    {
        "id": "bc86dd1e0fdbd1ce",
        "type": "modbus-read",
        "z": "2b1c420aecfa5af2",
        "name": "Compteur1",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "10",
        "dataType": "HoldingRegister",
        "adr": "2998",
        "quantity": "78",
        "rate": "10",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "7d73b3be.113afc",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 400,
        "y": 440,
        "wires": [
            [],
            [
                "a53599d8f776d23a",
                "d27c1b459db01fac"
            ]
        ]
    },
    {
        "id": "901ba19eb738499d",
        "type": "modbus-read",
        "z": "2b1c420aecfa5af2",
        "name": "Compteur2",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "11",
        "dataType": "HoldingRegister",
        "adr": "2998",
        "quantity": "78",
        "rate": "10",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "7d73b3be.113afc",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 400,
        "y": 580,
        "wires": [
            [],
            [
                "f41ad3ed17843c3a",
                "32b4c863f41cd6a4"
            ]
        ]
    },
    {
        "id": "4db030de59f08a6f",
        "type": "modbus-read",
        "z": "2b1c420aecfa5af2",
        "name": "Compteur3",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "12",
        "dataType": "HoldingRegister",
        "adr": "2998",
        "quantity": "78",
        "rate": "10",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "7d73b3be.113afc",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 420,
        "y": 680,
        "wires": [
            [],
            [
                "b1c66fde9955d35f",
                "e3831969ceaa50b2"
            ]
        ]
    },
    {
        "id": "dbb5df546256a02a",
        "type": "link in",
        "z": "ee46fd2b48f2402d",
        "name": "LecLente_Out",
        "links": [],
        "x": 175,
        "y": 80,
        "wires": [
            [
                "e85d8d187e40d650"
            ]
        ]
    },
    {
        "id": "e85d8d187e40d650",
        "type": "function",
        "z": "ee46fd2b48f2402d",
        "name": "AzureIOT_PocIotwp1Iothub",
        "func": "var url = 'https://PocIotwp1Iothub.azure-devices.net/devices/I-NTE-E500-GTW/messages/events?api-version=2018-06-30'\n\nvar resourceUri = 'PocIotwp1Iothub.azure-devices.net/devices/I-NTE-E500-GTW'\n\n\nvar signingKey = 'SbZkwNQWeDwPBFsDOugGu7xZds5b6qf%2BF9TYkCDdCF4%3D'\n\nvar expiresInMins = 1 //soit 1 minute\nvar crypto = global.get(\"crypto\")\n\nresourceUri = encodeURIComponent(resourceUri)\n\n\n// Set Expiration in deconds\nvar expires = (Date.now() / 1000) + expiresInMins * 60; \nexpires = Math.ceil(expires); \nvar toSign = resourceUri + '\\n' + expires; \n\n// Use Crypto\nvar hmac = crypto.createHmac('sha256', new Buffer(signingKey, 'base64')); \nhmac.update(toSign); \nvar base64UriEncoded = encodeURIComponent(hmac.digest('base64'));\n\n    //var chain = \"SharedAccessSignature sr=\" + resourceUri + \"&sig=\" +base64UriEncoded + \"&se=\" + expires;\nvar chain = \"SharedAccessSignature sr=PocIotwp1Iothub.azure-devices.net%2Fdevices%2FI-NTE-E500-GTW&sig=SbZkwNQWeDwPBFsDOugGu7xZds5b6qf%2BF9TYkCDdCF4%3D&se=1678349354\";\n\n// construct Request\nmsg.method = 'POST';\n\nmsg.headers ={}\nmsg.headers.Authorization = chain;\n\nmsg.url = url; \n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 60,
        "wires": [
            [
                "bf2fc0ca21419096"
            ]
        ]
    },
    {
        "id": "bf2fc0ca21419096",
        "type": "http request",
        "z": "ee46fd2b48f2402d",
        "name": "Post Data Azure",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "d7b0a84d.8c0648",
        "authType": "",
        "senderr": false,
        "x": 701,
        "y": 60,
        "wires": [
            [
                "1dfecbe7e31bc42c"
            ]
        ]
    },
    {
        "id": "1dfecbe7e31bc42c",
        "type": "debug",
        "z": "ee46fd2b48f2402d",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 220,
        "wires": []
    },
    {
        "id": "c0e6b3f1790cbd33",
        "type": "inject",
        "z": "a7af23954e926de9",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 140,
        "wires": [
            [
                "dc067ef3145486b2"
            ]
        ]
    },
    {
        "id": "dc067ef3145486b2",
        "type": "openweathermap",
        "z": "a7af23954e926de9",
        "name": "M√©t√©o",
        "wtype": "current",
        "lon": "",
        "lat": "",
        "city": "Tours",
        "country": "France",
        "language": "fr",
        "x": 470,
        "y": 140,
        "wires": [
            [
                "70eaf6a61f83c4e6"
            ]
        ]
    },
    {
        "id": "70eaf6a61f83c4e6",
        "type": "debug",
        "z": "a7af23954e926de9",
        "name": "debug 10",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 140,
        "wires": []
    },
    {
        "id": "83b2a206fc189bb2",
        "type": "SIGNL4",
        "z": "a7af23954e926de9",
        "name": "SIGNL4 Alerting",
        "teamSecret": "b1weujy3ca",
        "alertSubject": "",
        "alertBody": "Temp√©rature d'huile d√©pass√©e",
        "alertS4Service": "",
        "alertS4Location": "",
        "alertS4AlertingScenario": "multi_ack",
        "alertS4Filtering": "false",
        "alertS4ExternalID": "",
        "x": 500,
        "y": 420,
        "wires": [
            [
                "0bce7302af278883"
            ]
        ]
    },
    {
        "id": "0bce7302af278883",
        "type": "SIGNL4 Resolve",
        "z": "a7af23954e926de9",
        "name": "SIGNL4 Resolve",
        "x": 1090,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "5002d58cd3b8f39c",
        "type": "inject",
        "z": "f21a30839d1a3fa7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1830,
        "y": 180,
        "wires": [
            [
                "11a563e0ebb99d06"
            ]
        ]
    },
    {
        "id": "11a563e0ebb99d06",
        "type": "function",
        "z": "f21a30839d1a3fa7",
        "name": "function 1",
        "func": "var currentTime = new Date();\nvar hours = currentTime.getHours();\nvar angle = (hours % 12) * 30;  // Convertir l'heure en angle (0 √† 360 degr√©s)\nmsg.payload = angle;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2040,
        "y": 180,
        "wires": [
            [
                "85d27dbceedff377"
            ]
        ]
    },
    {
        "id": "a80a6bbdac7340c4",
        "type": "ui_gauge",
        "z": "f21a30839d1a3fa7",
        "name": "",
        "group": "ef3eaa6cb3d4cfaa",
        "order": 0,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "gauge",
        "label": "heure",
        "format": "{{value}}",
        "min": 0,
        "max": "360",
        "colors": [
            "#33bdc7",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 2590,
        "y": 180,
        "wires": []
    },
    {
        "id": "85d27dbceedff377",
        "type": "ui_template",
        "z": "f21a30839d1a3fa7",
        "group": "ef3eaa6cb3d4cfaa",
        "name": "Horloge",
        "order": 0,
        "width": 0,
        "height": 0,
        "format": "<div id=\"clock\" style=\"position: relative; width: 200px; height: 200px;\">\n    <svg width=\"200\" height=\"200\" viewBox=\"0 0 200 200\">\n        <!-- Cercle ext√©rieur -->\n        <circle cx=\"100\" cy=\"100\" r=\"90\" stroke=\"black\" stroke-width=\"3\" fill=\"none\" />\n\n        <!-- Graduations des heures -->\n        <g id=\"hour-grads\">\n            <!-- Nous ajoutons 12 graduations pour les heures -->\n            <line x1=\"100\" y1=\"10\" x2=\"100\" y2=\"20\" stroke=\"black\" stroke-width=\"2\" transform=\"rotate(0, 100, 100)\" />\n            <line x1=\"100\" y1=\"10\" x2=\"100\" y2=\"20\" stroke=\"black\" stroke-width=\"2\" transform=\"rotate(30, 100, 100)\" />\n            <line x1=\"100\" y1=\"10\" x2=\"100\" y2=\"20\" stroke=\"black\" stroke-width=\"2\" transform=\"rotate(60, 100, 100)\" />\n            <line x1=\"100\" y1=\"10\" x2=\"100\" y2=\"20\" stroke=\"black\" stroke-width=\"2\" transform=\"rotate(90, 100, 100)\" />\n            <line x1=\"100\" y1=\"10\" x2=\"100\" y2=\"20\" stroke=\"black\" stroke-width=\"2\" transform=\"rotate(120, 100, 100)\" />\n            <line x1=\"100\" y1=\"10\" x2=\"100\" y2=\"20\" stroke=\"black\" stroke-width=\"2\" transform=\"rotate(150, 100, 100)\" />\n            <line x1=\"100\" y1=\"10\" x2=\"100\" y2=\"20\" stroke=\"black\" stroke-width=\"2\" transform=\"rotate(180, 100, 100)\" />\n            <line x1=\"100\" y1=\"10\" x2=\"100\" y2=\"20\" stroke=\"black\" stroke-width=\"2\" transform=\"rotate(210, 100, 100)\" />\n            <line x1=\"100\" y1=\"10\" x2=\"100\" y2=\"20\" stroke=\"black\" stroke-width=\"2\" transform=\"rotate(240, 100, 100)\" />\n            <line x1=\"100\" y1=\"10\" x2=\"100\" y2=\"20\" stroke=\"black\" stroke-width=\"2\" transform=\"rotate(270, 100, 100)\" />\n            <line x1=\"100\" y1=\"10\" x2=\"100\" y2=\"20\" stroke=\"black\" stroke-width=\"2\" transform=\"rotate(300, 100, 100)\" />\n            <line x1=\"100\" y1=\"10\" x2=\"100\" y2=\"20\" stroke=\"black\" stroke-width=\"2\" transform=\"rotate(330, 100, 100)\" />\n        </g>\n\n        <!-- Graduations interm√©diaires des minutes -->\n        <g id=\"minute-grads\">\n            <!-- Nous ajoutons 60 graduations pour les minutes -->\n            <line x1=\"100\" y1=\"10\" x2=\"100\" y2=\"15\" stroke=\"black\" stroke-width=\"1\" transform=\"rotate(6, 100, 100)\" />\n            <line x1=\"100\" y1=\"10\" x2=\"100\" y2=\"15\" stroke=\"black\" stroke-width=\"1\" transform=\"rotate(12, 100, 100)\" />\n            <line x1=\"100\" y1=\"10\" x2=\"100\" y2=\"15\" stroke=\"black\" stroke-width=\"1\" transform=\"rotate(18, 100, 100)\" />\n            <line x1=\"100\" y1=\"10\" x2=\"100\" y2=\"15\" stroke=\"black\" stroke-width=\"1\" transform=\"rotate(24, 100, 100)\" />\n            <!-- ... Ajoutez les autres graduations -->\n        </g>\n\n        <!-- Aiguilles -->\n        <line id=\"hour\" x1=\"100\" y1=\"100\" x2=\"100\" y2=\"30\" stroke=\"black\" stroke-width=\"6\" />\n        <line id=\"minute\" x1=\"100\" y1=\"100\" x2=\"100\" y2=\"20\" stroke=\"black\" stroke-width=\"4\" />\n        <line id=\"second\" x1=\"100\" y1=\"100\" x2=\"100\" y2=\"10\" stroke=\"red\" stroke-width=\"2\" />\n    </svg>\n</div>\n\n<script>\n    function updateClock() {\n        var currentTime = new Date();\n        var hours = currentTime.getHours();\n        var minutes = currentTime.getMinutes();\n        var seconds = currentTime.getSeconds();\n\n        // Convertir l'heure, les minutes et les secondes en degr√©s\n        var hourAngle = (hours % 12) * 30 + (minutes / 60) * 30;  // Heure (0-360¬∞)\n        var minuteAngle = minutes * 6; // Minute (0-360¬∞)\n        var secondAngle = seconds * 6; // Seconde (0-360¬∞)\n\n        // Appliquer les angles aux aiguilles\n        document.getElementById('hour').setAttribute('transform', 'rotate(' + hourAngle + ', 100, 100)');\n        document.getElementById('minute').setAttribute('transform', 'rotate(' + minuteAngle + ', 100, 100)');\n        document.getElementById('second').setAttribute('transform', 'rotate(' + secondAngle + ', 100, 100)');\n    }\n\n    setInterval(updateClock, 1000);  // Mise √† jour chaque seconde\n    updateClock();  // Initialisation imm√©diate\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2340,
        "y": 180,
        "wires": [
            [
                "a80a6bbdac7340c4"
            ]
        ]
    },
    {
        "id": "e90619e69e66fae1",
        "type": "inject",
        "z": "f21a30839d1a3fa7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Test d'e-mail",
        "payload": "envoie de mail test",
        "payloadType": "str",
        "x": 190,
        "y": 140,
        "wires": [
            [
                "e9b8224acb56cec4"
            ]
        ]
    },
    {
        "id": "e9b8224acb56cec4",
        "type": "function",
        "z": "f21a30839d1a3fa7",
        "name": "function 2",
        "func": "msg.payload = {\n    to: \"sicotpi@gmail.com\", // Remplacez par votre adresse Gmail\n    topic: \"envoi d'e-mail via Node-red\",\n    payload: \"Le test simple est valid√©\",\n    from: \"sicotpi@gmail.com\" // Adresse Gmail de l'exp√©diteur\n};\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 140,
        "wires": [
            [
                "3b2c4cdbf23d7fbe"
            ]
        ]
    },
    {
        "id": "3b2c4cdbf23d7fbe",
        "type": "e-mail",
        "z": "f21a30839d1a3fa7",
        "server": "smtp.gmail.com",
        "port": "587",
        "authtype": "BASIC",
        "saslformat": true,
        "token": "oauth2Response.access_token",
        "secure": false,
        "tls": true,
        "name": "sicotpi@gmail.com",
        "dname": "",
        "x": 750,
        "y": 140,
        "wires": []
    },
    {
        "id": "6208fed6c341471a",
        "type": "inject",
        "z": "8f925867aacf519c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 730,
        "y": 1120,
        "wires": [
            [
                "cdb09f0fef48e4e2"
            ]
        ]
    },
    {
        "id": "cdb09f0fef48e4e2",
        "type": "function",
        "z": "8f925867aacf519c",
        "name": "function 3",
        "func": "var currentTime = new Date();\nvar hours = currentTime.getHours();\nvar angle = (hours % 12) * 30;  // Convertir l'heure en angle (0 √† 360 degr√©s)\nmsg.payload = angle;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 1120,
        "wires": [
            [
                "885027dbacfd8a5a"
            ]
        ]
    },
    {
        "id": "388dbadacd30e4f3",
        "type": "ui_gauge",
        "z": "8f925867aacf519c",
        "name": "",
        "group": "ef3eaa6cb3d4cfaa",
        "order": 0,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "gauge",
        "label": "heure",
        "format": "{{value}}",
        "min": 0,
        "max": "360",
        "colors": [
            "#33bdc7",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1530,
        "y": 1100,
        "wires": []
    },
    {
        "id": "885027dbacfd8a5a",
        "type": "ui_template",
        "z": "8f925867aacf519c",
        "group": "ef3eaa6cb3d4cfaa",
        "name": "Horloge",
        "order": 0,
        "width": 0,
        "height": 0,
        "format": "<div id=\"clock\" style=\"position: relative; width: 200px; height: 200px;\">\n    <svg width=\"200\" height=\"200\" viewBox=\"0 0 200 200\">\n        <!-- Cercle ext√©rieur -->\n        <circle cx=\"100\" cy=\"100\" r=\"90\" stroke=\"black\" stroke-width=\"3\" fill=\"none\" />\n\n        <!-- Graduations des heures -->\n        <g id=\"hour-grads\">\n            <!-- Nous ajoutons 12 graduations pour les heures -->\n            <line x1=\"100\" y1=\"10\" x2=\"100\" y2=\"20\" stroke=\"black\" stroke-width=\"2\" transform=\"rotate(0, 100, 100)\" />\n            <line x1=\"100\" y1=\"10\" x2=\"100\" y2=\"20\" stroke=\"black\" stroke-width=\"2\" transform=\"rotate(30, 100, 100)\" />\n            <line x1=\"100\" y1=\"10\" x2=\"100\" y2=\"20\" stroke=\"black\" stroke-width=\"2\" transform=\"rotate(60, 100, 100)\" />\n            <line x1=\"100\" y1=\"10\" x2=\"100\" y2=\"20\" stroke=\"black\" stroke-width=\"2\" transform=\"rotate(90, 100, 100)\" />\n            <line x1=\"100\" y1=\"10\" x2=\"100\" y2=\"20\" stroke=\"black\" stroke-width=\"2\" transform=\"rotate(120, 100, 100)\" />\n            <line x1=\"100\" y1=\"10\" x2=\"100\" y2=\"20\" stroke=\"black\" stroke-width=\"2\" transform=\"rotate(150, 100, 100)\" />\n            <line x1=\"100\" y1=\"10\" x2=\"100\" y2=\"20\" stroke=\"black\" stroke-width=\"2\" transform=\"rotate(180, 100, 100)\" />\n            <line x1=\"100\" y1=\"10\" x2=\"100\" y2=\"20\" stroke=\"black\" stroke-width=\"2\" transform=\"rotate(210, 100, 100)\" />\n            <line x1=\"100\" y1=\"10\" x2=\"100\" y2=\"20\" stroke=\"black\" stroke-width=\"2\" transform=\"rotate(240, 100, 100)\" />\n            <line x1=\"100\" y1=\"10\" x2=\"100\" y2=\"20\" stroke=\"black\" stroke-width=\"2\" transform=\"rotate(270, 100, 100)\" />\n            <line x1=\"100\" y1=\"10\" x2=\"100\" y2=\"20\" stroke=\"black\" stroke-width=\"2\" transform=\"rotate(300, 100, 100)\" />\n            <line x1=\"100\" y1=\"10\" x2=\"100\" y2=\"20\" stroke=\"black\" stroke-width=\"2\" transform=\"rotate(330, 100, 100)\" />\n        </g>\n\n        <!-- Graduations interm√©diaires des minutes -->\n        <g id=\"minute-grads\">\n            <!-- Nous ajoutons 60 graduations pour les minutes -->\n            <line x1=\"100\" y1=\"10\" x2=\"100\" y2=\"15\" stroke=\"black\" stroke-width=\"1\" transform=\"rotate(6, 100, 100)\" />\n            <line x1=\"100\" y1=\"10\" x2=\"100\" y2=\"15\" stroke=\"black\" stroke-width=\"1\" transform=\"rotate(12, 100, 100)\" />\n            <line x1=\"100\" y1=\"10\" x2=\"100\" y2=\"15\" stroke=\"black\" stroke-width=\"1\" transform=\"rotate(18, 100, 100)\" />\n            <line x1=\"100\" y1=\"10\" x2=\"100\" y2=\"15\" stroke=\"black\" stroke-width=\"1\" transform=\"rotate(24, 100, 100)\" />\n            <!-- ... Ajoutez les autres graduations -->\n        </g>\n\n        <!-- Aiguilles -->\n        <line id=\"hour\" x1=\"100\" y1=\"100\" x2=\"100\" y2=\"30\" stroke=\"black\" stroke-width=\"6\" />\n        <line id=\"minute\" x1=\"100\" y1=\"100\" x2=\"100\" y2=\"20\" stroke=\"black\" stroke-width=\"4\" />\n        <line id=\"second\" x1=\"100\" y1=\"100\" x2=\"100\" y2=\"10\" stroke=\"red\" stroke-width=\"2\" />\n    </svg>\n</div>\n\n<script>\n    function updateClock() {\n        var currentTime = new Date();\n        var hours = currentTime.getHours();\n        var minutes = currentTime.getMinutes();\n        var seconds = currentTime.getSeconds();\n\n        // Convertir l'heure, les minutes et les secondes en degr√©s\n        var hourAngle = (hours % 12) * 30 + (minutes / 60) * 30;  // Heure (0-360¬∞)\n        var minuteAngle = minutes * 6; // Minute (0-360¬∞)\n        var secondAngle = seconds * 6; // Seconde (0-360¬∞)\n\n        // Appliquer les angles aux aiguilles\n        document.getElementById('hour').setAttribute('transform', 'rotate(' + hourAngle + ', 100, 100)');\n        document.getElementById('minute').setAttribute('transform', 'rotate(' + minuteAngle + ', 100, 100)');\n        document.getElementById('second').setAttribute('transform', 'rotate(' + secondAngle + ', 100, 100)');\n    }\n\n    setInterval(updateClock, 1000);  // Mise √† jour chaque seconde\n    updateClock();  // Initialisation imm√©diate\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1280,
        "y": 1100,
        "wires": [
            [
                "388dbadacd30e4f3"
            ]
        ]
    },
    {
        "id": "b4a944a6f613afb4",
        "type": "inject",
        "z": "8f925867aacf519c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Info Temp√©rature",
        "payload": "{     \"envoie d'un mail\": true,     \"temperature\": 98}",
        "payloadType": "json",
        "x": 150,
        "y": 200,
        "wires": [
            [
                "e349e97e5e4d0252"
            ]
        ]
    },
    {
        "id": "e349e97e5e4d0252",
        "type": "function",
        "z": "8f925867aacf519c",
        "name": "envoi du mail sous condition (sur la temp√©rature)",
        "func": "var temperature = msg.payload.temperature;\n\n\nif (85 <= temperature && temperature <= 120) {\n\n\n    msg.payload = {\n        to: \"p.sicot@daher.com\", \n        topic: \"Tous les voyants sont au vert !!\",\n        payload: \"La temp√©rature est dans la plage normale\",\n        from: \"p.sicot@daher.com\" \n    };\n    return msg;\n\n} else{\n    msg.payload = {\n        to: \"p.sicot@daher.com\", \n        topic: \"!! Alerte !! Temp√©rature !! hors plage !!\",\n        payload: \"La temp√©rature est hors plage \",\n        from: \"p.sicot@daher.com\" \n    };\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 200,
        "wires": [
            [
                "fa6f2694d2e7ecaa"
            ]
        ]
    },
    {
        "id": "fa6f2694d2e7ecaa",
        "type": "e-mail",
        "z": "8f925867aacf519c",
        "server": "mail1.dahergroup.com",
        "port": "25",
        "authtype": "NONE",
        "saslformat": true,
        "token": "oauth2Response.access_token",
        "secure": false,
        "tls": false,
        "name": "p.sicot@daher.com",
        "dname": "",
        "x": 890,
        "y": 200,
        "wires": []
    },
    {
        "id": "e72e3d4bd0e759ef",
        "type": "catch",
        "z": "8f925867aacf519c",
        "name": "erreurs noeud mail",
        "scope": [
            "fa6f2694d2e7ecaa"
        ],
        "uncaught": false,
        "x": 470,
        "y": 280,
        "wires": [
            [
                "fa6f2694d2e7ecaa",
                "36b2cae03572ce41"
            ]
        ]
    },
    {
        "id": "36b2cae03572ce41",
        "type": "debug",
        "z": "8f925867aacf519c",
        "name": "debug 11",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 320,
        "wires": []
    },
    {
        "id": "757117eeb473f6cf",
        "type": "comment",
        "z": "8f925867aacf519c",
        "name": "Verifier la s√©curit√© micorsoft",
        "info": "_TODO_ : aller dans les param√®tres de s√©curit√© microsoft",
        "x": 340,
        "y": 40,
        "wires": []
    },
    {
        "id": "575924a5bc617342",
        "type": "comment",
        "z": "8f925867aacf519c",
        "name": "",
        "info": "On met un noeud 'catch' ici \npour r√©cup√©rer les erreurs provenant \ndu noeud mail\nDans le noeud inject, il faut renseigner \nune temp√©rature en dur\nC'est une version de base\npuisqu'on ne r√©cup√®re pas de donn√©es machine;\nDans le noeud 'fct', on renseigne les infos li√©es au mail\ndest, recept, subj etc .\nrmq : \nEn Js, on ne peut pas √©crire \n\"if (a < value < b), \ncar l'op√©ration effectu√©e serait\nd'abord a<b : \"True/False\"\nCette valeur bool√©enne sera attribu√©e √† \"value\"\nCela va poser pb quand on va comparer \"valu\" √† b\n(on ne peut pas comparer un bool√©en avec un nb)\n",
        "x": 430,
        "y": 400,
        "wires": []
    },
    {
        "id": "80ec1389ba847fe6",
        "type": "inject",
        "z": "9bab2ee7b28510b6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1850,
        "y": 260,
        "wires": [
            [
                "abcd31cf68ccbde3"
            ]
        ]
    },
    {
        "id": "abcd31cf68ccbde3",
        "type": "function",
        "z": "9bab2ee7b28510b6",
        "name": "function 6",
        "func": "var currentTime = new Date();\nvar hours = currentTime.getHours();\nvar angle = (hours % 12) * 30;  // Convertir l'heure en angle (0 √† 360 degr√©s)\nmsg.payload = angle;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2060,
        "y": 260,
        "wires": [
            [
                "2a77db235f611c03"
            ]
        ]
    },
    {
        "id": "de2412a2b1b13914",
        "type": "ui_gauge",
        "z": "9bab2ee7b28510b6",
        "name": "",
        "group": "ef3eaa6cb3d4cfaa",
        "order": 0,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "gauge",
        "label": "heure",
        "format": "{{value}}",
        "min": 0,
        "max": "360",
        "colors": [
            "#33bdc7",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 2610,
        "y": 260,
        "wires": []
    },
    {
        "id": "2a77db235f611c03",
        "type": "ui_template",
        "z": "9bab2ee7b28510b6",
        "group": "ef3eaa6cb3d4cfaa",
        "name": "Horloge",
        "order": 0,
        "width": 0,
        "height": 0,
        "format": "<div id=\"clock\" style=\"position: relative; width: 200px; height: 200px;\">\n    <svg width=\"200\" height=\"200\" viewBox=\"0 0 200 200\">\n        <!-- Cercle ext√©rieur -->\n        <circle cx=\"100\" cy=\"100\" r=\"90\" stroke=\"black\" stroke-width=\"3\" fill=\"none\" />\n\n        <!-- Graduations des heures -->\n        <g id=\"hour-grads\">\n            <!-- Nous ajoutons 12 graduations pour les heures -->\n            <line x1=\"100\" y1=\"10\" x2=\"100\" y2=\"20\" stroke=\"black\" stroke-width=\"2\" transform=\"rotate(0, 100, 100)\" />\n            <line x1=\"100\" y1=\"10\" x2=\"100\" y2=\"20\" stroke=\"black\" stroke-width=\"2\" transform=\"rotate(30, 100, 100)\" />\n            <line x1=\"100\" y1=\"10\" x2=\"100\" y2=\"20\" stroke=\"black\" stroke-width=\"2\" transform=\"rotate(60, 100, 100)\" />\n            <line x1=\"100\" y1=\"10\" x2=\"100\" y2=\"20\" stroke=\"black\" stroke-width=\"2\" transform=\"rotate(90, 100, 100)\" />\n            <line x1=\"100\" y1=\"10\" x2=\"100\" y2=\"20\" stroke=\"black\" stroke-width=\"2\" transform=\"rotate(120, 100, 100)\" />\n            <line x1=\"100\" y1=\"10\" x2=\"100\" y2=\"20\" stroke=\"black\" stroke-width=\"2\" transform=\"rotate(150, 100, 100)\" />\n            <line x1=\"100\" y1=\"10\" x2=\"100\" y2=\"20\" stroke=\"black\" stroke-width=\"2\" transform=\"rotate(180, 100, 100)\" />\n            <line x1=\"100\" y1=\"10\" x2=\"100\" y2=\"20\" stroke=\"black\" stroke-width=\"2\" transform=\"rotate(210, 100, 100)\" />\n            <line x1=\"100\" y1=\"10\" x2=\"100\" y2=\"20\" stroke=\"black\" stroke-width=\"2\" transform=\"rotate(240, 100, 100)\" />\n            <line x1=\"100\" y1=\"10\" x2=\"100\" y2=\"20\" stroke=\"black\" stroke-width=\"2\" transform=\"rotate(270, 100, 100)\" />\n            <line x1=\"100\" y1=\"10\" x2=\"100\" y2=\"20\" stroke=\"black\" stroke-width=\"2\" transform=\"rotate(300, 100, 100)\" />\n            <line x1=\"100\" y1=\"10\" x2=\"100\" y2=\"20\" stroke=\"black\" stroke-width=\"2\" transform=\"rotate(330, 100, 100)\" />\n        </g>\n\n        <!-- Graduations interm√©diaires des minutes -->\n        <g id=\"minute-grads\">\n            <!-- Nous ajoutons 60 graduations pour les minutes -->\n            <line x1=\"100\" y1=\"10\" x2=\"100\" y2=\"15\" stroke=\"black\" stroke-width=\"1\" transform=\"rotate(6, 100, 100)\" />\n            <line x1=\"100\" y1=\"10\" x2=\"100\" y2=\"15\" stroke=\"black\" stroke-width=\"1\" transform=\"rotate(12, 100, 100)\" />\n            <line x1=\"100\" y1=\"10\" x2=\"100\" y2=\"15\" stroke=\"black\" stroke-width=\"1\" transform=\"rotate(18, 100, 100)\" />\n            <line x1=\"100\" y1=\"10\" x2=\"100\" y2=\"15\" stroke=\"black\" stroke-width=\"1\" transform=\"rotate(24, 100, 100)\" />\n            <!-- ... Ajoutez les autres graduations -->\n        </g>\n\n        <!-- Aiguilles -->\n        <line id=\"hour\" x1=\"100\" y1=\"100\" x2=\"100\" y2=\"30\" stroke=\"black\" stroke-width=\"6\" />\n        <line id=\"minute\" x1=\"100\" y1=\"100\" x2=\"100\" y2=\"20\" stroke=\"black\" stroke-width=\"4\" />\n        <line id=\"second\" x1=\"100\" y1=\"100\" x2=\"100\" y2=\"10\" stroke=\"red\" stroke-width=\"2\" />\n    </svg>\n</div>\n\n<script>\n    function updateClock() {\n        var currentTime = new Date();\n        var hours = currentTime.getHours();\n        var minutes = currentTime.getMinutes();\n        var seconds = currentTime.getSeconds();\n\n        // Convertir l'heure, les minutes et les secondes en degr√©s\n        var hourAngle = (hours % 12) * 30 + (minutes / 60) * 30;  // Heure (0-360¬∞)\n        var minuteAngle = minutes * 6; // Minute (0-360¬∞)\n        var secondAngle = seconds * 6; // Seconde (0-360¬∞)\n\n        // Appliquer les angles aux aiguilles\n        document.getElementById('hour').setAttribute('transform', 'rotate(' + hourAngle + ', 100, 100)');\n        document.getElementById('minute').setAttribute('transform', 'rotate(' + minuteAngle + ', 100, 100)');\n        document.getElementById('second').setAttribute('transform', 'rotate(' + secondAngle + ', 100, 100)');\n    }\n\n    setInterval(updateClock, 1000);  // Mise √† jour chaque seconde\n    updateClock();  // Initialisation imm√©diate\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2360,
        "y": 260,
        "wires": [
            [
                "de2412a2b1b13914"
            ]
        ]
    },
    {
        "id": "eb8a81c2e09f5566",
        "type": "inject",
        "z": "9bab2ee7b28510b6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Info Temp√©rature",
        "payload": "{     \"envoie d'un mail\": true,     \"temperature\": 98}",
        "payloadType": "json",
        "x": 130,
        "y": 220,
        "wires": [
            [
                "fc1cdd5664022c44"
            ]
        ]
    },
    {
        "id": "fc1cdd5664022c44",
        "type": "function",
        "z": "9bab2ee7b28510b6",
        "name": "envoi du mail sous condition (sur la temp√©rature)",
        "func": "var temperature = msg.payload.temperature;\n\n// on v√©rifie que la temp est valide\n\nif (typeof temperature !== 'number' || isNaN(temperature)) {\n    //typeof renvoie le type d'une var sous forme de str\n    //isNaN <-> None en python, cela signifie que le resultat est invalide\n    // En somme, si le type de temp n'est pas un nb (int | float), ou si si la res de temp est invalide\n    //On aura alors une erreur de donn√©es (capteurs d√©fectueux par exemple)\n    msg.payload = {\n        to: \"p.sicot@daher.com\",\n        topic: \"Erreur donn√©e, v√©rifier capteur !\",\n        payload: \"La valeur de la temp√©rature est invalide ou manquante.\",\n        from: \"p.sicot@daher.com\"\n    };\n    return msg; \n}\n\n// D√©finition des seuils de temp√©rature (ici illustratifs)\n// En r√©alit√©, ils vont d√©pendre de notre mati√®re, machine, etc.\nvar tempMin = 85;\nvar tempMax = 120;\nvar currentDateTime = new Date().toLocaleString();  // Date et heure actuelle\n\n// Si la temp√©rature est ‚àà [seuil1; seuil2] => \"Tous les voyants sont au vert\"\nif (temperature >= tempMin && temperature <= tempMax) {\n    msg.payload = {\n        to: \"p.sicot@daher.com\",\n        topic: \"Tous les voyants sont au vert !!\",  // Sujet du mail\n        payload: \"La temp√©rature actuelle est de \" + temperature + \"¬∞C, qui se trouve dans la plage normale de fonctionnement.\\n\" +\n                 \"V√©rification effectu√©e le \" + currentDateTime + \".\",  // Corps du message\n        from: \"p.sicot@daher.com\"\n    };\n    return msg;  // Retourne le message normal\n\n} else {\n    // Si la temp√©rature ‚àâ [seuil1, seuil2], envoi du mail d'alerte \"Urgent\"\n    msg.payload = {\n        to: \"p.sicot@daher.com\",\n        topic: \"!! Alerte !! Temp√©rature !! hors plage !!\",  // Sujet d'alerte\n        payload: \"ALERTE ! La temp√©rature actuelle est de \" + temperature + \"¬∞C, ce qui est en dehors de la plage normale de fonctionnement.\\n\" +\n                 \"V√©rification effectu√©e le \" + currentDateTime + \".\\n\" +\n                 \"Veuillez v√©rifier imm√©diatement.\",  // Corps du message\n        from: \"p.sicot@daher.com\"\n    };\n    return msg;  // Retourne le message d'alerte\n}\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 220,
        "wires": [
            [
                "65869a382fe66e46"
            ]
        ]
    },
    {
        "id": "65869a382fe66e46",
        "type": "e-mail",
        "z": "9bab2ee7b28510b6",
        "server": "mail1.dahergroup.com",
        "port": "25",
        "authtype": "BASIC",
        "saslformat": true,
        "token": "oauth2Response.access_token",
        "secure": false,
        "tls": false,
        "name": "p.sicot@daher.com",
        "dname": "",
        "x": 770,
        "y": 220,
        "wires": []
    },
    {
        "id": "70cba0a42378da87",
        "type": "catch",
        "z": "9bab2ee7b28510b6",
        "name": "erreurs noeud mail",
        "scope": [
            "65869a382fe66e46"
        ],
        "uncaught": false,
        "x": 470,
        "y": 300,
        "wires": [
            [
                "65869a382fe66e46",
                "8e8e02236ce81c32"
            ]
        ]
    },
    {
        "id": "8e8e02236ce81c32",
        "type": "debug",
        "z": "9bab2ee7b28510b6",
        "name": "debug 13",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 340,
        "wires": []
    },
    {
        "id": "c1809f26cce20ac0",
        "type": "comment",
        "z": "9bab2ee7b28510b6",
        "name": "Verifier la s√©curit√© micorsoft",
        "info": "_TODO_ : aller dans les param√®tres de s√©curit√© microsoft",
        "x": 320,
        "y": 60,
        "wires": []
    },
    {
        "id": "03ddda6fb8af53be",
        "type": "comment",
        "z": "9bab2ee7b28510b6",
        "name": "v2",
        "info": "Ici, ce que l'on a ajout√© au code\nest la notion de seuil de temp√©rature\nOn v√©rifie d'abord si la donn√©e entr√©e \nest un nombre :\nSi la donn√©e entr√©e est inexistante\nou si elle n'est pas de type \"numberr\"\nUn mail s'envoie pour informer l'utilisateur\nque la donn√©e est invalide\ncela peut se caract√©riser par une v√©rif capteur \n\"if (typeof temperature !== 'number' || isNaN(temperature)) {\n    //typeof renvoie le type d'une var sous forme de str\n    //isNaN <-> None en python, cela signifie que le resultat est invalide\n    // En somme, si le type de temp n'est pas un nb (int | float), ou si si la res de temp est invalide\n    //On aura alors une erreur de donn√©es (capteurs d√©fectueux par exemple)\n    msg.payload = {\n        to: \"p.sicot@daher.com\",\n        topic: \"Erreur donn√©e, v√©rifier capteur !\",\n        payload: \"La valeur de la temp√©rature est invalide ou manquante.\",\n        from: \"p.sicot@daher.com\"\n    };\n    return msg; \n}\"\nOn d√©finit deux seuils de temp \nune borne inf et une borne sup\nSi la valeur n'est pas comprise dans l'intervalle\n=> mail d'alerte temp√©rature \nCe programme tient compte de l'heure et date courante \n\"var currentDateTime = new Date().toLocaleString();  // Date et heure actuelle\"\n",
        "x": 410,
        "y": 460,
        "wires": []
    },
    {
        "id": "096d47dd04b8dc96",
        "type": "comment",
        "z": "9bab2ee7b28510b6",
        "name": "",
        "info": "On met un noeud 'catch' ici \npour r√©cup√©rer les erreurs provenant \ndu noeud mail\nDans le noeud inject, il faut renseigner \nune temp√©rature en dur\nC'est une version de base\npuisqu'on ne r√©cup√®re pas de donn√©es machine;\nDans le noeud 'fct', on renseigne les infos li√©es au mail\ndest, recept, subj etc .\nrmq : \nEn Js, on ne peut pas √©crire \n\"if (a < value < b), \ncar l'op√©ration effectu√©e serait\nd'abord a<b : \"True/False\"\nCette valeur bool√©enne sera attribu√©e √† \"value\"\nCela va poser pb quand on va comparer \"valu\" √† b\n(on ne peut pas comparer un bool√©en avec un nb)\n",
        "x": 470,
        "y": 400,
        "wires": []
    },
    {
        "id": "08b4aeb2a62fac4c",
        "type": "function",
        "z": "240c69393d2a799d",
        "name": "envoi du mail sous contrainte (sur la temp√©rature), ",
        "func": "var temperature = msg.payload.temperature;\n\n// on v√©rifie que la temp est valide\n\nif (typeof temperature !== 'number' || isNaN(temperature)) {\n    //typeof renvoie le type d'une var sous forme de str\n    //isNaN <-> None en python, cela signifie que le resultat est invalide\n    // En somme, si le type de temp n'est pas un nb (int | float), ou si si la res de temp est invalide\n    //On aura alors une erreur de donn√©es (capteurs d√©fectueux par exemple)\n    msg.payload = {\n        to: \"p.sicot@daher.com\",\n        topic: \"Erreur donn√©e, v√©rifier capteur !\",\n        payload: \"La valeur de la temp√©rature est invalide ou manquante.\",\n        from: \"p.sicot@daher.com\"\n    };\n    return msg; \n}\n\n// seuils de temp√©rature depuis \"inject\" (ou valeurs par d√©faut)\nvar tempMin = msg.payload.tempMin || 85;  // Valeur par d√©faut de 85 si non d√©finie\nvar tempMax = msg.payload.tempMax || 120;  // Valeur par d√©faut de 120 si non d√©finie\n\n// V√©rification des seuils dynamiques\nif (typeof tempMin !== 'number' || isNaN(tempMin) || typeof tempMax !== 'number' || isNaN(tempMax)) {\n    msg.payload = {\n        to: \"p.sicot@daher.com\",\n        topic: \"Erreur dans la configuration des seuils de temp√©rature\",\n        payload: \"Les seuils de temp√©rature sont invalides ou manquants.\",\n        from: \"p.sicot@daher.com\"\n    };\n    return msg;\n}\n\nvar currentDateTime = new Date().toLocaleString();\n\n// Si la temp√©rature est ‚àà [seuil1; seuil2] => \"Tous les voyants sont au vert\"\nif (temperature >= tempMin && temperature <= tempMax) {\n    // temp dans la plage des seuils retenue\n    msg.payload = {\n        to: \"p.sicot@daher.com\",\n        topic: \"Tous les voyants sont au vert !!\",\n        payload: `La temp√©rature actuelle est de ${temperature}¬∞C, qui se trouve dans la plage normale de fonctionnement.\\nV√©rification effectu√©e le ${currentDateTime}.`,\n        from: \"p.sicot@daher.com\"\n    };\n    return msg;  // Retourne le message normal\n\n} else {\n    // Si la temp√©rature ‚àâ [seuil1, seuil2], envoi du mail d'alerte \"Urgent\"   \n     msg.payload = {\n        to: \"p.sicot@daher.com\",\n        topic: \"!! Alerte !! Temp√©rature !! hors plage !!\",\n        payload: `ALERTE ! La temp√©rature actuelle est de ${temperature}¬∞C, ce qui est en dehors de la plage normale de fonctionnement.\\nV√©rification effectu√©e le ${currentDateTime}.\\n Veuillez v√©rifier imm√©diatement.`,\n        from: \"p.sicot@daher.com\"\n    };\n    return msg;  // Retourne le message d'alerte\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 140,
        "wires": [
            [
                "2c1ee59fd6f1f67d"
            ]
        ]
    },
    {
        "id": "70ee721e069bcf16",
        "type": "inject",
        "z": "240c69393d2a799d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{     \"payload\": {         \"temperature\": 98,         \"tempMin\": 80,         \"tempMax\": 110     } }",
        "payloadType": "json",
        "x": 70,
        "y": 140,
        "wires": [
            [
                "08b4aeb2a62fac4c"
            ]
        ]
    },
    {
        "id": "417f2c16167ab554",
        "type": "debug",
        "z": "240c69393d2a799d",
        "name": "debug 14",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 420,
        "y": 260,
        "wires": []
    },
    {
        "id": "2c1ee59fd6f1f67d",
        "type": "e-mail",
        "z": "240c69393d2a799d",
        "server": "mail1.dahergroup.com",
        "port": "25",
        "authtype": "NONE",
        "saslformat": true,
        "token": "oauth2Response.access_token",
        "secure": false,
        "tls": false,
        "name": "p.sicot@daher.com",
        "dname": "",
        "x": 570,
        "y": 80,
        "wires": []
    },
    {
        "id": "e88c98f4c7877e3e",
        "type": "catch",
        "z": "240c69393d2a799d",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 260,
        "y": 220,
        "wires": [
            [
                "2c1ee59fd6f1f67d",
                "417f2c16167ab554"
            ]
        ]
    },
    {
        "id": "b62e81d231efdd57",
        "type": "comment",
        "z": "240c69393d2a799d",
        "name": "v1",
        "info": "On met un noeud 'catch' ici \npour r√©cup√©rer les erreurs provenant \ndu noeud mail\nDans le noeud inject, il faut renseigner \nune temp√©rature en dur\nC'est une version de base\npuisqu'on ne r√©cup√®re pas de donn√©es machine;\nDans le noeud 'fct', on renseigne les infos li√©es au mail\ndest, recept, subj etc .\nrmq : \nEn Js, on ne peut pas √©crire \n\"if (a < value < b), \ncar l'op√©ration effectu√©e serait\nd'abord a<b : \"True/False\"\nCette valeur bool√©enne sera attribu√©e √† \"value\"\nCela va poser pb quand on va comparer \"valu\" √† b\n(on ne peut pas comparer un bool√©en avec un nb)\n",
        "x": 310,
        "y": 380,
        "wires": []
    },
    {
        "id": "1f533451f6251b8b",
        "type": "comment",
        "z": "240c69393d2a799d",
        "name": "v2",
        "info": "Ici, ce que l'on a ajout√© au code\nest la notion de seuil de temp√©rature\nOn v√©rifie d'abord si la donn√©e entr√©e \nest un nombre :\nSi la donn√©e entr√©e est inexistante\nou si elle n'est pas de type \"numberr\"\nUn mail s'envoie pour informer l'utilisateur\nque la donn√©e est invalide\ncela peut se caract√©riser par une v√©rif capteur \n\"if (typeof temperature !== 'number' || isNaN(temperature)) {\n    //typeof renvoie le type d'une var sous forme de str\n    //isNaN <-> None en python, cela signifie que le resultat est invalide\n    // En somme, si le type de temp n'est pas un nb (int | float), ou si si la res de temp est invalide\n    //On aura alors une erreur de donn√©es (capteurs d√©fectueux par exemple)\n    msg.payload = {\n        to: \"p.sicot@daher.com\",\n        topic: \"Erreur donn√©e, v√©rifier capteur !\",\n        payload: \"La valeur de la temp√©rature est invalide ou manquante.\",\n        from: \"p.sicot@daher.com\"\n    };\n    return msg; \n}\"\nOn d√©finit deux seuils de temp \nune borne inf et une borne sup\nSi la valeur n'est pas comprise dans l'intervalle\n=> mail d'alerte temp√©rature \nCe programme tient compte de l'heure et date courante \n\"var currentDateTime = new Date().toLocaleString();  // Date et heure actuelle\"\n",
        "x": 430,
        "y": 460,
        "wires": []
    },
    {
        "id": "e188e64e1ab0d7a0",
        "type": "comment",
        "z": "240c69393d2a799d",
        "name": "v3",
        "info": "on ajoute la notion de seuil dynamique\npar exemple selon des mati√®res dans notre cas\n\"// seuils de temp√©rature depuis \"inject\" (ou valeurs par d√©faut)\nvar tempMin = msg.payload.tempMin || 85;  // Valeur par d√©faut de 85 si non d√©finie\nvar tempMax = msg.payload.tempMax || 120;  // Valeur par d√©faut de 120 si non d√©finie\n\"\nLa valeur par d√©faut sera celle \ndes seuils statiques pr√©d√©finis \"||\"\n",
        "x": 410,
        "y": 560,
        "wires": []
    },
    {
        "id": "724dc10f8abf5747",
        "type": "inject",
        "z": "ba79586f20c05182",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Info temp√©rature",
        "payload": "{     \"payload\": {         \"temperature\": 95,         \"tempMin\": 85,         \"tempMax\": 120     } }",
        "payloadType": "json",
        "x": 490,
        "y": 140,
        "wires": [
            [
                "41385493113cced4"
            ]
        ]
    },
    {
        "id": "41385493113cced4",
        "type": "function",
        "z": "ba79586f20c05182",
        "name": "envoi du mail sous contrainte (sur la temp√©rature), ",
        "func": "var temperature = msg.payload.temperature;\n\n// on v√©rifie que la temp est valide\nif (typeof temperature !== 'number' || isNaN(temperature)) {\n    msg.payload = {\n        to: \"p.sicot@daher.com\",\n        topic: \"Erreur donn√©e, v√©rifier capteur !\",\n        payload: \"La valeur de la temp√©rature est invalide ou manquante.\",\n        from: \"p.sicot@daher.com\"\n    };\n    return msg;\n}\n\n// r√©cup√©ration des seuils de temp√©rature depuis \"inject\" (ou valeurs par d√©faut)\nvar tempMin = msg.payload.tempMin || 85;  // Valeur par d√©faut de 85 si non d√©finie\nvar tempMax = msg.payload.tempMax || 120;  // Valeur par d√©faut de 120 si non d√©finie\n\n// V√©rification des seuils dynamiques\nif (typeof tempMin !== 'number' || isNaN(tempMin) || typeof tempMax !== 'number' || isNaN(tempMax)) {\n    msg.payload = {\n        to: \"p.sicot@daher.com\",\n        topic: \"Erreur dans la configuration des seuils de temp√©rature\",\n        payload: \"Les seuils de temp√©rature sont invalides ou manquants.\",\n        from: \"p.sicot@daher.com\"\n    };\n    return msg;\n}\n\nvar currentDateTime = new Date().toLocaleString();\n\n// V√©rification de la tendance de la temp√©rature\nvar previousTemperature = context.get('previousTemperature') || temperature;\ncontext.set('previousTemperature', temperature);\n\nvar temperatureChange = temperature - previousTemperature;\nvar rapidChangeThreshold = 10; // Seuil de changement rapide de temp√©rature\n\nif (Math.abs(temperatureChange) > rapidChangeThreshold) {\n    msg.payload = {\n        to: \"p.sicot@daher.com\",\n        topic: \"Alerte : Changement rapide de temp√©rature\",\n        payload: `La temp√©rature a chang√© rapidement de ${previousTemperature}¬∞C √† ${temperature}¬∞C.\\nV√©rification effectu√©e le ${currentDateTime}.`,\n        from: \"p.sicot@daher.com\"\n    };\n    return msg;\n}\n\n// Si la temp√©rature est ‚àà [seuil1; seuil2] => \"Tous les voyants sont au vert\"\nif (temperature >= tempMin && temperature <= tempMax) {\n    msg.payload = {\n        to: \"p.sicot@daher.com\",\n        topic: \"Tous les voyants sont au vert !!\",\n        payload: `La temp√©rature actuelle est de ${temperature}¬∞C, qui se trouve dans la plage normale de fonctionnement.\\nV√©rification effectu√©e le ${currentDateTime}.`,\n        from: \"p.sicot@daher.com\"\n    };\n    return msg;  // Retourne le message normal\n\n} else {\n    msg.payload = {\n        to: \"p.sicot@daher.com\",\n        topic: \"!! Alerte !! Temp√©rature !! hors plage !!\",\n        payload: `ALERTE ! La temp√©rature actuelle est de ${temperature}¬∞C, ce qui est en dehors de la plage normale de fonctionnement.\\nV√©rification effectu√©e le ${currentDateTime}.\\n Veuillez v√©rifier imm√©diatement.`,\n        from: \"p.sicot@daher.com\"\n    };\n    return msg;  // Retourne le message d'alerte\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 140,
        "wires": [
            [
                "abbb9cb3cad7234b"
            ]
        ]
    },
    {
        "id": "abbb9cb3cad7234b",
        "type": "e-mail",
        "z": "ba79586f20c05182",
        "server": "mail1.dahergroup.com",
        "port": "25",
        "authtype": "NONE",
        "saslformat": true,
        "token": "oauth2Response.access_token",
        "secure": false,
        "tls": true,
        "name": "p.sicot@daher.com",
        "dname": "Node for sending email",
        "x": 1170,
        "y": 140,
        "wires": []
    },
    {
        "id": "ed6a1aaa8cb39bae",
        "type": "catch",
        "z": "ba79586f20c05182",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 980,
        "y": 220,
        "wires": [
            [
                "abbb9cb3cad7234b",
                "3628d1053cba4b75"
            ]
        ]
    },
    {
        "id": "3628d1053cba4b75",
        "type": "debug",
        "z": "ba79586f20c05182",
        "name": "debug 17",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 300,
        "wires": []
    },
    {
        "id": "a0777b54fd61fc4f",
        "type": "comment",
        "z": "ba79586f20c05182",
        "name": "v1",
        "info": "On met un noeud 'catch' ici \npour r√©cup√©rer les erreurs provenant \ndu noeud mail\nDans le noeud inject, il faut renseigner \nune temp√©rature en dur\nC'est une version de base\npuisqu'on ne r√©cup√®re pas de donn√©es machine;\nDans le noeud 'fct', on renseigne les infos li√©es au mail\ndest, recept, subj etc .\nrmq : \nEn Js, on ne peut pas √©crire \n\"if (a < value < b), \ncar l'op√©ration effectu√©e serait\nd'abord a<b : \"True/False\"\nCette valeur bool√©enne sera attribu√©e √† \"value\"\nCela va poser pb quand on va comparer \"valu\" √† b\n(on ne peut pas comparer un bool√©en avec un nb)\n",
        "x": 730,
        "y": 280,
        "wires": []
    },
    {
        "id": "fb5115f120333308",
        "type": "comment",
        "z": "ba79586f20c05182",
        "name": "v2",
        "info": "Ici, ce que l'on a ajout√© au code\nest la notion de seuil de temp√©rature\nOn v√©rifie d'abord si la donn√©e entr√©e \nest un nombre :\nSi la donn√©e entr√©e est inexistante\nou si elle n'est pas de type \"numberr\"\nUn mail s'envoie pour informer l'utilisateur\nque la donn√©e est invalide\ncela peut se caract√©riser par une v√©rif capteur \n\"if (typeof temperature !== 'number' || isNaN(temperature)) {\n    //typeof renvoie le type d'une var sous forme de str\n    //isNaN <-> None en python, cela signifie que le resultat est invalide\n    // En somme, si le type de temp n'est pas un nb (int | float), ou si si la res de temp est invalide\n    //On aura alors une erreur de donn√©es (capteurs d√©fectueux par exemple)\n    msg.payload = {\n        to: \"p.sicot@daher.com\",\n        topic: \"Erreur donn√©e, v√©rifier capteur !\",\n        payload: \"La valeur de la temp√©rature est invalide ou manquante.\",\n        from: \"p.sicot@daher.com\"\n    };\n    return msg; \n}\"\nOn d√©finit deux seuils de temp \nune borne inf et une borne sup\nSi la valeur n'est pas comprise dans l'intervalle\n=> mail d'alerte temp√©rature \nCe programme tient compte de l'heure et date courante \n\"var currentDateTime = new Date().toLocaleString();  // Date et heure actuelle\"\n",
        "x": 750,
        "y": 340,
        "wires": []
    },
    {
        "id": "5742e40138820a39",
        "type": "comment",
        "z": "ba79586f20c05182",
        "name": "v3",
        "info": "on ajoute la notion de seuil dynamique\npar exemple selon des mati√®res dans notre cas\n\"// seuils de temp√©rature depuis \"inject\" (ou valeurs par d√©faut)\nvar tempMin = msg.payload.tempMin || 85;  // Valeur par d√©faut de 85 si non d√©finie\nvar tempMax = msg.payload.tempMax || 120;  // Valeur par d√©faut de 120 si non d√©finie\n\"\nLa valeur par d√©faut sera celle \ndes seuils statiques pr√©d√©finis \"||\"\n",
        "x": 750,
        "y": 400,
        "wires": []
    },
    {
        "id": "e3ee1a027dddfe3c",
        "type": "comment",
        "z": "ba79586f20c05182",
        "name": "v4",
        "info": "On ajoute l'aspect de la tendance des temp√©ratures\nSi une temp√©rature varie de mani√®re anormale\non envoie un mail\n\"// V√©rification de la tendance de la temp√©rature\nvar previousTemperature = context.get('previousTemperature') || temperature;\ncontext.set('previousTemperature', temperature);\n\nvar temperatureChange = temperature - previousTemperature;\nvar variationRapide = 10; // Seuil de changement rapide de temp√©rature\"",
        "x": 750,
        "y": 460,
        "wires": []
    },
    {
        "id": "f28f8ec41957a35e",
        "type": "inject",
        "z": "073aac48e9473b76",
        "name": "D√©clencheur du script",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "le texte est lanc√©",
        "payloadType": "str",
        "x": 160,
        "y": 100,
        "wires": [
            [
                "fbf1529178427d33"
            ]
        ]
    },
    {
        "id": "fbf1529178427d33",
        "type": "function",
        "z": "073aac48e9473b76",
        "name": "collecte des infos sys",
        "func": "// On r√©cup√®re les infos\nvar site = \"Tours\";\nvar userName = process.env.USERNAME;\nvar computerName = process.env.COMPUTERNAME;\nvar userProfile = process.env.USERPROFILE;\nvar domainName = process.env.USERDOMAIN;\nvar date = new Date();\nvar jour = (\"00\" + date.getDate()).slice(-2);\nvar mois = (\"00\" + (date.getMonth() + 1)).slice(-2);\nvar an = date.getFullYear();\nvar heure = (\"00\" + date.getHours()).slice(-2);\nvar minute = (\"00\" + date.getMinutes()).slice(-2);\nvar seconde = (\"00\" + date.getSeconds()).slice(-2);\n\nvar sujetMail = \"Test script envoi mail\";\nvar smtpServer = \"mail1.dahergroup.com\";\nvar sendFrom = \"test_dashboard_nodered@daher.com\";\nvar sendTo = \"p.sicot@daher.com,p.sicot@daher.com\";\n\nvar copyResult = \"!!! TEST !!!\";\nvar sujet = copyResult + \" - \" + sujetMail + \" '\" + userName + \"' sur la station '\" + computerName + \"' du site de \" + site + \" le \" + jour + \"/\" + mois + \"/\" + an;\nvar corps = \"Test script vbs\\n\\n...........\\n!!!! ATTENTION -- ARR√äT DU SCRIPT --!!!!\";\n\n// objet du mail\nmsg.payload = {\n    to: sendTo,\n    from: sendFrom,\n    subject: sujet,\n    body: corps\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 100,
        "wires": [
            [
                "315ee0684c1dec76"
            ]
        ]
    },
    {
        "id": "315ee0684c1dec76",
        "type": "e-mail",
        "z": "073aac48e9473b76",
        "server": "mail1.dahergroup.com",
        "port": "25",
        "authtype": "BASIC",
        "saslformat": true,
        "token": "oauth2Response.access_token",
        "secure": false,
        "tls": true,
        "name": "p.sicot@daher.com",
        "dname": "",
        "x": 610,
        "y": 100,
        "wires": []
    },
    {
        "id": "e1ad8c0edd52312f",
        "type": "catch",
        "z": "073aac48e9473b76",
        "name": "erreurs noeud mail",
        "scope": [],
        "uncaught": false,
        "x": 390,
        "y": 240,
        "wires": [
            [
                "de2feff2b99ce956",
                "315ee0684c1dec76"
            ]
        ]
    },
    {
        "id": "de2feff2b99ce956",
        "type": "debug",
        "z": "073aac48e9473b76",
        "name": "debug 12",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 280,
        "wires": []
    },
    {
        "id": "cb3d28cfb47cfea7",
        "type": "inject",
        "z": "299b2b1d851ddc92",
        "name": "dividende et diviseur",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{     \"dividende\": 42,     \"diviseur\": 2 }",
        "payloadType": "json",
        "x": 170,
        "y": 200,
        "wires": [
            [
                "ad1b6c60fa18a5f9"
            ]
        ]
    },
    {
        "id": "ad1b6c60fa18a5f9",
        "type": "function",
        "z": "299b2b1d851ddc92",
        "name": "function 5",
        "func": "// R√©cup value \nvar dividende = msg.payload.dividende;\nvar diviseur = msg.payload.diviseur;\n\n// Calcul du modulo\nvar reste = dividende % diviseur;\n\n// Pr√©pare la r√©ponse \nmsg.payload = {\n    dividende: dividende,\n    diviseur: diviseur,\n    reste: reste\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 200,
        "wires": [
            [
                "834832fc6af4c896"
            ]
        ]
    },
    {
        "id": "834832fc6af4c896",
        "type": "debug",
        "z": "299b2b1d851ddc92",
        "name": "r√©s",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 200,
        "wires": []
    },
    {
        "id": "5e9690130aafd33f",
        "type": "function",
        "z": "d67dc8f5b5d3187a",
        "name": "envoi de mail v4",
        "func": "var temperature = msg.payload.temperature;\n\n// on v√©rifie que la temp est valide\nif (typeof temperature !== 'number' || isNaN(temperature)) {\n    msg.payload = {\n        to: \"p.sicot@daher.com\",\n        topic: \"Erreur donn√©e, v√©rifier capteur !\",\n        payload: \"La valeur de la temp√©rature est invalide ou manquante.\",\n        from: \"p.sicot@daher.com\"\n    };\n    return msg;\n}\n\n// r√©cup√©ration des seuils de temp√©rature depuis \"inject\" (ou valeurs par d√©faut)\nvar tempMin = msg.payload.tempMin || 85;  // Valeur par d√©faut de 85 si non d√©finie\nvar tempMax = msg.payload.tempMax || 120;  // Valeur par d√©faut de 120 si non d√©finie\n\n// V√©rification des seuils dynamiques\nif (typeof tempMin !== 'number' || isNaN(tempMin) || typeof tempMax !== 'number' || isNaN(tempMax)) {\n    msg.payload = {\n        to: \"p.sicot@daher.com\",\n        topic: \"Erreur dans la configuration des seuils de temp√©rature\",\n        payload: \"Les seuils de temp√©rature sont invalides ou manquants.\",\n        from: \"p.sicot@daher.com\"\n    };\n    return msg;\n}\n\nvar currentDateTime = new Date().toLocaleString();\n\n// V√©rification de la tendance de la temp√©rature\nvar previousTemperature = context.get('previousTemperature') || temperature;\ncontext.set('previousTemperature', temperature);\n\nvar temperatureChange = temperature - previousTemperature;\nvar variationRapide = 10; // Seuil de changement rapide de temp√©rature\n\nif (Math.abs(temperatureChange) > variationRapide) {\n    msg.payload = {\n        to: \"p.sicot@daher.com\",\n        topic: \"Alerte : Changement rapide de temp√©rature\",\n        payload: `La temp√©rature a chang√© rapidement de ${previousTemperature}¬∞C √† ${temperature}¬∞C.\\nV√©rification effectu√©e le ${currentDateTime}.`,\n        from: \"p.sicot@daher.com\"\n    };\n    return msg;\n}\n\n// Si la temp√©rature est ‚àà [seuil1; seuil2] => \"Tous les voyants sont au vert\"\nif (temperature >= tempMin && temperature <= tempMax) {\n    msg.payload = {\n        to: \"p.sicot@daher.com\",\n        topic: \"Tous les voyants sont au vert !!\",\n        payload: `La temp√©rature actuelle est de ${temperature}¬∞C, qui se trouve dans la plage normale de fonctionnement.\\nV√©rification effectu√©e le ${currentDateTime}.`,\n        from: \"p.sicot@daher.com\"\n    };\n    return msg;  // Retourne le message normal\n\n} else {\n    msg.payload = {\n        to: \"p.sicot@daher.com\",\n        topic: \"!! Alerte !! Temp√©rature !! hors plage !!\",\n        payload: `ALERTE ! La temp√©rature actuelle est de ${temperature}¬∞C, ce qui est en dehors de la plage normale de fonctionnement.\\nV√©rification effectu√©e le ${currentDateTime}.\\n Veuillez v√©rifier imm√©diatement.`,\n        from: \"p.sicot@daher.com\"\n    };\n    return msg;  // Retourne le message d'alerte\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 200,
        "wires": [
            [
                "8095c6e5a005dad6"
            ]
        ]
    },
    {
        "id": "89b637a164ea7802",
        "type": "inject",
        "z": "d67dc8f5b5d3187a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1830,
        "y": 240,
        "wires": [
            [
                "255256a172bed103"
            ]
        ]
    },
    {
        "id": "255256a172bed103",
        "type": "function",
        "z": "d67dc8f5b5d3187a",
        "name": "function 8",
        "func": "var currentTime = new Date();\nvar hours = currentTime.getHours();\nvar angle = (hours % 12) * 30;  // Convertir l'heure en angle (0 √† 360 degr√©s)\nmsg.payload = angle;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2040,
        "y": 240,
        "wires": [
            [
                "0eef0ef707152e4f"
            ]
        ]
    },
    {
        "id": "baae79a1ec7143d0",
        "type": "ui_gauge",
        "z": "d67dc8f5b5d3187a",
        "name": "",
        "group": "ef3eaa6cb3d4cfaa",
        "order": 0,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "gauge",
        "label": "heure",
        "format": "{{value}}",
        "min": 0,
        "max": "360",
        "colors": [
            "#33bdc7",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 2590,
        "y": 240,
        "wires": []
    },
    {
        "id": "0eef0ef707152e4f",
        "type": "ui_template",
        "z": "d67dc8f5b5d3187a",
        "group": "ef3eaa6cb3d4cfaa",
        "name": "Horloge",
        "order": 0,
        "width": 0,
        "height": 0,
        "format": "<div id=\"clock\" style=\"position: relative; width: 200px; height: 200px;\">\n    <svg width=\"200\" height=\"200\" viewBox=\"0 0 200 200\">\n        <!-- Cercle ext√©rieur -->\n        <circle cx=\"100\" cy=\"100\" r=\"90\" stroke=\"black\" stroke-width=\"3\" fill=\"none\" />\n\n        <!-- Graduations des heures -->\n        <g id=\"hour-grads\">\n            <!-- Nous ajoutons 12 graduations pour les heures -->\n            <line x1=\"100\" y1=\"10\" x2=\"100\" y2=\"20\" stroke=\"black\" stroke-width=\"2\" transform=\"rotate(0, 100, 100)\" />\n            <line x1=\"100\" y1=\"10\" x2=\"100\" y2=\"20\" stroke=\"black\" stroke-width=\"2\" transform=\"rotate(30, 100, 100)\" />\n            <line x1=\"100\" y1=\"10\" x2=\"100\" y2=\"20\" stroke=\"black\" stroke-width=\"2\" transform=\"rotate(60, 100, 100)\" />\n            <line x1=\"100\" y1=\"10\" x2=\"100\" y2=\"20\" stroke=\"black\" stroke-width=\"2\" transform=\"rotate(90, 100, 100)\" />\n            <line x1=\"100\" y1=\"10\" x2=\"100\" y2=\"20\" stroke=\"black\" stroke-width=\"2\" transform=\"rotate(120, 100, 100)\" />\n            <line x1=\"100\" y1=\"10\" x2=\"100\" y2=\"20\" stroke=\"black\" stroke-width=\"2\" transform=\"rotate(150, 100, 100)\" />\n            <line x1=\"100\" y1=\"10\" x2=\"100\" y2=\"20\" stroke=\"black\" stroke-width=\"2\" transform=\"rotate(180, 100, 100)\" />\n            <line x1=\"100\" y1=\"10\" x2=\"100\" y2=\"20\" stroke=\"black\" stroke-width=\"2\" transform=\"rotate(210, 100, 100)\" />\n            <line x1=\"100\" y1=\"10\" x2=\"100\" y2=\"20\" stroke=\"black\" stroke-width=\"2\" transform=\"rotate(240, 100, 100)\" />\n            <line x1=\"100\" y1=\"10\" x2=\"100\" y2=\"20\" stroke=\"black\" stroke-width=\"2\" transform=\"rotate(270, 100, 100)\" />\n            <line x1=\"100\" y1=\"10\" x2=\"100\" y2=\"20\" stroke=\"black\" stroke-width=\"2\" transform=\"rotate(300, 100, 100)\" />\n            <line x1=\"100\" y1=\"10\" x2=\"100\" y2=\"20\" stroke=\"black\" stroke-width=\"2\" transform=\"rotate(330, 100, 100)\" />\n        </g>\n\n        <!-- Graduations interm√©diaires des minutes -->\n        <g id=\"minute-grads\">\n            <!-- Nous ajoutons 60 graduations pour les minutes -->\n            <line x1=\"100\" y1=\"10\" x2=\"100\" y2=\"15\" stroke=\"black\" stroke-width=\"1\" transform=\"rotate(6, 100, 100)\" />\n            <line x1=\"100\" y1=\"10\" x2=\"100\" y2=\"15\" stroke=\"black\" stroke-width=\"1\" transform=\"rotate(12, 100, 100)\" />\n            <line x1=\"100\" y1=\"10\" x2=\"100\" y2=\"15\" stroke=\"black\" stroke-width=\"1\" transform=\"rotate(18, 100, 100)\" />\n            <line x1=\"100\" y1=\"10\" x2=\"100\" y2=\"15\" stroke=\"black\" stroke-width=\"1\" transform=\"rotate(24, 100, 100)\" />\n            <!-- ... Ajoutez les autres graduations -->\n        </g>\n\n        <!-- Aiguilles -->\n        <line id=\"hour\" x1=\"100\" y1=\"100\" x2=\"100\" y2=\"30\" stroke=\"black\" stroke-width=\"6\" />\n        <line id=\"minute\" x1=\"100\" y1=\"100\" x2=\"100\" y2=\"20\" stroke=\"black\" stroke-width=\"4\" />\n        <line id=\"second\" x1=\"100\" y1=\"100\" x2=\"100\" y2=\"10\" stroke=\"red\" stroke-width=\"2\" />\n    </svg>\n</div>\n\n<script>\n    function updateClock() {\n        var currentTime = new Date();\n        var hours = currentTime.getHours();\n        var minutes = currentTime.getMinutes();\n        var seconds = currentTime.getSeconds();\n\n        // Convertir l'heure, les minutes et les secondes en degr√©s\n        var hourAngle = (hours % 12) * 30 + (minutes / 60) * 30;  // Heure (0-360¬∞)\n        var minuteAngle = minutes * 6; // Minute (0-360¬∞)\n        var secondAngle = seconds * 6; // Seconde (0-360¬∞)\n\n        // Appliquer les angles aux aiguilles\n        document.getElementById('hour').setAttribute('transform', 'rotate(' + hourAngle + ', 100, 100)');\n        document.getElementById('minute').setAttribute('transform', 'rotate(' + minuteAngle + ', 100, 100)');\n        document.getElementById('second').setAttribute('transform', 'rotate(' + secondAngle + ', 100, 100)');\n    }\n\n    setInterval(updateClock, 1000);  // Mise √† jour chaque seconde\n    updateClock();  // Initialisation imm√©diate\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2340,
        "y": 240,
        "wires": [
            [
                "baae79a1ec7143d0"
            ]
        ]
    },
    {
        "id": "74ea4ce31dbbd06d",
        "type": "inject",
        "z": "d67dc8f5b5d3187a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Info Temp√©rature",
        "payload": "{     \"envoie d'un mail\": true,     \"temperature\": 87}",
        "payloadType": "json",
        "x": 110,
        "y": 200,
        "wires": [
            [
                "5e9690130aafd33f"
            ]
        ]
    },
    {
        "id": "8095c6e5a005dad6",
        "type": "e-mail",
        "z": "d67dc8f5b5d3187a",
        "server": "mail1.dahergroup.com",
        "port": "25",
        "authtype": "BASIC",
        "saslformat": true,
        "token": "oauth2Response.access_token",
        "secure": false,
        "tls": false,
        "name": "p.sicot@daher.com",
        "dname": "",
        "x": 750,
        "y": 200,
        "wires": []
    },
    {
        "id": "05842e0ae2781d8d",
        "type": "catch",
        "z": "d67dc8f5b5d3187a",
        "name": "erreurs noeud mail",
        "scope": [
            "8095c6e5a005dad6"
        ],
        "uncaught": false,
        "x": 450,
        "y": 280,
        "wires": [
            [
                "8095c6e5a005dad6",
                "300b7293466899b0"
            ]
        ]
    },
    {
        "id": "300b7293466899b0",
        "type": "debug",
        "z": "d67dc8f5b5d3187a",
        "name": "debug 15",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 320,
        "wires": []
    },
    {
        "id": "c41798379dd181f8",
        "type": "comment",
        "z": "d67dc8f5b5d3187a",
        "name": "Verifier la s√©curit√© micorsoft",
        "info": "_TODO_ : aller dans les param√®tres de s√©curit√© microsoft",
        "x": 300,
        "y": 40,
        "wires": []
    },
    {
        "id": "b1c3cf10765d6875",
        "type": "excel",
        "z": "29b840f92d557a1e",
        "name": "",
        "file": "C:\\Users\\2108529\\test.xlsx",
        "x": 450,
        "y": 100,
        "wires": [
            [
                "324c0b24baa17dce"
            ]
        ]
    },
    {
        "id": "324c0b24baa17dce",
        "type": "debug",
        "z": "29b840f92d557a1e",
        "name": "debug 16",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 100,
        "wires": []
    },
    {
        "id": "adfe4d940e183fde",
        "type": "inject",
        "z": "29b840f92d557a1e",
        "name": "d√©clencheur lecture",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{   \"test\": \"C:\\Users\\2108529\\test.xlsx\" }",
        "payloadType": "json",
        "x": 130,
        "y": 100,
        "wires": [
            [
                "b1c3cf10765d6875"
            ]
        ]
    },
    {
        "id": "9cedb0729017c9e1",
        "type": "inject",
        "z": "2463754f4eca34b4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 160,
        "wires": [
            [
                "5693febc3ef05218"
            ]
        ]
    },
    {
        "id": "b158ff65e09da0be",
        "type": "xml",
        "z": "2463754f4eca34b4",
        "name": "",
        "property": "payload",
        "attr": "",
        "chr": "",
        "x": 910,
        "y": 220,
        "wires": [
            [
                "b0ef1fba7ab3041f"
            ]
        ]
    },
    {
        "id": "5693febc3ef05218",
        "type": "file in",
        "z": "2463754f4eca34b4",
        "name": "",
        "filename": "C:\\OPC_UA\\node_red_configuration_Lent_Banc_de_TEST.xml",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 590,
        "y": 160,
        "wires": [
            [
                "b158ff65e09da0be"
            ]
        ]
    },
    {
        "id": "b0ef1fba7ab3041f",
        "type": "function",
        "z": "2463754f4eca34b4",
        "name": "function 12",
        "func": "let variables = msg.payload.Variables.Variable;\nlet result = [];\nlet csv = \"name,nodeId\\n\";\nvariables.forEach(v => {\n    let name = v.$.Name;\n    let nodeId = v.$.NodeId;\n    result.push({\n        name: name,\n        nodeId: nodeId,\n        unit: v.$.Unit,\n        format: v.$.format\n    });\n    csv += `\"${name}\",\"${nodeId}\"\\n`;\n\n});\nmsg.payload = csv;\nnode.warn(csv)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 360,
        "wires": [
            [
                "b77f78e43e4be0ad"
            ]
        ]
    },
    {
        "id": "b77f78e43e4be0ad",
        "type": "file",
        "z": "2463754f4eca34b4",
        "name": "Donnes_bis",
        "filename": "C:\\Users\\2108529\\.node-red\\Donnees_bis.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1170,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "a98a3d344ea5a94c",
        "type": "inject",
        "z": "705cdfa249fde165",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 260,
        "wires": [
            [
                "0419e4d038801d42"
            ]
        ]
    },
    {
        "id": "0419e4d038801d42",
        "type": "OPCUA-IIoT-Flex-Connector",
        "z": "705cdfa249fde165",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "connector": "b5b18316f597e1e1",
        "x": 620,
        "y": 280,
        "wires": [
            []
        ]
    }
]